/* Automatically generated nanopb header */
/* Generated by nanopb-1.0.0-dev */

#ifndef PB_PENUMBRA_CORE_COMPONENT_COMPACT_BLOCK_V1_PENUMBRA_CORE_COMPONENT_COMPACT_BLOCK_V1_COMPACT_BLOCK_PB_H_INCLUDED
#define PB_PENUMBRA_CORE_COMPONENT_COMPACT_BLOCK_V1_PENUMBRA_CORE_COMPONENT_COMPACT_BLOCK_V1_COMPACT_BLOCK_PB_H_INCLUDED
#include <pb.h>

#include "penumbra/core/component/dex/v1/dex.pb.h"
#include "penumbra/core/component/fee/v1/fee.pb.h"
#include "penumbra/core/component/sct/v1/sct.pb.h"
#include "penumbra/core/component/shielded_pool/v1/shielded_pool.pb.h"
#include "penumbra/crypto/tct/v1/tct.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
/* Contains the minimum data needed to update client state. */
typedef struct _penumbra_core_component_compact_block_v1_CompactBlock {
    uint64_t height;
    /* State payloads describing new state fragments. */
    pb_callback_t state_payloads;
    /* Nullifiers identifying spent notes. */
    pb_callback_t nullifiers;
    /* The block root of this block. */
    bool has_block_root;
    penumbra_crypto_tct_v1_MerkleRoot block_root;
    /* The epoch root of this epoch (only present when the block is the last in an epoch). */
    bool has_epoch_root;
    penumbra_crypto_tct_v1_MerkleRoot epoch_root;
    /* If a proposal started voting in this block, this is set to `true`. */
    bool proposal_started;
    /* Latest Fuzzy Message Detection parameters. */
    bool has_fmd_parameters;
    penumbra_core_component_shielded_pool_v1_FmdParameters fmd_parameters;
    /* Price data for swaps executed in this block. */
    pb_callback_t swap_outputs;
    /* Indicates updated app parameters. */
    bool app_parameters_updated;
    /* Updated gas prices, if they have changed. */
    bool has_gas_prices;
    penumbra_core_component_fee_v1_GasPrices gas_prices;
    /* The epoch index */
    uint64_t epoch_index;
    /* Updated gas prices for alternative fee tokens, if they have changed. */
    pb_callback_t alt_gas_prices;
} penumbra_core_component_compact_block_v1_CompactBlock;

typedef struct _penumbra_core_component_compact_block_v1_StatePayload_RolledUp {
    bool has_commitment;
    penumbra_crypto_tct_v1_StateCommitment commitment;
} penumbra_core_component_compact_block_v1_StatePayload_RolledUp;

typedef struct _penumbra_core_component_compact_block_v1_StatePayload_Note {
    bool has_note;
    penumbra_core_component_shielded_pool_v1_NotePayload note;
} penumbra_core_component_compact_block_v1_StatePayload_Note;

typedef struct _penumbra_core_component_compact_block_v1_StatePayload_Swap {
    bool has_swap;
    penumbra_core_component_dex_v1_SwapPayload swap;
} penumbra_core_component_compact_block_v1_StatePayload_Swap;

/* An encrypted payload, corresponding to a single commitment in the state commitment tree. */
typedef struct _penumbra_core_component_compact_block_v1_StatePayload {
    /* The source of the payload, if known. */
    bool has_source;
    penumbra_core_component_sct_v1_CommitmentSource source;
    pb_size_t which_state_payload;
    union {
        penumbra_core_component_compact_block_v1_StatePayload_RolledUp rolled_up;
        penumbra_core_component_compact_block_v1_StatePayload_Note note;
        penumbra_core_component_compact_block_v1_StatePayload_Swap swap;
    } state_payload;
} penumbra_core_component_compact_block_v1_StatePayload;

/* Requests a range of compact block data. */
typedef struct _penumbra_core_component_compact_block_v1_CompactBlockRangeRequest {
    /* The start height of the range. */
    uint64_t start_height;
    /* The end height of the range, defaults to the latest block height. */
    uint64_t end_height;
    /* If set, keeps the connection alive past `end_height`,
 streaming new compact blocks as they are created. */
    bool keep_alive;
} penumbra_core_component_compact_block_v1_CompactBlockRangeRequest;

typedef struct _penumbra_core_component_compact_block_v1_CompactBlockRangeResponse {
    bool has_compact_block;
    penumbra_core_component_compact_block_v1_CompactBlock compact_block;
} penumbra_core_component_compact_block_v1_CompactBlockRangeResponse;

typedef struct _penumbra_core_component_compact_block_v1_CompactBlockRequest {
    uint64_t height;
} penumbra_core_component_compact_block_v1_CompactBlockRequest;

typedef struct _penumbra_core_component_compact_block_v1_CompactBlockResponse {
    bool has_compact_block;
    penumbra_core_component_compact_block_v1_CompactBlock compact_block;
} penumbra_core_component_compact_block_v1_CompactBlockResponse;

#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define penumbra_core_component_compact_block_v1_CompactBlock_init_default                                 \
    {                                                                                                      \
        0, {{NULL}, NULL}, {{NULL}, NULL}, false, penumbra_crypto_tct_v1_MerkleRoot_init_default, false,   \
            penumbra_crypto_tct_v1_MerkleRoot_init_default, 0, false,                                      \
            penumbra_core_component_shielded_pool_v1_FmdParameters_init_default, {{NULL}, NULL}, 0, false, \
            penumbra_core_component_fee_v1_GasPrices_init_default, 0, {                                    \
            {NULL}, NULL                                                                                   \
        }                                                                                                  \
    }
#define penumbra_core_component_compact_block_v1_StatePayload_init_default              \
    {                                                                                   \
        false, penumbra_core_component_sct_v1_CommitmentSource_init_default, 0, {       \
            penumbra_core_component_compact_block_v1_StatePayload_RolledUp_init_default \
        }                                                                               \
    }
#define penumbra_core_component_compact_block_v1_StatePayload_RolledUp_init_default \
    { false, penumbra_crypto_tct_v1_StateCommitment_init_default }
#define penumbra_core_component_compact_block_v1_StatePayload_Note_init_default \
    { false, penumbra_core_component_shielded_pool_v1_NotePayload_init_default }
#define penumbra_core_component_compact_block_v1_StatePayload_Swap_init_default \
    { false, penumbra_core_component_dex_v1_SwapPayload_init_default }
#define penumbra_core_component_compact_block_v1_CompactBlockRangeRequest_init_default \
    { 0, 0, 0 }
#define penumbra_core_component_compact_block_v1_CompactBlockRangeResponse_init_default \
    { false, penumbra_core_component_compact_block_v1_CompactBlock_init_default }
#define penumbra_core_component_compact_block_v1_CompactBlockRequest_init_default \
    { 0 }
#define penumbra_core_component_compact_block_v1_CompactBlockResponse_init_default \
    { false, penumbra_core_component_compact_block_v1_CompactBlock_init_default }
#define penumbra_core_component_compact_block_v1_CompactBlock_init_zero                                 \
    {                                                                                                   \
        0, {{NULL}, NULL}, {{NULL}, NULL}, false, penumbra_crypto_tct_v1_MerkleRoot_init_zero, false,   \
            penumbra_crypto_tct_v1_MerkleRoot_init_zero, 0, false,                                      \
            penumbra_core_component_shielded_pool_v1_FmdParameters_init_zero, {{NULL}, NULL}, 0, false, \
            penumbra_core_component_fee_v1_GasPrices_init_zero, 0, {                                    \
            {NULL}, NULL                                                                                \
        }                                                                                               \
    }
#define penumbra_core_component_compact_block_v1_StatePayload_init_zero              \
    {                                                                                \
        false, penumbra_core_component_sct_v1_CommitmentSource_init_zero, 0, {       \
            penumbra_core_component_compact_block_v1_StatePayload_RolledUp_init_zero \
        }                                                                            \
    }
#define penumbra_core_component_compact_block_v1_StatePayload_RolledUp_init_zero \
    { false, penumbra_crypto_tct_v1_StateCommitment_init_zero }
#define penumbra_core_component_compact_block_v1_StatePayload_Note_init_zero \
    { false, penumbra_core_component_shielded_pool_v1_NotePayload_init_zero }
#define penumbra_core_component_compact_block_v1_StatePayload_Swap_init_zero \
    { false, penumbra_core_component_dex_v1_SwapPayload_init_zero }
#define penumbra_core_component_compact_block_v1_CompactBlockRangeRequest_init_zero \
    { 0, 0, 0 }
#define penumbra_core_component_compact_block_v1_CompactBlockRangeResponse_init_zero \
    { false, penumbra_core_component_compact_block_v1_CompactBlock_init_zero }
#define penumbra_core_component_compact_block_v1_CompactBlockRequest_init_zero \
    { 0 }
#define penumbra_core_component_compact_block_v1_CompactBlockResponse_init_zero \
    { false, penumbra_core_component_compact_block_v1_CompactBlock_init_zero }

/* Field tags (for use in manual encoding/decoding) */
#define penumbra_core_component_compact_block_v1_CompactBlock_height_tag 1
#define penumbra_core_component_compact_block_v1_CompactBlock_state_payloads_tag 2
#define penumbra_core_component_compact_block_v1_CompactBlock_nullifiers_tag 3
#define penumbra_core_component_compact_block_v1_CompactBlock_block_root_tag 4
#define penumbra_core_component_compact_block_v1_CompactBlock_epoch_root_tag 5
#define penumbra_core_component_compact_block_v1_CompactBlock_proposal_started_tag 6
#define penumbra_core_component_compact_block_v1_CompactBlock_fmd_parameters_tag 7
#define penumbra_core_component_compact_block_v1_CompactBlock_swap_outputs_tag 8
#define penumbra_core_component_compact_block_v1_CompactBlock_app_parameters_updated_tag 9
#define penumbra_core_component_compact_block_v1_CompactBlock_gas_prices_tag 10
#define penumbra_core_component_compact_block_v1_CompactBlock_epoch_index_tag 11
#define penumbra_core_component_compact_block_v1_CompactBlock_alt_gas_prices_tag 100
#define penumbra_core_component_compact_block_v1_StatePayload_RolledUp_commitment_tag 1
#define penumbra_core_component_compact_block_v1_StatePayload_Note_note_tag 2
#define penumbra_core_component_compact_block_v1_StatePayload_Swap_swap_tag 2
#define penumbra_core_component_compact_block_v1_StatePayload_source_tag 1
#define penumbra_core_component_compact_block_v1_StatePayload_rolled_up_tag 2
#define penumbra_core_component_compact_block_v1_StatePayload_note_tag 3
#define penumbra_core_component_compact_block_v1_StatePayload_swap_tag 4
#define penumbra_core_component_compact_block_v1_CompactBlockRangeRequest_start_height_tag 2
#define penumbra_core_component_compact_block_v1_CompactBlockRangeRequest_end_height_tag 3
#define penumbra_core_component_compact_block_v1_CompactBlockRangeRequest_keep_alive_tag 4
#define penumbra_core_component_compact_block_v1_CompactBlockRangeResponse_compact_block_tag 1
#define penumbra_core_component_compact_block_v1_CompactBlockRequest_height_tag 1
#define penumbra_core_component_compact_block_v1_CompactBlockResponse_compact_block_tag 1

/* Struct field encoding specification for nanopb */
#define penumbra_core_component_compact_block_v1_CompactBlock_FIELDLIST(X, a) \
    X(a, STATIC, SINGULAR, UINT64, height, 1)                                 \
    X(a, CALLBACK, REPEATED, MESSAGE, state_payloads, 2)                      \
    X(a, CALLBACK, REPEATED, MESSAGE, nullifiers, 3)                          \
    X(a, STATIC, OPTIONAL, MESSAGE, block_root, 4)                            \
    X(a, STATIC, OPTIONAL, MESSAGE, epoch_root, 5)                            \
    X(a, STATIC, SINGULAR, BOOL, proposal_started, 6)                         \
    X(a, STATIC, OPTIONAL, MESSAGE, fmd_parameters, 7)                        \
    X(a, CALLBACK, REPEATED, MESSAGE, swap_outputs, 8)                        \
    X(a, STATIC, SINGULAR, BOOL, app_parameters_updated, 9)                   \
    X(a, STATIC, OPTIONAL, MESSAGE, gas_prices, 10)                           \
    X(a, STATIC, SINGULAR, UINT64, epoch_index, 11)                           \
    X(a, CALLBACK, REPEATED, MESSAGE, alt_gas_prices, 100)
#define penumbra_core_component_compact_block_v1_CompactBlock_CALLBACK pb_default_field_callback
#define penumbra_core_component_compact_block_v1_CompactBlock_DEFAULT NULL
#define penumbra_core_component_compact_block_v1_CompactBlock_state_payloads_MSGTYPE \
    penumbra_core_component_compact_block_v1_StatePayload
#define penumbra_core_component_compact_block_v1_CompactBlock_nullifiers_MSGTYPE penumbra_core_component_sct_v1_Nullifier
#define penumbra_core_component_compact_block_v1_CompactBlock_block_root_MSGTYPE penumbra_crypto_tct_v1_MerkleRoot
#define penumbra_core_component_compact_block_v1_CompactBlock_epoch_root_MSGTYPE penumbra_crypto_tct_v1_MerkleRoot
#define penumbra_core_component_compact_block_v1_CompactBlock_fmd_parameters_MSGTYPE \
    penumbra_core_component_shielded_pool_v1_FmdParameters
#define penumbra_core_component_compact_block_v1_CompactBlock_swap_outputs_MSGTYPE \
    penumbra_core_component_dex_v1_BatchSwapOutputData
#define penumbra_core_component_compact_block_v1_CompactBlock_gas_prices_MSGTYPE penumbra_core_component_fee_v1_GasPrices
#define penumbra_core_component_compact_block_v1_CompactBlock_alt_gas_prices_MSGTYPE penumbra_core_component_fee_v1_GasPrices

#define penumbra_core_component_compact_block_v1_StatePayload_FIELDLIST(X, a)            \
    X(a, STATIC, OPTIONAL, MESSAGE, source, 1)                                           \
    X(a, STATIC, ONEOF, MESSAGE, (state_payload, rolled_up, state_payload.rolled_up), 2) \
    X(a, STATIC, ONEOF, MESSAGE, (state_payload, note, state_payload.note), 3)           \
    X(a, STATIC, ONEOF, MESSAGE, (state_payload, swap, state_payload.swap), 4)
#define penumbra_core_component_compact_block_v1_StatePayload_CALLBACK NULL
#define penumbra_core_component_compact_block_v1_StatePayload_DEFAULT NULL
#define penumbra_core_component_compact_block_v1_StatePayload_source_MSGTYPE penumbra_core_component_sct_v1_CommitmentSource
#define penumbra_core_component_compact_block_v1_StatePayload_state_payload_rolled_up_MSGTYPE \
    penumbra_core_component_compact_block_v1_StatePayload_RolledUp
#define penumbra_core_component_compact_block_v1_StatePayload_state_payload_note_MSGTYPE \
    penumbra_core_component_compact_block_v1_StatePayload_Note
#define penumbra_core_component_compact_block_v1_StatePayload_state_payload_swap_MSGTYPE \
    penumbra_core_component_compact_block_v1_StatePayload_Swap

#define penumbra_core_component_compact_block_v1_StatePayload_RolledUp_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, commitment, 1)
#define penumbra_core_component_compact_block_v1_StatePayload_RolledUp_CALLBACK NULL
#define penumbra_core_component_compact_block_v1_StatePayload_RolledUp_DEFAULT NULL
#define penumbra_core_component_compact_block_v1_StatePayload_RolledUp_commitment_MSGTYPE \
    penumbra_crypto_tct_v1_StateCommitment

#define penumbra_core_component_compact_block_v1_StatePayload_Note_FIELDLIST(X, a) X(a, STATIC, OPTIONAL, MESSAGE, note, 2)
#define penumbra_core_component_compact_block_v1_StatePayload_Note_CALLBACK NULL
#define penumbra_core_component_compact_block_v1_StatePayload_Note_DEFAULT NULL
#define penumbra_core_component_compact_block_v1_StatePayload_Note_note_MSGTYPE \
    penumbra_core_component_shielded_pool_v1_NotePayload

#define penumbra_core_component_compact_block_v1_StatePayload_Swap_FIELDLIST(X, a) X(a, STATIC, OPTIONAL, MESSAGE, swap, 2)
#define penumbra_core_component_compact_block_v1_StatePayload_Swap_CALLBACK NULL
#define penumbra_core_component_compact_block_v1_StatePayload_Swap_DEFAULT NULL
#define penumbra_core_component_compact_block_v1_StatePayload_Swap_swap_MSGTYPE penumbra_core_component_dex_v1_SwapPayload

#define penumbra_core_component_compact_block_v1_CompactBlockRangeRequest_FIELDLIST(X, a) \
    X(a, STATIC, SINGULAR, UINT64, start_height, 2)                                       \
    X(a, STATIC, SINGULAR, UINT64, end_height, 3)                                         \
    X(a, STATIC, SINGULAR, BOOL, keep_alive, 4)
#define penumbra_core_component_compact_block_v1_CompactBlockRangeRequest_CALLBACK NULL
#define penumbra_core_component_compact_block_v1_CompactBlockRangeRequest_DEFAULT NULL

#define penumbra_core_component_compact_block_v1_CompactBlockRangeResponse_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, compact_block, 1)
#define penumbra_core_component_compact_block_v1_CompactBlockRangeResponse_CALLBACK NULL
#define penumbra_core_component_compact_block_v1_CompactBlockRangeResponse_DEFAULT NULL
#define penumbra_core_component_compact_block_v1_CompactBlockRangeResponse_compact_block_MSGTYPE \
    penumbra_core_component_compact_block_v1_CompactBlock

#define penumbra_core_component_compact_block_v1_CompactBlockRequest_FIELDLIST(X, a) \
    X(a, STATIC, SINGULAR, UINT64, height, 1)
#define penumbra_core_component_compact_block_v1_CompactBlockRequest_CALLBACK NULL
#define penumbra_core_component_compact_block_v1_CompactBlockRequest_DEFAULT NULL

#define penumbra_core_component_compact_block_v1_CompactBlockResponse_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, compact_block, 1)
#define penumbra_core_component_compact_block_v1_CompactBlockResponse_CALLBACK NULL
#define penumbra_core_component_compact_block_v1_CompactBlockResponse_DEFAULT NULL
#define penumbra_core_component_compact_block_v1_CompactBlockResponse_compact_block_MSGTYPE \
    penumbra_core_component_compact_block_v1_CompactBlock

extern const pb_msgdesc_t penumbra_core_component_compact_block_v1_CompactBlock_msg;
extern const pb_msgdesc_t penumbra_core_component_compact_block_v1_StatePayload_msg;
extern const pb_msgdesc_t penumbra_core_component_compact_block_v1_StatePayload_RolledUp_msg;
extern const pb_msgdesc_t penumbra_core_component_compact_block_v1_StatePayload_Note_msg;
extern const pb_msgdesc_t penumbra_core_component_compact_block_v1_StatePayload_Swap_msg;
extern const pb_msgdesc_t penumbra_core_component_compact_block_v1_CompactBlockRangeRequest_msg;
extern const pb_msgdesc_t penumbra_core_component_compact_block_v1_CompactBlockRangeResponse_msg;
extern const pb_msgdesc_t penumbra_core_component_compact_block_v1_CompactBlockRequest_msg;
extern const pb_msgdesc_t penumbra_core_component_compact_block_v1_CompactBlockResponse_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define penumbra_core_component_compact_block_v1_CompactBlock_fields \
    &penumbra_core_component_compact_block_v1_CompactBlock_msg
#define penumbra_core_component_compact_block_v1_StatePayload_fields \
    &penumbra_core_component_compact_block_v1_StatePayload_msg
#define penumbra_core_component_compact_block_v1_StatePayload_RolledUp_fields \
    &penumbra_core_component_compact_block_v1_StatePayload_RolledUp_msg
#define penumbra_core_component_compact_block_v1_StatePayload_Note_fields \
    &penumbra_core_component_compact_block_v1_StatePayload_Note_msg
#define penumbra_core_component_compact_block_v1_StatePayload_Swap_fields \
    &penumbra_core_component_compact_block_v1_StatePayload_Swap_msg
#define penumbra_core_component_compact_block_v1_CompactBlockRangeRequest_fields \
    &penumbra_core_component_compact_block_v1_CompactBlockRangeRequest_msg
#define penumbra_core_component_compact_block_v1_CompactBlockRangeResponse_fields \
    &penumbra_core_component_compact_block_v1_CompactBlockRangeResponse_msg
#define penumbra_core_component_compact_block_v1_CompactBlockRequest_fields \
    &penumbra_core_component_compact_block_v1_CompactBlockRequest_msg
#define penumbra_core_component_compact_block_v1_CompactBlockResponse_fields \
    &penumbra_core_component_compact_block_v1_CompactBlockResponse_msg

/* Maximum encoded size of messages (where known) */
#if defined(penumbra_crypto_tct_v1_StateCommitment_size) &&               \
    defined(penumbra_core_component_shielded_pool_v1_NotePayload_size) && \
    defined(penumbra_core_component_dex_v1_SwapPayload_size)
union penumbra_core_component_compact_block_v1_StatePayload_state_payload_size_union {
    char f2[(12 + penumbra_crypto_tct_v1_StateCommitment_size)];
    char f3[(12 + penumbra_core_component_shielded_pool_v1_NotePayload_size)];
    char f4[(12 + penumbra_core_component_dex_v1_SwapPayload_size)];
};
#endif
/* penumbra_core_component_compact_block_v1_CompactBlock_size depends on runtime parameters */
/* penumbra_core_component_compact_block_v1_CompactBlockRangeResponse_size depends on runtime parameters */
/* penumbra_core_component_compact_block_v1_CompactBlockResponse_size depends on runtime parameters */
#if defined(penumbra_core_component_sct_v1_CommitmentSource_size) &&      \
    defined(penumbra_crypto_tct_v1_StateCommitment_size) &&               \
    defined(penumbra_core_component_shielded_pool_v1_NotePayload_size) && \
    defined(penumbra_core_component_dex_v1_SwapPayload_size)
#define penumbra_core_component_compact_block_v1_StatePayload_size \
    (6 + penumbra_core_component_sct_v1_CommitmentSource_size +    \
     sizeof(union penumbra_core_component_compact_block_v1_StatePayload_state_payload_size_union))
#endif
#if defined(penumbra_crypto_tct_v1_StateCommitment_size)
#define penumbra_core_component_compact_block_v1_StatePayload_RolledUp_size (6 + penumbra_crypto_tct_v1_StateCommitment_size)
#endif
#if defined(penumbra_core_component_shielded_pool_v1_NotePayload_size)
#define penumbra_core_component_compact_block_v1_StatePayload_Note_size \
    (6 + penumbra_core_component_shielded_pool_v1_NotePayload_size)
#endif
#if defined(penumbra_core_component_dex_v1_SwapPayload_size)
#define penumbra_core_component_compact_block_v1_StatePayload_Swap_size (6 + penumbra_core_component_dex_v1_SwapPayload_size)
#endif
#define PENUMBRA_CORE_COMPONENT_COMPACT_BLOCK_V1_PENUMBRA_CORE_COMPONENT_COMPACT_BLOCK_V1_COMPACT_BLOCK_PB_H_MAX_SIZE \
    penumbra_core_component_compact_block_v1_CompactBlockRangeRequest_size
#define penumbra_core_component_compact_block_v1_CompactBlockRangeRequest_size 24
#define penumbra_core_component_compact_block_v1_CompactBlockRequest_size 11

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
