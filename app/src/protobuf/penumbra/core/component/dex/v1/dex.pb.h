/* Automatically generated nanopb header */
/* Generated by nanopb-1.0.0-dev */

#ifndef PB_PENUMBRA_CORE_COMPONENT_DEX_V1_PENUMBRA_CORE_COMPONENT_DEX_V1_DEX_PB_H_INCLUDED
#define PB_PENUMBRA_CORE_COMPONENT_DEX_V1_PENUMBRA_CORE_COMPONENT_DEX_V1_DEX_PB_H_INCLUDED
#include <pb.h>

#include "penumbra/core/asset/v1/asset.pb.h"
#include "penumbra/core/component/fee/v1/fee.pb.h"
#include "penumbra/core/component/sct/v1/sct.pb.h"
#include "penumbra/core/component/shielded_pool/v1/shielded_pool.pb.h"
#include "penumbra/core/keys/v1/keys.pb.h"
#include "penumbra/core/num/v1/num.pb.h"
#include "penumbra/core/txhash/v1/txhash.pb.h"
#include "penumbra/crypto/tct/v1/tct.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _penumbra_core_component_dex_v1_PositionState_PositionStateEnum {
    penumbra_core_component_dex_v1_PositionState_PositionStateEnum_POSITION_STATE_ENUM_UNSPECIFIED = 0,
    /* The position has been opened, is active, has reserves and accumulated
 fees, and can be traded against. */
    penumbra_core_component_dex_v1_PositionState_PositionStateEnum_POSITION_STATE_ENUM_OPENED = 1,
    /* The position has been closed, is inactive and can no longer be traded
 against, but still has reserves and accumulated fees. */
    penumbra_core_component_dex_v1_PositionState_PositionStateEnum_POSITION_STATE_ENUM_CLOSED = 2,
    /* The final reserves and accumulated fees have been withdrawn, leaving an
 empty, inactive position awaiting (possible) retroactive rewards.

 Positions can be withdrawn from multiple times, incrementing a sequence
 number each time. */
    penumbra_core_component_dex_v1_PositionState_PositionStateEnum_POSITION_STATE_ENUM_WITHDRAWN = 3,
    /* Deprecated. */
    penumbra_core_component_dex_v1_PositionState_PositionStateEnum_POSITION_STATE_ENUM_CLAIMED = 4
} penumbra_core_component_dex_v1_PositionState_PositionStateEnum;

/* Struct definitions */
/* A Penumbra ZK swap proof. */
typedef struct _penumbra_core_component_dex_v1_ZKSwapProof {
    pb_callback_t inner;
} penumbra_core_component_dex_v1_ZKSwapProof;

/* A Penumbra ZK swap claim proof. */
typedef struct _penumbra_core_component_dex_v1_ZKSwapClaimProof {
    pb_callback_t inner;
} penumbra_core_component_dex_v1_ZKSwapClaimProof;

typedef struct _penumbra_core_component_dex_v1_SwapPayload {
    bool has_commitment;
    penumbra_crypto_tct_v1_StateCommitment commitment;
    pb_callback_t encrypted_swap;
} penumbra_core_component_dex_v1_SwapPayload;

/* Holds two asset IDs. Ordering doesn't reflect trading direction. Instead, we
 require `asset_1 < asset_2` as field elements, to ensure a canonical
 representation of an unordered pair. */
typedef struct _penumbra_core_component_dex_v1_TradingPair {
    /* The first asset of the pair. */
    bool has_asset_1;
    penumbra_core_asset_v1_AssetId asset_1;
    /* The second asset of the pair. */
    bool has_asset_2;
    penumbra_core_asset_v1_AssetId asset_2;
} penumbra_core_component_dex_v1_TradingPair;

/* The authorized data of a Swap transaction. */
typedef struct _penumbra_core_component_dex_v1_SwapBody {
    /* The trading pair to swap. */
    bool has_trading_pair;
    penumbra_core_component_dex_v1_TradingPair trading_pair;
    /* The amount for asset 1. */
    bool has_delta_1_i;
    penumbra_core_num_v1_Amount delta_1_i;
    /* The amount for asset 2. */
    bool has_delta_2_i;
    penumbra_core_num_v1_Amount delta_2_i;
    /* A commitment to a prepaid fee for the future SwapClaim.
 This is recorded separately from delta_j_i because it's shielded;
 in the future we'll want separate commitments to each delta_j_i
 anyways in order to prove consistency with flow encryption. */
    bool has_fee_commitment;
    penumbra_core_asset_v1_BalanceCommitment fee_commitment;
    /* The swap commitment and encryption of the swap data. */
    bool has_payload;
    penumbra_core_component_dex_v1_SwapPayload payload;
} penumbra_core_component_dex_v1_SwapBody;

/* A transaction action that submits a swap to the dex. */
typedef struct _penumbra_core_component_dex_v1_Swap {
    /* Contains the Swap proof. */
    bool has_proof;
    penumbra_core_component_dex_v1_ZKSwapProof proof;
    /* Encapsulates the authorized fields of the Swap action, used in signing. */
    bool has_body;
    penumbra_core_component_dex_v1_SwapBody body;
} penumbra_core_component_dex_v1_Swap;

typedef struct _penumbra_core_component_dex_v1_SwapPlaintext {
    /* The trading pair to swap. */
    bool has_trading_pair;
    penumbra_core_component_dex_v1_TradingPair trading_pair;
    /* Input amount of asset 1 */
    bool has_delta_1_i;
    penumbra_core_num_v1_Amount delta_1_i;
    /* Input amount of asset 2 */
    bool has_delta_2_i;
    penumbra_core_num_v1_Amount delta_2_i;
    /* Pre-paid fee to claim the swap */
    bool has_claim_fee;
    penumbra_core_component_fee_v1_Fee claim_fee;
    /* Address that will claim the swap outputs via SwapClaim. */
    bool has_claim_address;
    penumbra_core_keys_v1_Address claim_address;
    /* Swap rseed (blinding factors are derived from this) */
    pb_callback_t rseed;
} penumbra_core_component_dex_v1_SwapPlaintext;

typedef struct _penumbra_core_component_dex_v1_SwapPlan {
    /* The plaintext version of the swap to be performed. */
    bool has_swap_plaintext;
    penumbra_core_component_dex_v1_SwapPlaintext swap_plaintext;
    /* The blinding factor for the fee commitment. The fee in the SwapPlan is private to prevent linkability with the
     * SwapClaim. */
    pb_callback_t fee_blinding;
    /* The first blinding factor to use for the ZK swap proof. */
    pb_callback_t proof_blinding_r;
    /* The second blinding factor to use for the ZK swap proof. */
    pb_callback_t proof_blinding_s;
} penumbra_core_component_dex_v1_SwapPlan;

/* Encodes a trading pair starting from asset `start`
 and ending on asset `end`. */
typedef struct _penumbra_core_component_dex_v1_DirectedTradingPair {
    /* The start asset of the pair. */
    bool has_start;
    penumbra_core_asset_v1_AssetId start;
    /* The end asset of the pair. */
    bool has_end;
    penumbra_core_asset_v1_AssetId end;
} penumbra_core_component_dex_v1_DirectedTradingPair;

/* Records the result of a batch swap on-chain.

 Used as a public input to a swap claim proof, as it implies the effective
 clearing price for the batch. */
typedef struct _penumbra_core_component_dex_v1_BatchSwapOutputData {
    /* The total amount of asset 1 that was input to the batch swap. */
    bool has_delta_1;
    penumbra_core_num_v1_Amount delta_1;
    /* The total amount of asset 2 that was input to the batch swap. */
    bool has_delta_2;
    penumbra_core_num_v1_Amount delta_2;
    /* The total amount of asset 1 that was output from the batch swap for 2=>1 trades. */
    bool has_lambda_1;
    penumbra_core_num_v1_Amount lambda_1;
    /* The total amount of asset 2 that was output from the batch swap for 1=>2 trades. */
    bool has_lambda_2;
    penumbra_core_num_v1_Amount lambda_2;
    /* The total amount of asset 1 that was returned unfilled from the batch swap for 1=>2 trades. */
    bool has_unfilled_1;
    penumbra_core_num_v1_Amount unfilled_1;
    /* The total amount of asset 2 that was returned unfilled from the batch swap for 2=>1 trades. */
    bool has_unfilled_2;
    penumbra_core_num_v1_Amount unfilled_2;
    /* The height for which the batch swap data is valid. */
    uint64_t height;
    /* The trading pair associated with the batch swap. */
    bool has_trading_pair;
    penumbra_core_component_dex_v1_TradingPair trading_pair;
    /* The starting block height of the epoch for which the batch swap data is valid. */
    uint64_t epoch_starting_height;
    /* The prefix (epoch, block) of the position where this batch swap occurred. */
    uint64_t sct_position_prefix;
} penumbra_core_component_dex_v1_BatchSwapOutputData;

/* Encapsulates the authorized fields of the SwapClaim action, used in signing. */
typedef struct _penumbra_core_component_dex_v1_SwapClaimBody {
    /* The nullifier for the Swap commitment to be consumed. */
    bool has_nullifier;
    penumbra_core_component_sct_v1_Nullifier nullifier;
    /* The fee allows `SwapClaim` without an additional `Spend`. */
    bool has_fee;
    penumbra_core_component_fee_v1_Fee fee;
    /* Note output for asset 1. */
    bool has_output_1_commitment;
    penumbra_crypto_tct_v1_StateCommitment output_1_commitment;
    /* Note output for asset 2. */
    bool has_output_2_commitment;
    penumbra_crypto_tct_v1_StateCommitment output_2_commitment;
    /* Input and output amounts, and asset IDs for the assets in the swap. */
    bool has_output_data;
    penumbra_core_component_dex_v1_BatchSwapOutputData output_data;
} penumbra_core_component_dex_v1_SwapClaimBody;

/* A transaction action that obtains assets previously confirmed
 via a Swap transaction. Does not include a spend authorization
 signature, as it is only capable of consuming the NFT from a
 Swap transaction. */
typedef struct _penumbra_core_component_dex_v1_SwapClaim {
    /* Contains the SwapClaim proof. */
    bool has_proof;
    penumbra_core_component_dex_v1_ZKSwapClaimProof proof;
    /* Encapsulates the authorized fields of the SwapClaim action, used in signing. */
    bool has_body;
    penumbra_core_component_dex_v1_SwapClaimBody body;
    /* The epoch duration of the chain when the swap claim took place. */
    uint64_t epoch_duration;
} penumbra_core_component_dex_v1_SwapClaim;

typedef struct _penumbra_core_component_dex_v1_SwapClaimPlan {
    /* The plaintext version of the swap to be performed. */
    bool has_swap_plaintext;
    penumbra_core_component_dex_v1_SwapPlaintext swap_plaintext;
    /* The position of the swap commitment. */
    uint64_t position;
    /* Input and output amounts for the Swap. */
    bool has_output_data;
    penumbra_core_component_dex_v1_BatchSwapOutputData output_data;
    /* The epoch duration, used in proving. */
    uint64_t epoch_duration;
    /* The first blinding factor to use for the ZK swap claim proof. */
    pb_callback_t proof_blinding_r;
    /* The second blinding factor to use for the ZK swap claim proof. */
    pb_callback_t proof_blinding_s;
} penumbra_core_component_dex_v1_SwapClaimPlan;

typedef struct _penumbra_core_component_dex_v1_SwapView_Visible {
    /* The underlying Swap action being viewed. */
    bool has_swap;
    penumbra_core_component_dex_v1_Swap swap;
    /* The plaintext of the encrypted swap. */
    bool has_swap_plaintext;
    penumbra_core_component_dex_v1_SwapPlaintext swap_plaintext;
    /* Optionally, a transaction hash for the transaction that claimed this
 swap.

 Presence of this field signals that the swap outputs have been claimed
 and that the claim transaction is known to the view server.  Absence of
 this field does not indicate anything about the state of the swap.

 This field allows frontends to more easily crossreference the sequence of
 Swap/SwapClaim actions. */
    bool has_claim_tx;
    penumbra_core_txhash_v1_TransactionId claim_tx;
    /* Optionally, if the swap has been confirmed, the batch price it received.

 As soon as the swap is detected, the view server can in principle record
 the relevant BSOD and provide it as part of the view.  This allows providing
 info about the execution of the swap. */
    bool has_batch_swap_output_data;
    penumbra_core_component_dex_v1_BatchSwapOutputData batch_swap_output_data;
    /* Optionally, if the swap has been confirmed, the output note of asset 1.

 This is the note that will be minted by the SwapClaim action. */
    bool has_output_1;
    penumbra_core_component_shielded_pool_v1_NoteView output_1;
    /* Optionally, if the swap has been confirmed, the output note of asset 2.

 This is the note that will be minted by the SwapClaim action. */
    bool has_output_2;
    penumbra_core_component_shielded_pool_v1_NoteView output_2;
    /* Optionally, metadata about asset 1 in the `swap`'s trading pair. */
    bool has_asset_1_metadata;
    penumbra_core_asset_v1_Metadata asset_1_metadata;
    /* Optionally, metadata about asset 2 in the `swap`'s trading pair. */
    bool has_asset_2_metadata;
    penumbra_core_asset_v1_Metadata asset_2_metadata;
} penumbra_core_component_dex_v1_SwapView_Visible;

typedef struct _penumbra_core_component_dex_v1_SwapView_Opaque {
    bool has_swap;
    penumbra_core_component_dex_v1_Swap swap;
    /* Optionally, if the swap has been confirmed, the batch price it received.

 As soon as the swap is detected, the view server can in principle record
 the relevant BSOD and provide it as part of the view.  This allows providing
 info about the execution of the swap. */
    bool has_batch_swap_output_data;
    penumbra_core_component_dex_v1_BatchSwapOutputData batch_swap_output_data;
    /* Optionally, if the swap has been confirmed, the output value of asset 1.

 This is the value of the note that will be minted by the SwapClaim action.
 Note that unlike the `Visible` variant, this is only a `ValueView` since
 the details of the note (in particular the claim address) are not publicly known. */
    bool has_output_1_value;
    penumbra_core_asset_v1_ValueView output_1_value;
    /* Optionally, if the swap has been confirmed, the output value of asset 2.

 This is the note that will be minted by the SwapClaim action.
 Note that unlike the `Visible` variant, this is only a `ValueView` since
 the details of the note (in particular the claim address) are not publicly known. */
    bool has_output_2_value;
    penumbra_core_asset_v1_ValueView output_2_value;
    /* Optionally, metadata about asset 1 in the `swap`'s trading pair. */
    bool has_asset_1_metadata;
    penumbra_core_asset_v1_Metadata asset_1_metadata;
    /* Optionally, metadata about asset 2 in the `swap`'s trading pair. */
    bool has_asset_2_metadata;
    penumbra_core_asset_v1_Metadata asset_2_metadata;
} penumbra_core_component_dex_v1_SwapView_Opaque;

typedef struct _penumbra_core_component_dex_v1_SwapView {
    pb_size_t which_swap_view;
    union {
        penumbra_core_component_dex_v1_SwapView_Visible visible;
        penumbra_core_component_dex_v1_SwapView_Opaque opaque;
    } swap_view;
} penumbra_core_component_dex_v1_SwapView;

typedef struct _penumbra_core_component_dex_v1_SwapClaimView_Visible {
    bool has_swap_claim;
    penumbra_core_component_dex_v1_SwapClaim swap_claim;
    bool has_output_1;
    penumbra_core_component_shielded_pool_v1_NoteView output_1;
    bool has_output_2;
    penumbra_core_component_shielded_pool_v1_NoteView output_2;
    /* Optionally, a transaction hash for the transaction that created the swap
 this action claims.

 This field allows frontends to more easily crossreference the sequence of
 Swap/SwapClaim actions. */
    bool has_swap_tx;
    penumbra_core_txhash_v1_TransactionId swap_tx;
} penumbra_core_component_dex_v1_SwapClaimView_Visible;

typedef struct _penumbra_core_component_dex_v1_SwapClaimView_Opaque {
    bool has_swap_claim;
    penumbra_core_component_dex_v1_SwapClaim swap_claim;
} penumbra_core_component_dex_v1_SwapClaimView_Opaque;

typedef struct _penumbra_core_component_dex_v1_SwapClaimView {
    pb_size_t which_swap_claim_view;
    union {
        penumbra_core_component_dex_v1_SwapClaimView_Visible visible;
        penumbra_core_component_dex_v1_SwapClaimView_Opaque opaque;
    } swap_claim_view;
} penumbra_core_component_dex_v1_SwapClaimView;

/* The minimum amount of data describing a trading function.

 This implicitly treats the trading function as being between assets 1 and 2,
 without specifying what those assets are, to avoid duplicating data (each
 asset ID alone is twice the size of the trading function). */
typedef struct _penumbra_core_component_dex_v1_BareTradingFunction {
    uint32_t fee;
    /* This is not actually an amount, it's an integer the same width as an amount */
    bool has_p;
    penumbra_core_num_v1_Amount p;
    /* This is not actually an amount, it's an integer the same width as an amount */
    bool has_q;
    penumbra_core_num_v1_Amount q;
} penumbra_core_component_dex_v1_BareTradingFunction;

/* The trading function for a specific pair.
 For a pair (asset_1, asset_2), a trading function is defined by:
 `phi(R) = p*R_1 + q*R_2` and `gamma = 1 - fee`.
 The trading function is frequently referred to as "phi". */
typedef struct _penumbra_core_component_dex_v1_TradingFunction {
    bool has_component;
    penumbra_core_component_dex_v1_BareTradingFunction component;
    bool has_pair;
    penumbra_core_component_dex_v1_TradingPair pair;
} penumbra_core_component_dex_v1_TradingFunction;

/* The reserves of a position.

 Like a position, this implicitly treats the trading function as being
 between assets 1 and 2, without specifying what those assets are, to avoid
 duplicating data (each asset ID alone is four times the size of the
 reserves). */
typedef struct _penumbra_core_component_dex_v1_Reserves {
    bool has_r1;
    penumbra_core_num_v1_Amount r1;
    bool has_r2;
    penumbra_core_num_v1_Amount r2;
} penumbra_core_component_dex_v1_Reserves;

/* A hash of a `Position`. */
typedef struct _penumbra_core_component_dex_v1_PositionId {
    /* The bytes of the position ID. */
    pb_callback_t inner;
    /* Alternatively, a Bech32m-encoded string representation of the `inner`
 bytes.

 NOTE: implementations are not required to support parsing this field.
 Implementations should prefer to encode the bytes in all messages they
 produce. Implementations must not accept messages with both `inner` and
 `alt_bech32m` set. */
    pb_callback_t alt_bech32m;
} penumbra_core_component_dex_v1_PositionId;

/* The state of a position. */
typedef struct _penumbra_core_component_dex_v1_PositionState {
    penumbra_core_component_dex_v1_PositionState_PositionStateEnum state;
    /* Only meaningful if `state` is `POSITION_STATE_ENUM_WITHDRAWN`.

 The sequence number allows multiple withdrawals from the same position. */
    uint64_t sequence;
} penumbra_core_component_dex_v1_PositionState;

/* Data identifying a position. */
typedef struct _penumbra_core_component_dex_v1_Position {
    bool has_phi;
    penumbra_core_component_dex_v1_TradingFunction phi;
    /* A random value used to disambiguate different positions with the exact same
 trading function.  The chain should reject newly created positions with the
 same nonce as an existing position.  This ensures that `PositionId`s will
 be unique, and allows us to track position ownership with a
 sequence of stateful NFTs based on the `PositionId`. */
    pb_callback_t nonce;
    bool has_state;
    penumbra_core_component_dex_v1_PositionState state;
    bool has_reserves;
    penumbra_core_component_dex_v1_Reserves reserves;
    /* / If set to true, the position is a limit-order and will be closed
/ immediately after being filled. */
    bool close_on_fill;
} penumbra_core_component_dex_v1_Position;

/* An LPNFT tracking both ownership and state of a position.

 Tracking the state as part of the LPNFT means that all LP-related actions can
 be authorized by spending funds: a state transition (e.g., closing a
 position) is modeled as spending an "open position LPNFT" and minting a
 "closed position LPNFT" for the same (globally unique) position ID.

 This means that the LP mechanics can be agnostic to the mechanism used to
 record custody and spend authorization.  For instance, they can be recorded
 in the shielded pool, where custody is based on off-chain keys, or they could
 be recorded in a programmatic on-chain account (in the future, e.g., to
 support interchain accounts).  This also means that LP-related actions don't
 require any cryptographic implementation (proofs, signatures, etc), other
 than hooking into the value commitment mechanism used for transaction
 balances. */
typedef struct _penumbra_core_component_dex_v1_LpNft {
    bool has_position_id;
    penumbra_core_component_dex_v1_PositionId position_id;
    bool has_state;
    penumbra_core_component_dex_v1_PositionState state;
} penumbra_core_component_dex_v1_LpNft;

/* A transaction action that opens a new position.

 This action's contribution to the transaction's value balance is to consume
 the initial reserves and contribute an opened position NFT. */
typedef struct _penumbra_core_component_dex_v1_PositionOpen {
    /* Contains the data defining the position, sufficient to compute its `PositionId`.

 Positions are immutable, so the `PositionData` (and hence the `PositionId`)
 are unchanged over the entire lifetime of the position. */
    bool has_position;
    penumbra_core_component_dex_v1_Position position;
} penumbra_core_component_dex_v1_PositionOpen;

/* A transaction action that closes a position.

 This action's contribution to the transaction's value balance is to consume
 an opened position NFT and contribute a closed position NFT.

 Closing a position does not immediately withdraw funds, because Penumbra
 transactions (like any ZK transaction model) are early-binding: the prover
 must know the state transition they prove knowledge of, and they cannot know
 the final reserves with certainty until after the position has been deactivated. */
typedef struct _penumbra_core_component_dex_v1_PositionClose {
    bool has_position_id;
    penumbra_core_component_dex_v1_PositionId position_id;
} penumbra_core_component_dex_v1_PositionClose;

/* A transaction action that withdraws funds from a closed position.

 This action's contribution to the transaction's value balance is to consume a
 closed position NFT and contribute a withdrawn position NFT, as well as all
 of the funds that were in the position at the time of closing. */
typedef struct _penumbra_core_component_dex_v1_PositionWithdraw {
    bool has_position_id;
    penumbra_core_component_dex_v1_PositionId position_id;
    /* A transparent (zero blinding factor) commitment to the position's final reserves and fees.

 The chain will check this commitment by recomputing it with the on-chain state. */
    bool has_reserves_commitment;
    penumbra_core_asset_v1_BalanceCommitment reserves_commitment;
    /* The sequence number of the withdrawal.

 This allows multiple withdrawals from the same position, rather than a single reward claim. */
    uint64_t sequence;
} penumbra_core_component_dex_v1_PositionWithdraw;

/* Deprecated. */
typedef struct _penumbra_core_component_dex_v1_PositionRewardClaim {
    bool has_position_id;
    penumbra_core_component_dex_v1_PositionId position_id;
    bool has_rewards_commitment;
    penumbra_core_asset_v1_BalanceCommitment rewards_commitment;
} penumbra_core_component_dex_v1_PositionRewardClaim;

/* Contains the entire execution of a particular swap. */
typedef struct _penumbra_core_component_dex_v1_SwapExecution {
    pb_callback_t traces;
    /* The total input amount for this execution. */
    bool has_input;
    penumbra_core_asset_v1_Value input;
    /* The total output amount for this execution. */
    bool has_output;
    penumbra_core_asset_v1_Value output;
} penumbra_core_component_dex_v1_SwapExecution;

/* Contains all individual steps consisting of a trade trace. */
typedef struct _penumbra_core_component_dex_v1_SwapExecution_Trace {
    /* Each step in the trade trace. */
    pb_callback_t value;
} penumbra_core_component_dex_v1_SwapExecution_Trace;

/* Contains private and public data for withdrawing funds from a closed position. */
typedef struct _penumbra_core_component_dex_v1_PositionWithdrawPlan {
    bool has_reserves;
    penumbra_core_component_dex_v1_Reserves reserves;
    bool has_position_id;
    penumbra_core_component_dex_v1_PositionId position_id;
    bool has_pair;
    penumbra_core_component_dex_v1_TradingPair pair;
    /* The sequence number of the withdrawal. */
    uint64_t sequence;
    /* Any accumulated rewards assigned to this position. */
    pb_callback_t rewards;
} penumbra_core_component_dex_v1_PositionWithdrawPlan;

/* Deprecated. */
typedef struct _penumbra_core_component_dex_v1_PositionRewardClaimPlan {
    bool has_reserves;
    penumbra_core_component_dex_v1_Reserves reserves;
} penumbra_core_component_dex_v1_PositionRewardClaimPlan;

/* Requests batch swap data associated with a given height and trading pair from the view service. */
typedef struct _penumbra_core_component_dex_v1_BatchSwapOutputDataRequest {
    uint64_t height;
    bool has_trading_pair;
    penumbra_core_component_dex_v1_TradingPair trading_pair;
} penumbra_core_component_dex_v1_BatchSwapOutputDataRequest;

typedef struct _penumbra_core_component_dex_v1_BatchSwapOutputDataResponse {
    bool has_data;
    penumbra_core_component_dex_v1_BatchSwapOutputData data;
} penumbra_core_component_dex_v1_BatchSwapOutputDataResponse;

typedef struct _penumbra_core_component_dex_v1_SwapExecutionRequest {
    uint64_t height;
    bool has_trading_pair;
    penumbra_core_component_dex_v1_DirectedTradingPair trading_pair;
} penumbra_core_component_dex_v1_SwapExecutionRequest;

typedef struct _penumbra_core_component_dex_v1_SwapExecutionResponse {
    bool has_swap_execution;
    penumbra_core_component_dex_v1_SwapExecution swap_execution;
} penumbra_core_component_dex_v1_SwapExecutionResponse;

typedef struct _penumbra_core_component_dex_v1_ArbExecutionRequest {
    uint64_t height;
} penumbra_core_component_dex_v1_ArbExecutionRequest;

typedef struct _penumbra_core_component_dex_v1_ArbExecutionResponse {
    bool has_swap_execution;
    penumbra_core_component_dex_v1_SwapExecution swap_execution;
    uint64_t height;
} penumbra_core_component_dex_v1_ArbExecutionResponse;

typedef struct _penumbra_core_component_dex_v1_SwapExecutionsRequest {
    /* If present, only return swap executions occurring after the given height. */
    uint64_t start_height;
    /* If present, only return swap executions occurring before the given height. */
    uint64_t end_height;
    /* If present, filter swap executions by the given trading pair. */
    bool has_trading_pair;
    penumbra_core_component_dex_v1_DirectedTradingPair trading_pair;
} penumbra_core_component_dex_v1_SwapExecutionsRequest;

typedef struct _penumbra_core_component_dex_v1_SwapExecutionsResponse {
    bool has_swap_execution;
    penumbra_core_component_dex_v1_SwapExecution swap_execution;
    uint64_t height;
    bool has_trading_pair;
    penumbra_core_component_dex_v1_DirectedTradingPair trading_pair;
} penumbra_core_component_dex_v1_SwapExecutionsResponse;

typedef struct _penumbra_core_component_dex_v1_ArbExecutionsRequest {
    /* If present, only return arb executions occurring after the given height. */
    uint64_t start_height;
    /* If present, only return arb executions occurring before the given height. */
    uint64_t end_height;
} penumbra_core_component_dex_v1_ArbExecutionsRequest;

typedef struct _penumbra_core_component_dex_v1_ArbExecutionsResponse {
    bool has_swap_execution;
    penumbra_core_component_dex_v1_SwapExecution swap_execution;
    uint64_t height;
} penumbra_core_component_dex_v1_ArbExecutionsResponse;

typedef struct _penumbra_core_component_dex_v1_LiquidityPositionsRequest {
    /* If true, include closed and withdrawn positions. */
    bool include_closed;
} penumbra_core_component_dex_v1_LiquidityPositionsRequest;

typedef struct _penumbra_core_component_dex_v1_LiquidityPositionsResponse {
    bool has_data;
    penumbra_core_component_dex_v1_Position data;
} penumbra_core_component_dex_v1_LiquidityPositionsResponse;

typedef struct _penumbra_core_component_dex_v1_LiquidityPositionByIdRequest {
    bool has_position_id;
    penumbra_core_component_dex_v1_PositionId position_id;
} penumbra_core_component_dex_v1_LiquidityPositionByIdRequest;

typedef struct _penumbra_core_component_dex_v1_LiquidityPositionByIdResponse {
    bool has_data;
    penumbra_core_component_dex_v1_Position data;
} penumbra_core_component_dex_v1_LiquidityPositionByIdResponse;

typedef struct _penumbra_core_component_dex_v1_LiquidityPositionsByIdRequest {
    pb_callback_t position_id;
} penumbra_core_component_dex_v1_LiquidityPositionsByIdRequest;

typedef struct _penumbra_core_component_dex_v1_LiquidityPositionsByIdResponse {
    bool has_data;
    penumbra_core_component_dex_v1_Position data;
} penumbra_core_component_dex_v1_LiquidityPositionsByIdResponse;

typedef struct _penumbra_core_component_dex_v1_LiquidityPositionsByPriceRequest {
    /* The directed trading pair to request positions for */
    bool has_trading_pair;
    penumbra_core_component_dex_v1_DirectedTradingPair trading_pair;
    /* The maximum number of positions to return. */
    uint64_t limit;
} penumbra_core_component_dex_v1_LiquidityPositionsByPriceRequest;

typedef struct _penumbra_core_component_dex_v1_LiquidityPositionsByPriceResponse {
    bool has_data;
    penumbra_core_component_dex_v1_Position data;
    bool has_id;
    penumbra_core_component_dex_v1_PositionId id;
} penumbra_core_component_dex_v1_LiquidityPositionsByPriceResponse;

typedef struct _penumbra_core_component_dex_v1_SpreadRequest {
    bool has_trading_pair;
    penumbra_core_component_dex_v1_TradingPair trading_pair;
} penumbra_core_component_dex_v1_SpreadRequest;

typedef struct _penumbra_core_component_dex_v1_SpreadResponse {
    /* The best position when trading 1 => 2. */
    bool has_best_1_to_2_position;
    penumbra_core_component_dex_v1_Position best_1_to_2_position;
    /* The best position when trading 2 => 1. */
    bool has_best_2_to_1_position;
    penumbra_core_component_dex_v1_Position best_2_to_1_position;
    /* An approximation of the effective price when trading 1 => 2. */
    double approx_effective_price_1_to_2;
    /* An approximation of the effective price when trading 2 => 1. */
    double approx_effective_price_2_to_1;
} penumbra_core_component_dex_v1_SpreadResponse;

typedef struct _penumbra_core_component_dex_v1_SimulateTradeRequest_Routing_SingleHop {
    char dummy_field;
} penumbra_core_component_dex_v1_SimulateTradeRequest_Routing_SingleHop;

typedef struct _penumbra_core_component_dex_v1_SimulateTradeRequest_Routing_Default {
    char dummy_field;
} penumbra_core_component_dex_v1_SimulateTradeRequest_Routing_Default;

typedef struct _penumbra_core_component_dex_v1_SimulateTradeRequest_Routing {
    pb_size_t which_setting;
    union {
        penumbra_core_component_dex_v1_SimulateTradeRequest_Routing_Default default_;
        penumbra_core_component_dex_v1_SimulateTradeRequest_Routing_SingleHop single_hop;
    } setting;
} penumbra_core_component_dex_v1_SimulateTradeRequest_Routing;

typedef struct _penumbra_core_component_dex_v1_SimulateTradeRequest {
    bool has_input;
    penumbra_core_asset_v1_Value input;
    bool has_output;
    penumbra_core_asset_v1_AssetId output;
    bool has_routing;
    penumbra_core_component_dex_v1_SimulateTradeRequest_Routing routing;
} penumbra_core_component_dex_v1_SimulateTradeRequest;

typedef struct _penumbra_core_component_dex_v1_SimulateTradeResponse {
    bool has_output;
    penumbra_core_component_dex_v1_SwapExecution output;
    /* Estimated input amount that will not be swapped due to liquidity */
    bool has_unfilled;
    penumbra_core_asset_v1_Value unfilled;
} penumbra_core_component_dex_v1_SimulateTradeResponse;

typedef struct _penumbra_core_component_dex_v1_EventSwap {
    /* The trading pair to swap. */
    bool has_trading_pair;
    penumbra_core_component_dex_v1_TradingPair trading_pair;
    /* The amount for asset 1. */
    bool has_delta_1_i;
    penumbra_core_num_v1_Amount delta_1_i;
    /* The amount for asset 2. */
    bool has_delta_2_i;
    penumbra_core_num_v1_Amount delta_2_i;
    /* The swap commitment. */
    bool has_swap_commitment;
    penumbra_crypto_tct_v1_StateCommitment swap_commitment;
} penumbra_core_component_dex_v1_EventSwap;

typedef struct _penumbra_core_component_dex_v1_EventSwapClaim {
    /* The trading pair that is subject of the swap claim. */
    bool has_trading_pair;
    penumbra_core_component_dex_v1_TradingPair trading_pair;
    /* Note commitment for the first asset. */
    bool has_output_1_commitment;
    penumbra_crypto_tct_v1_StateCommitment output_1_commitment;
    /* Note commitment for the second asset. */
    bool has_output_2_commitment;
    penumbra_crypto_tct_v1_StateCommitment output_2_commitment;
    /* The nullifier for the swap commitment. */
    bool has_nullifier;
    penumbra_core_component_sct_v1_Nullifier nullifier;
} penumbra_core_component_dex_v1_EventSwapClaim;

typedef struct _penumbra_core_component_dex_v1_EventPositionOpen {
    /* Position ID. */
    bool has_position_id;
    penumbra_core_component_dex_v1_PositionId position_id;
    /* The trading pair to open. */
    bool has_trading_pair;
    penumbra_core_component_dex_v1_TradingPair trading_pair;
    /* The amount for asset 1. */
    bool has_reserves_1;
    penumbra_core_num_v1_Amount reserves_1;
    /* The amount for asset 2. */
    bool has_reserves_2;
    penumbra_core_num_v1_Amount reserves_2;
    /* The trading fee for the position, expressed in basis points.
 e.g. 2% fee is expressed as 200, 100% fee is expressed as 10000; */
    uint32_t trading_fee;
    /* The full position.

 This is somewhat redundant, but contains any information not present above. */
    bool has_position;
    penumbra_core_component_dex_v1_Position position;
} penumbra_core_component_dex_v1_EventPositionOpen;

typedef struct _penumbra_core_component_dex_v1_EventPositionClose {
    /* The ID of the closed position */
    bool has_position_id;
    penumbra_core_component_dex_v1_PositionId position_id;
} penumbra_core_component_dex_v1_EventPositionClose;

typedef struct _penumbra_core_component_dex_v1_EventQueuePositionClose {
    /* The ID of the position queued that is closed for closure. */
    bool has_position_id;
    penumbra_core_component_dex_v1_PositionId position_id;
} penumbra_core_component_dex_v1_EventQueuePositionClose;

typedef struct _penumbra_core_component_dex_v1_EventPositionWithdraw {
    /* The ID of the withdrawn position. */
    bool has_position_id;
    penumbra_core_component_dex_v1_PositionId position_id;
    /* The trading pair of the withdrawn position. */
    bool has_trading_pair;
    penumbra_core_component_dex_v1_TradingPair trading_pair;
    /* The reserves of asset 1 of the withdrawn position. */
    bool has_reserves_1;
    penumbra_core_num_v1_Amount reserves_1;
    /* The reserves of asset 2 of the withdrawn position. */
    bool has_reserves_2;
    penumbra_core_num_v1_Amount reserves_2;
    /* The sequence number of the withdrawal. */
    uint64_t sequence;
} penumbra_core_component_dex_v1_EventPositionWithdraw;

typedef struct _penumbra_core_component_dex_v1_EventPositionExecution {
    /* The ID of the position executed against. */
    bool has_position_id;
    penumbra_core_component_dex_v1_PositionId position_id;
    /* The trading pair of the position executed against. */
    bool has_trading_pair;
    penumbra_core_component_dex_v1_TradingPair trading_pair;
    /* The reserves of asset 1 of the position after execution. */
    bool has_reserves_1;
    penumbra_core_num_v1_Amount reserves_1;
    /* The reserves of asset 2 of the position after execution. */
    bool has_reserves_2;
    penumbra_core_num_v1_Amount reserves_2;
    /* The reserves of asset 1 of the position before execution. */
    bool has_prev_reserves_1;
    penumbra_core_num_v1_Amount prev_reserves_1;
    /* The reserves of asset 2 of the position before execution. */
    bool has_prev_reserves_2;
    penumbra_core_num_v1_Amount prev_reserves_2;
    /* Context: the end-to-end route that was being traversed during execution. */
    bool has_context;
    penumbra_core_component_dex_v1_DirectedTradingPair context;
} penumbra_core_component_dex_v1_EventPositionExecution;

typedef struct _penumbra_core_component_dex_v1_EventBatchSwap {
    /* The BatchSwapOutputData containing the results of the batch swap. */
    bool has_batch_swap_output_data;
    penumbra_core_component_dex_v1_BatchSwapOutputData batch_swap_output_data;
    /* The record of execution for the batch swap in the 1 -> 2 direction. */
    bool has_swap_execution_1_for_2;
    penumbra_core_component_dex_v1_SwapExecution swap_execution_1_for_2;
    /* The record of execution for the batch swap in the 2 -> 1 direction. */
    bool has_swap_execution_2_for_1;
    penumbra_core_component_dex_v1_SwapExecution swap_execution_2_for_1;
} penumbra_core_component_dex_v1_EventBatchSwap;

typedef struct _penumbra_core_component_dex_v1_EventArbExecution {
    /* The height at which the arb execution occurred. */
    uint64_t height;
    /* The record of execution for the arb execution. */
    bool has_swap_execution;
    penumbra_core_component_dex_v1_SwapExecution swap_execution;
} penumbra_core_component_dex_v1_EventArbExecution;

/* Indicates that value was added to the DEX. */
typedef struct _penumbra_core_component_dex_v1_EventValueCircuitBreakerCredit {
    /* The asset ID being deposited into the DEX. */
    bool has_asset_id;
    penumbra_core_asset_v1_AssetId asset_id;
    /* The previous balance of the asset in the DEX. */
    bool has_previous_balance;
    penumbra_core_num_v1_Amount previous_balance;
    /* The new balance of the asset in the DEX. */
    bool has_new_balance;
    penumbra_core_num_v1_Amount new_balance;
} penumbra_core_component_dex_v1_EventValueCircuitBreakerCredit;

/* Indicates that value is leaving the DEX. */
typedef struct _penumbra_core_component_dex_v1_EventValueCircuitBreakerDebit {
    /* The asset ID being deposited into the DEX. */
    bool has_asset_id;
    penumbra_core_asset_v1_AssetId asset_id;
    /* The previous balance of the asset in the DEX. */
    bool has_previous_balance;
    penumbra_core_num_v1_Amount previous_balance;
    /* The new balance of the asset in the DEX. */
    bool has_new_balance;
    penumbra_core_num_v1_Amount new_balance;
} penumbra_core_component_dex_v1_EventValueCircuitBreakerDebit;

typedef struct _penumbra_core_component_dex_v1_DexParameters {
    /* Whether or not the DEX is enabled. */
    bool is_enabled;
    /* The list of fixed candidates for routing. */
    pb_callback_t fixed_candidates;
    /* The number of hops to traverse while routing from A to B. */
    uint32_t max_hops;
    /* The maximum number of positions per trading pair.
 If this number is exceeded, positions with the least
 inventory get evicted from the DEX. */
    uint32_t max_positions_per_pair;
    /* The maximum number of routing and execution steps to be performed
 for a single pair */
    uint32_t max_execution_budget;
} penumbra_core_component_dex_v1_DexParameters;

typedef struct _penumbra_core_component_dex_v1_GenesisContent {
    /* The initial parameters for the DEX. */
    bool has_dex_params;
    penumbra_core_component_dex_v1_DexParameters dex_params;
} penumbra_core_component_dex_v1_GenesisContent;

typedef struct _penumbra_core_component_dex_v1_CandlestickData {
    /* The height of the candlestick data. */
    uint64_t height;
    /* The first observed price during the block execution. */
    double open;
    /* The last observed price during the block execution. */
    double close;
    /* The highest observed price during the block execution. */
    double high;
    /* The lowest observed price during the block execution. */
    double low;
    /* The volume that traded "directly", during individual position executions. */
    double direct_volume;
    /* The volume that traded as part of swaps, which could have traversed multiple routes. */
    double swap_volume;
} penumbra_core_component_dex_v1_CandlestickData;

typedef struct _penumbra_core_component_dex_v1_CandlestickDataRequest {
    /* The directed trading pair to request candlestick data for.

 NOTE: the returned data will only have trades from the SOURCE asset to the
 DEST asset, not the other direction. Make another request if you want both
 sets of data. */
    bool has_pair;
    penumbra_core_component_dex_v1_DirectedTradingPair pair;
    /* The maximum number of candlestick data points to return.

 The server may clamp this limit to a maximum value. */
    uint64_t limit;
    /* The height to start the query from.

 If this is unset (= 0), the server will return the most recent data points. */
    uint64_t start_height;
} penumbra_core_component_dex_v1_CandlestickDataRequest;

typedef struct _penumbra_core_component_dex_v1_CandlestickDataResponse {
    /* The candlestick data points. */
    pb_callback_t data;
} penumbra_core_component_dex_v1_CandlestickDataResponse;

typedef struct _penumbra_core_component_dex_v1_CandlestickDataStreamRequest {
    /* The directed trading pair to subscribe to. */
    bool has_pair;
    penumbra_core_component_dex_v1_DirectedTradingPair pair;
} penumbra_core_component_dex_v1_CandlestickDataStreamRequest;

typedef struct _penumbra_core_component_dex_v1_CandlestickDataStreamResponse {
    /* The candlestick data point. */
    bool has_data;
    penumbra_core_component_dex_v1_CandlestickData data;
} penumbra_core_component_dex_v1_CandlestickDataStreamResponse;

#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _penumbra_core_component_dex_v1_PositionState_PositionStateEnum_MIN \
    penumbra_core_component_dex_v1_PositionState_PositionStateEnum_POSITION_STATE_ENUM_UNSPECIFIED
#define _penumbra_core_component_dex_v1_PositionState_PositionStateEnum_MAX \
    penumbra_core_component_dex_v1_PositionState_PositionStateEnum_POSITION_STATE_ENUM_CLAIMED
#define _penumbra_core_component_dex_v1_PositionState_PositionStateEnum_ARRAYSIZE                                                                                  \
    ((penumbra_core_component_dex_v1_PositionState_PositionStateEnum)(penumbra_core_component_dex_v1_PositionState_PositionStateEnum_POSITION_STATE_ENUM_CLAIMED + \
                                                                      1))

#define penumbra_core_component_dex_v1_PositionState_state_ENUMTYPE \
    penumbra_core_component_dex_v1_PositionState_PositionStateEnum

/* Initializer values for message structs */
#define penumbra_core_component_dex_v1_ZKSwapProof_init_default \
    {                                                           \
        { {NULL}, NULL }                                        \
    }
#define penumbra_core_component_dex_v1_ZKSwapClaimProof_init_default \
    {                                                                \
        { {NULL}, NULL }                                             \
    }
#define penumbra_core_component_dex_v1_Swap_init_default                       \
    {                                                                          \
        false, penumbra_core_component_dex_v1_ZKSwapProof_init_default, false, \
            penumbra_core_component_dex_v1_SwapBody_init_default               \
    }
#define penumbra_core_component_dex_v1_SwapClaim_init_default                       \
    {                                                                               \
        false, penumbra_core_component_dex_v1_ZKSwapClaimProof_init_default, false, \
            penumbra_core_component_dex_v1_SwapClaimBody_init_default, 0            \
    }
#define penumbra_core_component_dex_v1_SwapClaimBody_init_default                                                        \
    {                                                                                                                    \
        false, penumbra_core_component_sct_v1_Nullifier_init_default, false,                                             \
            penumbra_core_component_fee_v1_Fee_init_default, false, penumbra_crypto_tct_v1_StateCommitment_init_default, \
            false, penumbra_crypto_tct_v1_StateCommitment_init_default, false,                                           \
            penumbra_core_component_dex_v1_BatchSwapOutputData_init_default                                              \
    }
#define penumbra_core_component_dex_v1_SwapBody_init_default                                                               \
    {                                                                                                                      \
        false, penumbra_core_component_dex_v1_TradingPair_init_default, false, penumbra_core_num_v1_Amount_init_default,   \
            false, penumbra_core_num_v1_Amount_init_default, false, penumbra_core_asset_v1_BalanceCommitment_init_default, \
            false, penumbra_core_component_dex_v1_SwapPayload_init_default                                                 \
    }
#define penumbra_core_component_dex_v1_SwapPayload_init_default                      \
    {                                                                                \
        false, penumbra_crypto_tct_v1_StateCommitment_init_default, { {NULL}, NULL } \
    }
#define penumbra_core_component_dex_v1_SwapPlaintext_init_default                                                           \
    {                                                                                                                       \
        false, penumbra_core_component_dex_v1_TradingPair_init_default, false, penumbra_core_num_v1_Amount_init_default,    \
            false, penumbra_core_num_v1_Amount_init_default, false, penumbra_core_component_fee_v1_Fee_init_default, false, \
            penumbra_core_keys_v1_Address_init_default, {                                                                   \
            {NULL}, NULL                                                                                                    \
        }                                                                                                                   \
    }
#define penumbra_core_component_dex_v1_SwapPlan_init_default                                                               \
    {                                                                                                                      \
        false, penumbra_core_component_dex_v1_SwapPlaintext_init_default, {{NULL}, NULL}, {{NULL}, NULL}, { {NULL}, NULL } \
    }
#define penumbra_core_component_dex_v1_SwapClaimPlan_init_default                                 \
    {                                                                                             \
        false, penumbra_core_component_dex_v1_SwapPlaintext_init_default, 0, false,               \
            penumbra_core_component_dex_v1_BatchSwapOutputData_init_default, 0, {{NULL}, NULL}, { \
            {NULL}, NULL                                                                          \
        }                                                                                         \
    }
#define penumbra_core_component_dex_v1_SwapView_init_default                \
    {                                                                       \
        0, { penumbra_core_component_dex_v1_SwapView_Visible_init_default } \
    }
#define penumbra_core_component_dex_v1_SwapView_Visible_init_default                                          \
    {                                                                                                         \
        false, penumbra_core_component_dex_v1_Swap_init_default, false,                                       \
            penumbra_core_component_dex_v1_SwapPlaintext_init_default, false,                                 \
            penumbra_core_txhash_v1_TransactionId_init_default, false,                                        \
            penumbra_core_component_dex_v1_BatchSwapOutputData_init_default, false,                           \
            penumbra_core_component_shielded_pool_v1_NoteView_init_default, false,                            \
            penumbra_core_component_shielded_pool_v1_NoteView_init_default, false,                            \
            penumbra_core_asset_v1_Metadata_init_default, false, penumbra_core_asset_v1_Metadata_init_default \
    }
#define penumbra_core_component_dex_v1_SwapView_Opaque_init_default                                                     \
    {                                                                                                                   \
        false, penumbra_core_component_dex_v1_Swap_init_default, false,                                                 \
            penumbra_core_component_dex_v1_BatchSwapOutputData_init_default, false,                                     \
            penumbra_core_asset_v1_ValueView_init_default, false, penumbra_core_asset_v1_ValueView_init_default, false, \
            penumbra_core_asset_v1_Metadata_init_default, false, penumbra_core_asset_v1_Metadata_init_default           \
    }
#define penumbra_core_component_dex_v1_SwapClaimView_init_default                \
    {                                                                            \
        0, { penumbra_core_component_dex_v1_SwapClaimView_Visible_init_default } \
    }
#define penumbra_core_component_dex_v1_SwapClaimView_Visible_init_default          \
    {                                                                              \
        false, penumbra_core_component_dex_v1_SwapClaim_init_default, false,       \
            penumbra_core_component_shielded_pool_v1_NoteView_init_default, false, \
            penumbra_core_component_shielded_pool_v1_NoteView_init_default, false, \
            penumbra_core_txhash_v1_TransactionId_init_default                     \
    }
#define penumbra_core_component_dex_v1_SwapClaimView_Opaque_init_default \
    { false, penumbra_core_component_dex_v1_SwapClaim_init_default }
#define penumbra_core_component_dex_v1_TradingPair_init_default \
    { false, penumbra_core_asset_v1_AssetId_init_default, false, penumbra_core_asset_v1_AssetId_init_default }
#define penumbra_core_component_dex_v1_DirectedTradingPair_init_default \
    { false, penumbra_core_asset_v1_AssetId_init_default, false, penumbra_core_asset_v1_AssetId_init_default }
#define penumbra_core_component_dex_v1_BatchSwapOutputData_init_default                                          \
    {                                                                                                            \
        false, penumbra_core_num_v1_Amount_init_default, false, penumbra_core_num_v1_Amount_init_default, false, \
            penumbra_core_num_v1_Amount_init_default, false, penumbra_core_num_v1_Amount_init_default, false,    \
            penumbra_core_num_v1_Amount_init_default, false, penumbra_core_num_v1_Amount_init_default, 0, false, \
            penumbra_core_component_dex_v1_TradingPair_init_default, 0, 0                                        \
    }
#define penumbra_core_component_dex_v1_TradingFunction_init_default                    \
    {                                                                                  \
        false, penumbra_core_component_dex_v1_BareTradingFunction_init_default, false, \
            penumbra_core_component_dex_v1_TradingPair_init_default                    \
    }
#define penumbra_core_component_dex_v1_BareTradingFunction_init_default \
    { 0, false, penumbra_core_num_v1_Amount_init_default, false, penumbra_core_num_v1_Amount_init_default }
#define penumbra_core_component_dex_v1_Reserves_init_default \
    { false, penumbra_core_num_v1_Amount_init_default, false, penumbra_core_num_v1_Amount_init_default }
#define penumbra_core_component_dex_v1_Position_init_default                                       \
    {                                                                                              \
        false, penumbra_core_component_dex_v1_TradingFunction_init_default, {{NULL}, NULL}, false, \
            penumbra_core_component_dex_v1_PositionState_init_default, false,                      \
            penumbra_core_component_dex_v1_Reserves_init_default, 0                                \
    }
#define penumbra_core_component_dex_v1_PositionId_init_default \
    {                                                          \
        {{NULL}, NULL}, { {NULL}, NULL }                       \
    }
#define penumbra_core_component_dex_v1_PositionState_init_default \
    { _penumbra_core_component_dex_v1_PositionState_PositionStateEnum_MIN, 0 }
#define penumbra_core_component_dex_v1_LpNft_init_default                     \
    {                                                                         \
        false, penumbra_core_component_dex_v1_PositionId_init_default, false, \
            penumbra_core_component_dex_v1_PositionState_init_default         \
    }
#define penumbra_core_component_dex_v1_PositionOpen_init_default \
    { false, penumbra_core_component_dex_v1_Position_init_default }
#define penumbra_core_component_dex_v1_PositionClose_init_default \
    { false, penumbra_core_component_dex_v1_PositionId_init_default }
#define penumbra_core_component_dex_v1_PositionWithdraw_init_default          \
    {                                                                         \
        false, penumbra_core_component_dex_v1_PositionId_init_default, false, \
            penumbra_core_asset_v1_BalanceCommitment_init_default, 0          \
    }
#define penumbra_core_component_dex_v1_PositionRewardClaim_init_default       \
    {                                                                         \
        false, penumbra_core_component_dex_v1_PositionId_init_default, false, \
            penumbra_core_asset_v1_BalanceCommitment_init_default             \
    }
#define penumbra_core_component_dex_v1_SwapExecution_init_default \
    { {{NULL}, NULL}, false, penumbra_core_asset_v1_Value_init_default, false, penumbra_core_asset_v1_Value_init_default }
#define penumbra_core_component_dex_v1_SwapExecution_Trace_init_default \
    {                                                                   \
        { {NULL}, NULL }                                                \
    }
#define penumbra_core_component_dex_v1_PositionWithdrawPlan_init_default    \
    {                                                                       \
        false, penumbra_core_component_dex_v1_Reserves_init_default, false, \
            penumbra_core_component_dex_v1_PositionId_init_default, false,  \
            penumbra_core_component_dex_v1_TradingPair_init_default, 0, {   \
            {NULL}, NULL                                                    \
        }                                                                   \
    }
#define penumbra_core_component_dex_v1_PositionRewardClaimPlan_init_default \
    { false, penumbra_core_component_dex_v1_Reserves_init_default }
#define penumbra_core_component_dex_v1_BatchSwapOutputDataRequest_init_default \
    { 0, false, penumbra_core_component_dex_v1_TradingPair_init_default }
#define penumbra_core_component_dex_v1_BatchSwapOutputDataResponse_init_default \
    { false, penumbra_core_component_dex_v1_BatchSwapOutputData_init_default }
#define penumbra_core_component_dex_v1_SwapExecutionRequest_init_default \
    { 0, false, penumbra_core_component_dex_v1_DirectedTradingPair_init_default }
#define penumbra_core_component_dex_v1_SwapExecutionResponse_init_default \
    { false, penumbra_core_component_dex_v1_SwapExecution_init_default }
#define penumbra_core_component_dex_v1_ArbExecutionRequest_init_default \
    { 0 }
#define penumbra_core_component_dex_v1_ArbExecutionResponse_init_default \
    { false, penumbra_core_component_dex_v1_SwapExecution_init_default, 0 }
#define penumbra_core_component_dex_v1_SwapExecutionsRequest_init_default \
    { 0, 0, false, penumbra_core_component_dex_v1_DirectedTradingPair_init_default }
#define penumbra_core_component_dex_v1_SwapExecutionsResponse_init_default          \
    {                                                                               \
        false, penumbra_core_component_dex_v1_SwapExecution_init_default, 0, false, \
            penumbra_core_component_dex_v1_DirectedTradingPair_init_default         \
    }
#define penumbra_core_component_dex_v1_ArbExecutionsRequest_init_default \
    { 0, 0 }
#define penumbra_core_component_dex_v1_ArbExecutionsResponse_init_default \
    { false, penumbra_core_component_dex_v1_SwapExecution_init_default, 0 }
#define penumbra_core_component_dex_v1_LiquidityPositionsRequest_init_default \
    { 0 }
#define penumbra_core_component_dex_v1_LiquidityPositionsResponse_init_default \
    { false, penumbra_core_component_dex_v1_Position_init_default }
#define penumbra_core_component_dex_v1_LiquidityPositionByIdRequest_init_default \
    { false, penumbra_core_component_dex_v1_PositionId_init_default }
#define penumbra_core_component_dex_v1_LiquidityPositionByIdResponse_init_default \
    { false, penumbra_core_component_dex_v1_Position_init_default }
#define penumbra_core_component_dex_v1_LiquidityPositionsByIdRequest_init_default \
    {                                                                             \
        { {NULL}, NULL }                                                          \
    }
#define penumbra_core_component_dex_v1_LiquidityPositionsByIdResponse_init_default \
    { false, penumbra_core_component_dex_v1_Position_init_default }
#define penumbra_core_component_dex_v1_LiquidityPositionsByPriceRequest_init_default \
    { false, penumbra_core_component_dex_v1_DirectedTradingPair_init_default, 0 }
#define penumbra_core_component_dex_v1_LiquidityPositionsByPriceResponse_init_default \
    {                                                                                 \
        false, penumbra_core_component_dex_v1_Position_init_default, false,           \
            penumbra_core_component_dex_v1_PositionId_init_default                    \
    }
#define penumbra_core_component_dex_v1_SpreadRequest_init_default \
    { false, penumbra_core_component_dex_v1_TradingPair_init_default }
#define penumbra_core_component_dex_v1_SpreadResponse_init_default          \
    {                                                                       \
        false, penumbra_core_component_dex_v1_Position_init_default, false, \
            penumbra_core_component_dex_v1_Position_init_default, 0, 0      \
    }
#define penumbra_core_component_dex_v1_SimulateTradeRequest_init_default                                             \
    {                                                                                                                \
        false, penumbra_core_asset_v1_Value_init_default, false, penumbra_core_asset_v1_AssetId_init_default, false, \
            penumbra_core_component_dex_v1_SimulateTradeRequest_Routing_init_default                                 \
    }
#define penumbra_core_component_dex_v1_SimulateTradeRequest_Routing_init_default                \
    {                                                                                           \
        0, { penumbra_core_component_dex_v1_SimulateTradeRequest_Routing_Default_init_default } \
    }
#define penumbra_core_component_dex_v1_SimulateTradeRequest_Routing_SingleHop_init_default \
    { 0 }
#define penumbra_core_component_dex_v1_SimulateTradeRequest_Routing_Default_init_default \
    { 0 }
#define penumbra_core_component_dex_v1_SimulateTradeResponse_init_default \
    { false, penumbra_core_component_dex_v1_SwapExecution_init_default, false, penumbra_core_asset_v1_Value_init_default }
#define penumbra_core_component_dex_v1_EventSwap_init_default                                                            \
    {                                                                                                                    \
        false, penumbra_core_component_dex_v1_TradingPair_init_default, false, penumbra_core_num_v1_Amount_init_default, \
            false, penumbra_core_num_v1_Amount_init_default, false, penumbra_crypto_tct_v1_StateCommitment_init_default  \
    }
#define penumbra_core_component_dex_v1_EventSwapClaim_init_default             \
    {                                                                          \
        false, penumbra_core_component_dex_v1_TradingPair_init_default, false, \
            penumbra_crypto_tct_v1_StateCommitment_init_default, false,        \
            penumbra_crypto_tct_v1_StateCommitment_init_default, false,        \
            penumbra_core_component_sct_v1_Nullifier_init_default              \
    }
#define penumbra_core_component_dex_v1_EventPositionOpen_init_default                                                       \
    {                                                                                                                       \
        false, penumbra_core_component_dex_v1_PositionId_init_default, false,                                               \
            penumbra_core_component_dex_v1_TradingPair_init_default, false, penumbra_core_num_v1_Amount_init_default,       \
            false, penumbra_core_num_v1_Amount_init_default, 0, false, penumbra_core_component_dex_v1_Position_init_default \
    }
#define penumbra_core_component_dex_v1_EventPositionClose_init_default \
    { false, penumbra_core_component_dex_v1_PositionId_init_default }
#define penumbra_core_component_dex_v1_EventQueuePositionClose_init_default \
    { false, penumbra_core_component_dex_v1_PositionId_init_default }
#define penumbra_core_component_dex_v1_EventPositionWithdraw_init_default                                             \
    {                                                                                                                 \
        false, penumbra_core_component_dex_v1_PositionId_init_default, false,                                         \
            penumbra_core_component_dex_v1_TradingPair_init_default, false, penumbra_core_num_v1_Amount_init_default, \
            false, penumbra_core_num_v1_Amount_init_default, 0                                                        \
    }
#define penumbra_core_component_dex_v1_EventPositionExecution_init_default                                            \
    {                                                                                                                 \
        false, penumbra_core_component_dex_v1_PositionId_init_default, false,                                         \
            penumbra_core_component_dex_v1_TradingPair_init_default, false, penumbra_core_num_v1_Amount_init_default, \
            false, penumbra_core_num_v1_Amount_init_default, false, penumbra_core_num_v1_Amount_init_default, false,  \
            penumbra_core_num_v1_Amount_init_default, false,                                                          \
            penumbra_core_component_dex_v1_DirectedTradingPair_init_default                                           \
    }
#define penumbra_core_component_dex_v1_EventBatchSwap_init_default                     \
    {                                                                                  \
        false, penumbra_core_component_dex_v1_BatchSwapOutputData_init_default, false, \
            penumbra_core_component_dex_v1_SwapExecution_init_default, false,          \
            penumbra_core_component_dex_v1_SwapExecution_init_default                  \
    }
#define penumbra_core_component_dex_v1_EventArbExecution_init_default \
    { 0, false, penumbra_core_component_dex_v1_SwapExecution_init_default }
#define penumbra_core_component_dex_v1_EventValueCircuitBreakerCredit_init_default                                  \
    {                                                                                                               \
        false, penumbra_core_asset_v1_AssetId_init_default, false, penumbra_core_num_v1_Amount_init_default, false, \
            penumbra_core_num_v1_Amount_init_default                                                                \
    }
#define penumbra_core_component_dex_v1_EventValueCircuitBreakerDebit_init_default                                   \
    {                                                                                                               \
        false, penumbra_core_asset_v1_AssetId_init_default, false, penumbra_core_num_v1_Amount_init_default, false, \
            penumbra_core_num_v1_Amount_init_default                                                                \
    }
#define penumbra_core_component_dex_v1_DexParameters_init_default \
    { 0, {{NULL}, NULL}, 0, 0, 0 }
#define penumbra_core_component_dex_v1_GenesisContent_init_default \
    { false, penumbra_core_component_dex_v1_DexParameters_init_default }
#define penumbra_core_component_dex_v1_CandlestickData_init_default \
    { 0, 0, 0, 0, 0, 0, 0 }
#define penumbra_core_component_dex_v1_CandlestickDataRequest_init_default \
    { false, penumbra_core_component_dex_v1_DirectedTradingPair_init_default, 0, 0 }
#define penumbra_core_component_dex_v1_CandlestickDataResponse_init_default \
    {                                                                       \
        { {NULL}, NULL }                                                    \
    }
#define penumbra_core_component_dex_v1_CandlestickDataStreamRequest_init_default \
    { false, penumbra_core_component_dex_v1_DirectedTradingPair_init_default }
#define penumbra_core_component_dex_v1_CandlestickDataStreamResponse_init_default \
    { false, penumbra_core_component_dex_v1_CandlestickData_init_default }
#define penumbra_core_component_dex_v1_ZKSwapProof_init_zero \
    {                                                        \
        { {NULL}, NULL }                                     \
    }
#define penumbra_core_component_dex_v1_ZKSwapClaimProof_init_zero \
    {                                                             \
        { {NULL}, NULL }                                          \
    }
#define penumbra_core_component_dex_v1_Swap_init_zero \
    { false, penumbra_core_component_dex_v1_ZKSwapProof_init_zero, false, penumbra_core_component_dex_v1_SwapBody_init_zero }
#define penumbra_core_component_dex_v1_SwapClaim_init_zero                       \
    {                                                                            \
        false, penumbra_core_component_dex_v1_ZKSwapClaimProof_init_zero, false, \
            penumbra_core_component_dex_v1_SwapClaimBody_init_zero, 0            \
    }
#define penumbra_core_component_dex_v1_SwapClaimBody_init_zero                                                          \
    {                                                                                                                   \
        false, penumbra_core_component_sct_v1_Nullifier_init_zero, false, penumbra_core_component_fee_v1_Fee_init_zero, \
            false, penumbra_crypto_tct_v1_StateCommitment_init_zero, false,                                             \
            penumbra_crypto_tct_v1_StateCommitment_init_zero, false,                                                    \
            penumbra_core_component_dex_v1_BatchSwapOutputData_init_zero                                                \
    }
#define penumbra_core_component_dex_v1_SwapBody_init_zero                                                                 \
    {                                                                                                                     \
        false, penumbra_core_component_dex_v1_TradingPair_init_zero, false, penumbra_core_num_v1_Amount_init_zero, false, \
            penumbra_core_num_v1_Amount_init_zero, false, penumbra_core_asset_v1_BalanceCommitment_init_zero, false,      \
            penumbra_core_component_dex_v1_SwapPayload_init_zero                                                          \
    }
#define penumbra_core_component_dex_v1_SwapPayload_init_zero                      \
    {                                                                             \
        false, penumbra_crypto_tct_v1_StateCommitment_init_zero, { {NULL}, NULL } \
    }
#define penumbra_core_component_dex_v1_SwapPlaintext_init_zero                                                            \
    {                                                                                                                     \
        false, penumbra_core_component_dex_v1_TradingPair_init_zero, false, penumbra_core_num_v1_Amount_init_zero, false, \
            penumbra_core_num_v1_Amount_init_zero, false, penumbra_core_component_fee_v1_Fee_init_zero, false,            \
            penumbra_core_keys_v1_Address_init_zero, {                                                                    \
            {NULL}, NULL                                                                                                  \
        }                                                                                                                 \
    }
#define penumbra_core_component_dex_v1_SwapPlan_init_zero                                                               \
    {                                                                                                                   \
        false, penumbra_core_component_dex_v1_SwapPlaintext_init_zero, {{NULL}, NULL}, {{NULL}, NULL}, { {NULL}, NULL } \
    }
#define penumbra_core_component_dex_v1_SwapClaimPlan_init_zero                                 \
    {                                                                                          \
        false, penumbra_core_component_dex_v1_SwapPlaintext_init_zero, 0, false,               \
            penumbra_core_component_dex_v1_BatchSwapOutputData_init_zero, 0, {{NULL}, NULL}, { \
            {NULL}, NULL                                                                       \
        }                                                                                      \
    }
#define penumbra_core_component_dex_v1_SwapView_init_zero                \
    {                                                                    \
        0, { penumbra_core_component_dex_v1_SwapView_Visible_init_zero } \
    }
#define penumbra_core_component_dex_v1_SwapView_Visible_init_zero                                                           \
    {                                                                                                                       \
        false, penumbra_core_component_dex_v1_Swap_init_zero, false,                                                        \
            penumbra_core_component_dex_v1_SwapPlaintext_init_zero, false, penumbra_core_txhash_v1_TransactionId_init_zero, \
            false, penumbra_core_component_dex_v1_BatchSwapOutputData_init_zero, false,                                     \
            penumbra_core_component_shielded_pool_v1_NoteView_init_zero, false,                                             \
            penumbra_core_component_shielded_pool_v1_NoteView_init_zero, false, penumbra_core_asset_v1_Metadata_init_zero,  \
            false, penumbra_core_asset_v1_Metadata_init_zero                                                                \
    }
#define penumbra_core_component_dex_v1_SwapView_Opaque_init_zero                                                  \
    {                                                                                                             \
        false, penumbra_core_component_dex_v1_Swap_init_zero, false,                                              \
            penumbra_core_component_dex_v1_BatchSwapOutputData_init_zero, false,                                  \
            penumbra_core_asset_v1_ValueView_init_zero, false, penumbra_core_asset_v1_ValueView_init_zero, false, \
            penumbra_core_asset_v1_Metadata_init_zero, false, penumbra_core_asset_v1_Metadata_init_zero           \
    }
#define penumbra_core_component_dex_v1_SwapClaimView_init_zero                \
    {                                                                         \
        0, { penumbra_core_component_dex_v1_SwapClaimView_Visible_init_zero } \
    }
#define penumbra_core_component_dex_v1_SwapClaimView_Visible_init_zero          \
    {                                                                           \
        false, penumbra_core_component_dex_v1_SwapClaim_init_zero, false,       \
            penumbra_core_component_shielded_pool_v1_NoteView_init_zero, false, \
            penumbra_core_component_shielded_pool_v1_NoteView_init_zero, false, \
            penumbra_core_txhash_v1_TransactionId_init_zero                     \
    }
#define penumbra_core_component_dex_v1_SwapClaimView_Opaque_init_zero \
    { false, penumbra_core_component_dex_v1_SwapClaim_init_zero }
#define penumbra_core_component_dex_v1_TradingPair_init_zero \
    { false, penumbra_core_asset_v1_AssetId_init_zero, false, penumbra_core_asset_v1_AssetId_init_zero }
#define penumbra_core_component_dex_v1_DirectedTradingPair_init_zero \
    { false, penumbra_core_asset_v1_AssetId_init_zero, false, penumbra_core_asset_v1_AssetId_init_zero }
#define penumbra_core_component_dex_v1_BatchSwapOutputData_init_zero                                       \
    {                                                                                                      \
        false, penumbra_core_num_v1_Amount_init_zero, false, penumbra_core_num_v1_Amount_init_zero, false, \
            penumbra_core_num_v1_Amount_init_zero, false, penumbra_core_num_v1_Amount_init_zero, false,    \
            penumbra_core_num_v1_Amount_init_zero, false, penumbra_core_num_v1_Amount_init_zero, 0, false, \
            penumbra_core_component_dex_v1_TradingPair_init_zero, 0, 0                                     \
    }
#define penumbra_core_component_dex_v1_TradingFunction_init_zero                    \
    {                                                                               \
        false, penumbra_core_component_dex_v1_BareTradingFunction_init_zero, false, \
            penumbra_core_component_dex_v1_TradingPair_init_zero                    \
    }
#define penumbra_core_component_dex_v1_BareTradingFunction_init_zero \
    { 0, false, penumbra_core_num_v1_Amount_init_zero, false, penumbra_core_num_v1_Amount_init_zero }
#define penumbra_core_component_dex_v1_Reserves_init_zero \
    { false, penumbra_core_num_v1_Amount_init_zero, false, penumbra_core_num_v1_Amount_init_zero }
#define penumbra_core_component_dex_v1_Position_init_zero                                       \
    {                                                                                           \
        false, penumbra_core_component_dex_v1_TradingFunction_init_zero, {{NULL}, NULL}, false, \
            penumbra_core_component_dex_v1_PositionState_init_zero, false,                      \
            penumbra_core_component_dex_v1_Reserves_init_zero, 0                                \
    }
#define penumbra_core_component_dex_v1_PositionId_init_zero \
    {                                                       \
        {{NULL}, NULL}, { {NULL}, NULL }                    \
    }
#define penumbra_core_component_dex_v1_PositionState_init_zero \
    { _penumbra_core_component_dex_v1_PositionState_PositionStateEnum_MIN, 0 }
#define penumbra_core_component_dex_v1_LpNft_init_zero                     \
    {                                                                      \
        false, penumbra_core_component_dex_v1_PositionId_init_zero, false, \
            penumbra_core_component_dex_v1_PositionState_init_zero         \
    }
#define penumbra_core_component_dex_v1_PositionOpen_init_zero \
    { false, penumbra_core_component_dex_v1_Position_init_zero }
#define penumbra_core_component_dex_v1_PositionClose_init_zero \
    { false, penumbra_core_component_dex_v1_PositionId_init_zero }
#define penumbra_core_component_dex_v1_PositionWithdraw_init_zero          \
    {                                                                      \
        false, penumbra_core_component_dex_v1_PositionId_init_zero, false, \
            penumbra_core_asset_v1_BalanceCommitment_init_zero, 0          \
    }
#define penumbra_core_component_dex_v1_PositionRewardClaim_init_zero \
    { false, penumbra_core_component_dex_v1_PositionId_init_zero, false, penumbra_core_asset_v1_BalanceCommitment_init_zero }
#define penumbra_core_component_dex_v1_SwapExecution_init_zero \
    { {{NULL}, NULL}, false, penumbra_core_asset_v1_Value_init_zero, false, penumbra_core_asset_v1_Value_init_zero }
#define penumbra_core_component_dex_v1_SwapExecution_Trace_init_zero \
    {                                                                \
        { {NULL}, NULL }                                             \
    }
#define penumbra_core_component_dex_v1_PositionWithdrawPlan_init_zero    \
    {                                                                    \
        false, penumbra_core_component_dex_v1_Reserves_init_zero, false, \
            penumbra_core_component_dex_v1_PositionId_init_zero, false,  \
            penumbra_core_component_dex_v1_TradingPair_init_zero, 0, {   \
            {NULL}, NULL                                                 \
        }                                                                \
    }
#define penumbra_core_component_dex_v1_PositionRewardClaimPlan_init_zero \
    { false, penumbra_core_component_dex_v1_Reserves_init_zero }
#define penumbra_core_component_dex_v1_BatchSwapOutputDataRequest_init_zero \
    { 0, false, penumbra_core_component_dex_v1_TradingPair_init_zero }
#define penumbra_core_component_dex_v1_BatchSwapOutputDataResponse_init_zero \
    { false, penumbra_core_component_dex_v1_BatchSwapOutputData_init_zero }
#define penumbra_core_component_dex_v1_SwapExecutionRequest_init_zero \
    { 0, false, penumbra_core_component_dex_v1_DirectedTradingPair_init_zero }
#define penumbra_core_component_dex_v1_SwapExecutionResponse_init_zero \
    { false, penumbra_core_component_dex_v1_SwapExecution_init_zero }
#define penumbra_core_component_dex_v1_ArbExecutionRequest_init_zero \
    { 0 }
#define penumbra_core_component_dex_v1_ArbExecutionResponse_init_zero \
    { false, penumbra_core_component_dex_v1_SwapExecution_init_zero, 0 }
#define penumbra_core_component_dex_v1_SwapExecutionsRequest_init_zero \
    { 0, 0, false, penumbra_core_component_dex_v1_DirectedTradingPair_init_zero }
#define penumbra_core_component_dex_v1_SwapExecutionsResponse_init_zero          \
    {                                                                            \
        false, penumbra_core_component_dex_v1_SwapExecution_init_zero, 0, false, \
            penumbra_core_component_dex_v1_DirectedTradingPair_init_zero         \
    }
#define penumbra_core_component_dex_v1_ArbExecutionsRequest_init_zero \
    { 0, 0 }
#define penumbra_core_component_dex_v1_ArbExecutionsResponse_init_zero \
    { false, penumbra_core_component_dex_v1_SwapExecution_init_zero, 0 }
#define penumbra_core_component_dex_v1_LiquidityPositionsRequest_init_zero \
    { 0 }
#define penumbra_core_component_dex_v1_LiquidityPositionsResponse_init_zero \
    { false, penumbra_core_component_dex_v1_Position_init_zero }
#define penumbra_core_component_dex_v1_LiquidityPositionByIdRequest_init_zero \
    { false, penumbra_core_component_dex_v1_PositionId_init_zero }
#define penumbra_core_component_dex_v1_LiquidityPositionByIdResponse_init_zero \
    { false, penumbra_core_component_dex_v1_Position_init_zero }
#define penumbra_core_component_dex_v1_LiquidityPositionsByIdRequest_init_zero \
    {                                                                          \
        { {NULL}, NULL }                                                       \
    }
#define penumbra_core_component_dex_v1_LiquidityPositionsByIdResponse_init_zero \
    { false, penumbra_core_component_dex_v1_Position_init_zero }
#define penumbra_core_component_dex_v1_LiquidityPositionsByPriceRequest_init_zero \
    { false, penumbra_core_component_dex_v1_DirectedTradingPair_init_zero, 0 }
#define penumbra_core_component_dex_v1_LiquidityPositionsByPriceResponse_init_zero \
    { false, penumbra_core_component_dex_v1_Position_init_zero, false, penumbra_core_component_dex_v1_PositionId_init_zero }
#define penumbra_core_component_dex_v1_SpreadRequest_init_zero \
    { false, penumbra_core_component_dex_v1_TradingPair_init_zero }
#define penumbra_core_component_dex_v1_SpreadResponse_init_zero                                                             \
    {                                                                                                                       \
        false, penumbra_core_component_dex_v1_Position_init_zero, false, penumbra_core_component_dex_v1_Position_init_zero, \
            0, 0                                                                                                            \
    }
#define penumbra_core_component_dex_v1_SimulateTradeRequest_init_zero                                          \
    {                                                                                                          \
        false, penumbra_core_asset_v1_Value_init_zero, false, penumbra_core_asset_v1_AssetId_init_zero, false, \
            penumbra_core_component_dex_v1_SimulateTradeRequest_Routing_init_zero                              \
    }
#define penumbra_core_component_dex_v1_SimulateTradeRequest_Routing_init_zero                \
    {                                                                                        \
        0, { penumbra_core_component_dex_v1_SimulateTradeRequest_Routing_Default_init_zero } \
    }
#define penumbra_core_component_dex_v1_SimulateTradeRequest_Routing_SingleHop_init_zero \
    { 0 }
#define penumbra_core_component_dex_v1_SimulateTradeRequest_Routing_Default_init_zero \
    { 0 }
#define penumbra_core_component_dex_v1_SimulateTradeResponse_init_zero \
    { false, penumbra_core_component_dex_v1_SwapExecution_init_zero, false, penumbra_core_asset_v1_Value_init_zero }
#define penumbra_core_component_dex_v1_EventSwap_init_zero                                                                \
    {                                                                                                                     \
        false, penumbra_core_component_dex_v1_TradingPair_init_zero, false, penumbra_core_num_v1_Amount_init_zero, false, \
            penumbra_core_num_v1_Amount_init_zero, false, penumbra_crypto_tct_v1_StateCommitment_init_zero                \
    }
#define penumbra_core_component_dex_v1_EventSwapClaim_init_zero                                                        \
    {                                                                                                                  \
        false, penumbra_core_component_dex_v1_TradingPair_init_zero, false,                                            \
            penumbra_crypto_tct_v1_StateCommitment_init_zero, false, penumbra_crypto_tct_v1_StateCommitment_init_zero, \
            false, penumbra_core_component_sct_v1_Nullifier_init_zero                                                  \
    }
#define penumbra_core_component_dex_v1_EventPositionOpen_init_zero                                                     \
    {                                                                                                                  \
        false, penumbra_core_component_dex_v1_PositionId_init_zero, false,                                             \
            penumbra_core_component_dex_v1_TradingPair_init_zero, false, penumbra_core_num_v1_Amount_init_zero, false, \
            penumbra_core_num_v1_Amount_init_zero, 0, false, penumbra_core_component_dex_v1_Position_init_zero         \
    }
#define penumbra_core_component_dex_v1_EventPositionClose_init_zero \
    { false, penumbra_core_component_dex_v1_PositionId_init_zero }
#define penumbra_core_component_dex_v1_EventQueuePositionClose_init_zero \
    { false, penumbra_core_component_dex_v1_PositionId_init_zero }
#define penumbra_core_component_dex_v1_EventPositionWithdraw_init_zero                                                 \
    {                                                                                                                  \
        false, penumbra_core_component_dex_v1_PositionId_init_zero, false,                                             \
            penumbra_core_component_dex_v1_TradingPair_init_zero, false, penumbra_core_num_v1_Amount_init_zero, false, \
            penumbra_core_num_v1_Amount_init_zero, 0                                                                   \
    }
#define penumbra_core_component_dex_v1_EventPositionExecution_init_zero                                                \
    {                                                                                                                  \
        false, penumbra_core_component_dex_v1_PositionId_init_zero, false,                                             \
            penumbra_core_component_dex_v1_TradingPair_init_zero, false, penumbra_core_num_v1_Amount_init_zero, false, \
            penumbra_core_num_v1_Amount_init_zero, false, penumbra_core_num_v1_Amount_init_zero, false,                \
            penumbra_core_num_v1_Amount_init_zero, false, penumbra_core_component_dex_v1_DirectedTradingPair_init_zero \
    }
#define penumbra_core_component_dex_v1_EventBatchSwap_init_zero                     \
    {                                                                               \
        false, penumbra_core_component_dex_v1_BatchSwapOutputData_init_zero, false, \
            penumbra_core_component_dex_v1_SwapExecution_init_zero, false,          \
            penumbra_core_component_dex_v1_SwapExecution_init_zero                  \
    }
#define penumbra_core_component_dex_v1_EventArbExecution_init_zero \
    { 0, false, penumbra_core_component_dex_v1_SwapExecution_init_zero }
#define penumbra_core_component_dex_v1_EventValueCircuitBreakerCredit_init_zero                               \
    {                                                                                                         \
        false, penumbra_core_asset_v1_AssetId_init_zero, false, penumbra_core_num_v1_Amount_init_zero, false, \
            penumbra_core_num_v1_Amount_init_zero                                                             \
    }
#define penumbra_core_component_dex_v1_EventValueCircuitBreakerDebit_init_zero                                \
    {                                                                                                         \
        false, penumbra_core_asset_v1_AssetId_init_zero, false, penumbra_core_num_v1_Amount_init_zero, false, \
            penumbra_core_num_v1_Amount_init_zero                                                             \
    }
#define penumbra_core_component_dex_v1_DexParameters_init_zero \
    { 0, {{NULL}, NULL}, 0, 0, 0 }
#define penumbra_core_component_dex_v1_GenesisContent_init_zero \
    { false, penumbra_core_component_dex_v1_DexParameters_init_zero }
#define penumbra_core_component_dex_v1_CandlestickData_init_zero \
    { 0, 0, 0, 0, 0, 0, 0 }
#define penumbra_core_component_dex_v1_CandlestickDataRequest_init_zero \
    { false, penumbra_core_component_dex_v1_DirectedTradingPair_init_zero, 0, 0 }
#define penumbra_core_component_dex_v1_CandlestickDataResponse_init_zero \
    {                                                                    \
        { {NULL}, NULL }                                                 \
    }
#define penumbra_core_component_dex_v1_CandlestickDataStreamRequest_init_zero \
    { false, penumbra_core_component_dex_v1_DirectedTradingPair_init_zero }
#define penumbra_core_component_dex_v1_CandlestickDataStreamResponse_init_zero \
    { false, penumbra_core_component_dex_v1_CandlestickData_init_zero }

/* Field tags (for use in manual encoding/decoding) */
#define penumbra_core_component_dex_v1_ZKSwapProof_inner_tag 1
#define penumbra_core_component_dex_v1_ZKSwapClaimProof_inner_tag 1
#define penumbra_core_component_dex_v1_SwapPayload_commitment_tag 1
#define penumbra_core_component_dex_v1_SwapPayload_encrypted_swap_tag 2
#define penumbra_core_component_dex_v1_TradingPair_asset_1_tag 1
#define penumbra_core_component_dex_v1_TradingPair_asset_2_tag 2
#define penumbra_core_component_dex_v1_SwapBody_trading_pair_tag 1
#define penumbra_core_component_dex_v1_SwapBody_delta_1_i_tag 2
#define penumbra_core_component_dex_v1_SwapBody_delta_2_i_tag 3
#define penumbra_core_component_dex_v1_SwapBody_fee_commitment_tag 4
#define penumbra_core_component_dex_v1_SwapBody_payload_tag 5
#define penumbra_core_component_dex_v1_Swap_proof_tag 1
#define penumbra_core_component_dex_v1_Swap_body_tag 4
#define penumbra_core_component_dex_v1_SwapPlaintext_trading_pair_tag 1
#define penumbra_core_component_dex_v1_SwapPlaintext_delta_1_i_tag 2
#define penumbra_core_component_dex_v1_SwapPlaintext_delta_2_i_tag 3
#define penumbra_core_component_dex_v1_SwapPlaintext_claim_fee_tag 4
#define penumbra_core_component_dex_v1_SwapPlaintext_claim_address_tag 5
#define penumbra_core_component_dex_v1_SwapPlaintext_rseed_tag 6
#define penumbra_core_component_dex_v1_SwapPlan_swap_plaintext_tag 1
#define penumbra_core_component_dex_v1_SwapPlan_fee_blinding_tag 2
#define penumbra_core_component_dex_v1_SwapPlan_proof_blinding_r_tag 3
#define penumbra_core_component_dex_v1_SwapPlan_proof_blinding_s_tag 4
#define penumbra_core_component_dex_v1_DirectedTradingPair_start_tag 1
#define penumbra_core_component_dex_v1_DirectedTradingPair_end_tag 2
#define penumbra_core_component_dex_v1_BatchSwapOutputData_delta_1_tag 1
#define penumbra_core_component_dex_v1_BatchSwapOutputData_delta_2_tag 2
#define penumbra_core_component_dex_v1_BatchSwapOutputData_lambda_1_tag 3
#define penumbra_core_component_dex_v1_BatchSwapOutputData_lambda_2_tag 4
#define penumbra_core_component_dex_v1_BatchSwapOutputData_unfilled_1_tag 5
#define penumbra_core_component_dex_v1_BatchSwapOutputData_unfilled_2_tag 6
#define penumbra_core_component_dex_v1_BatchSwapOutputData_height_tag 7
#define penumbra_core_component_dex_v1_BatchSwapOutputData_trading_pair_tag 8
#define penumbra_core_component_dex_v1_BatchSwapOutputData_epoch_starting_height_tag 9
#define penumbra_core_component_dex_v1_BatchSwapOutputData_sct_position_prefix_tag 10
#define penumbra_core_component_dex_v1_SwapClaimBody_nullifier_tag 1
#define penumbra_core_component_dex_v1_SwapClaimBody_fee_tag 2
#define penumbra_core_component_dex_v1_SwapClaimBody_output_1_commitment_tag 3
#define penumbra_core_component_dex_v1_SwapClaimBody_output_2_commitment_tag 4
#define penumbra_core_component_dex_v1_SwapClaimBody_output_data_tag 6
#define penumbra_core_component_dex_v1_SwapClaim_proof_tag 1
#define penumbra_core_component_dex_v1_SwapClaim_body_tag 2
#define penumbra_core_component_dex_v1_SwapClaim_epoch_duration_tag 7
#define penumbra_core_component_dex_v1_SwapClaimPlan_swap_plaintext_tag 1
#define penumbra_core_component_dex_v1_SwapClaimPlan_position_tag 2
#define penumbra_core_component_dex_v1_SwapClaimPlan_output_data_tag 3
#define penumbra_core_component_dex_v1_SwapClaimPlan_epoch_duration_tag 4
#define penumbra_core_component_dex_v1_SwapClaimPlan_proof_blinding_r_tag 5
#define penumbra_core_component_dex_v1_SwapClaimPlan_proof_blinding_s_tag 6
#define penumbra_core_component_dex_v1_SwapView_Visible_swap_tag 1
#define penumbra_core_component_dex_v1_SwapView_Visible_swap_plaintext_tag 3
#define penumbra_core_component_dex_v1_SwapView_Visible_claim_tx_tag 4
#define penumbra_core_component_dex_v1_SwapView_Visible_batch_swap_output_data_tag 20
#define penumbra_core_component_dex_v1_SwapView_Visible_output_1_tag 30
#define penumbra_core_component_dex_v1_SwapView_Visible_output_2_tag 31
#define penumbra_core_component_dex_v1_SwapView_Visible_asset_1_metadata_tag 40
#define penumbra_core_component_dex_v1_SwapView_Visible_asset_2_metadata_tag 41
#define penumbra_core_component_dex_v1_SwapView_Opaque_swap_tag 1
#define penumbra_core_component_dex_v1_SwapView_Opaque_batch_swap_output_data_tag 20
#define penumbra_core_component_dex_v1_SwapView_Opaque_output_1_value_tag 30
#define penumbra_core_component_dex_v1_SwapView_Opaque_output_2_value_tag 31
#define penumbra_core_component_dex_v1_SwapView_Opaque_asset_1_metadata_tag 40
#define penumbra_core_component_dex_v1_SwapView_Opaque_asset_2_metadata_tag 41
#define penumbra_core_component_dex_v1_SwapView_visible_tag 1
#define penumbra_core_component_dex_v1_SwapView_opaque_tag 2
#define penumbra_core_component_dex_v1_SwapClaimView_Visible_swap_claim_tag 1
#define penumbra_core_component_dex_v1_SwapClaimView_Visible_output_1_tag 2
#define penumbra_core_component_dex_v1_SwapClaimView_Visible_output_2_tag 3
#define penumbra_core_component_dex_v1_SwapClaimView_Visible_swap_tx_tag 4
#define penumbra_core_component_dex_v1_SwapClaimView_Opaque_swap_claim_tag 1
#define penumbra_core_component_dex_v1_SwapClaimView_visible_tag 1
#define penumbra_core_component_dex_v1_SwapClaimView_opaque_tag 2
#define penumbra_core_component_dex_v1_BareTradingFunction_fee_tag 1
#define penumbra_core_component_dex_v1_BareTradingFunction_p_tag 2
#define penumbra_core_component_dex_v1_BareTradingFunction_q_tag 3
#define penumbra_core_component_dex_v1_TradingFunction_component_tag 1
#define penumbra_core_component_dex_v1_TradingFunction_pair_tag 2
#define penumbra_core_component_dex_v1_Reserves_r1_tag 1
#define penumbra_core_component_dex_v1_Reserves_r2_tag 2
#define penumbra_core_component_dex_v1_PositionId_inner_tag 1
#define penumbra_core_component_dex_v1_PositionId_alt_bech32m_tag 2
#define penumbra_core_component_dex_v1_PositionState_state_tag 1
#define penumbra_core_component_dex_v1_PositionState_sequence_tag 2
#define penumbra_core_component_dex_v1_Position_phi_tag 1
#define penumbra_core_component_dex_v1_Position_nonce_tag 2
#define penumbra_core_component_dex_v1_Position_state_tag 3
#define penumbra_core_component_dex_v1_Position_reserves_tag 4
#define penumbra_core_component_dex_v1_Position_close_on_fill_tag 5
#define penumbra_core_component_dex_v1_LpNft_position_id_tag 1
#define penumbra_core_component_dex_v1_LpNft_state_tag 2
#define penumbra_core_component_dex_v1_PositionOpen_position_tag 1
#define penumbra_core_component_dex_v1_PositionClose_position_id_tag 1
#define penumbra_core_component_dex_v1_PositionWithdraw_position_id_tag 1
#define penumbra_core_component_dex_v1_PositionWithdraw_reserves_commitment_tag 2
#define penumbra_core_component_dex_v1_PositionWithdraw_sequence_tag 3
#define penumbra_core_component_dex_v1_PositionRewardClaim_position_id_tag 1
#define penumbra_core_component_dex_v1_PositionRewardClaim_rewards_commitment_tag 2
#define penumbra_core_component_dex_v1_SwapExecution_traces_tag 1
#define penumbra_core_component_dex_v1_SwapExecution_input_tag 2
#define penumbra_core_component_dex_v1_SwapExecution_output_tag 3
#define penumbra_core_component_dex_v1_SwapExecution_Trace_value_tag 1
#define penumbra_core_component_dex_v1_PositionWithdrawPlan_reserves_tag 1
#define penumbra_core_component_dex_v1_PositionWithdrawPlan_position_id_tag 2
#define penumbra_core_component_dex_v1_PositionWithdrawPlan_pair_tag 3
#define penumbra_core_component_dex_v1_PositionWithdrawPlan_sequence_tag 4
#define penumbra_core_component_dex_v1_PositionWithdrawPlan_rewards_tag 5
#define penumbra_core_component_dex_v1_PositionRewardClaimPlan_reserves_tag 1
#define penumbra_core_component_dex_v1_BatchSwapOutputDataRequest_height_tag 2
#define penumbra_core_component_dex_v1_BatchSwapOutputDataRequest_trading_pair_tag 3
#define penumbra_core_component_dex_v1_BatchSwapOutputDataResponse_data_tag 1
#define penumbra_core_component_dex_v1_SwapExecutionRequest_height_tag 2
#define penumbra_core_component_dex_v1_SwapExecutionRequest_trading_pair_tag 3
#define penumbra_core_component_dex_v1_SwapExecutionResponse_swap_execution_tag 1
#define penumbra_core_component_dex_v1_ArbExecutionRequest_height_tag 2
#define penumbra_core_component_dex_v1_ArbExecutionResponse_swap_execution_tag 1
#define penumbra_core_component_dex_v1_ArbExecutionResponse_height_tag 2
#define penumbra_core_component_dex_v1_SwapExecutionsRequest_start_height_tag 2
#define penumbra_core_component_dex_v1_SwapExecutionsRequest_end_height_tag 3
#define penumbra_core_component_dex_v1_SwapExecutionsRequest_trading_pair_tag 4
#define penumbra_core_component_dex_v1_SwapExecutionsResponse_swap_execution_tag 1
#define penumbra_core_component_dex_v1_SwapExecutionsResponse_height_tag 2
#define penumbra_core_component_dex_v1_SwapExecutionsResponse_trading_pair_tag 3
#define penumbra_core_component_dex_v1_ArbExecutionsRequest_start_height_tag 2
#define penumbra_core_component_dex_v1_ArbExecutionsRequest_end_height_tag 3
#define penumbra_core_component_dex_v1_ArbExecutionsResponse_swap_execution_tag 1
#define penumbra_core_component_dex_v1_ArbExecutionsResponse_height_tag 2
#define penumbra_core_component_dex_v1_LiquidityPositionsRequest_include_closed_tag 4
#define penumbra_core_component_dex_v1_LiquidityPositionsResponse_data_tag 1
#define penumbra_core_component_dex_v1_LiquidityPositionByIdRequest_position_id_tag 2
#define penumbra_core_component_dex_v1_LiquidityPositionByIdResponse_data_tag 1
#define penumbra_core_component_dex_v1_LiquidityPositionsByIdRequest_position_id_tag 2
#define penumbra_core_component_dex_v1_LiquidityPositionsByIdResponse_data_tag 1
#define penumbra_core_component_dex_v1_LiquidityPositionsByPriceRequest_trading_pair_tag 2
#define penumbra_core_component_dex_v1_LiquidityPositionsByPriceRequest_limit_tag 5
#define penumbra_core_component_dex_v1_LiquidityPositionsByPriceResponse_data_tag 1
#define penumbra_core_component_dex_v1_LiquidityPositionsByPriceResponse_id_tag 2
#define penumbra_core_component_dex_v1_SpreadRequest_trading_pair_tag 2
#define penumbra_core_component_dex_v1_SpreadResponse_best_1_to_2_position_tag 1
#define penumbra_core_component_dex_v1_SpreadResponse_best_2_to_1_position_tag 2
#define penumbra_core_component_dex_v1_SpreadResponse_approx_effective_price_1_to_2_tag 3
#define penumbra_core_component_dex_v1_SpreadResponse_approx_effective_price_2_to_1_tag 4
#define penumbra_core_component_dex_v1_SimulateTradeRequest_Routing_default__tag 1
#define penumbra_core_component_dex_v1_SimulateTradeRequest_Routing_single_hop_tag 2
#define penumbra_core_component_dex_v1_SimulateTradeRequest_input_tag 1
#define penumbra_core_component_dex_v1_SimulateTradeRequest_output_tag 2
#define penumbra_core_component_dex_v1_SimulateTradeRequest_routing_tag 3
#define penumbra_core_component_dex_v1_SimulateTradeResponse_output_tag 1
#define penumbra_core_component_dex_v1_SimulateTradeResponse_unfilled_tag 2
#define penumbra_core_component_dex_v1_EventSwap_trading_pair_tag 1
#define penumbra_core_component_dex_v1_EventSwap_delta_1_i_tag 2
#define penumbra_core_component_dex_v1_EventSwap_delta_2_i_tag 3
#define penumbra_core_component_dex_v1_EventSwap_swap_commitment_tag 4
#define penumbra_core_component_dex_v1_EventSwapClaim_trading_pair_tag 1
#define penumbra_core_component_dex_v1_EventSwapClaim_output_1_commitment_tag 2
#define penumbra_core_component_dex_v1_EventSwapClaim_output_2_commitment_tag 3
#define penumbra_core_component_dex_v1_EventSwapClaim_nullifier_tag 4
#define penumbra_core_component_dex_v1_EventPositionOpen_position_id_tag 1
#define penumbra_core_component_dex_v1_EventPositionOpen_trading_pair_tag 2
#define penumbra_core_component_dex_v1_EventPositionOpen_reserves_1_tag 3
#define penumbra_core_component_dex_v1_EventPositionOpen_reserves_2_tag 4
#define penumbra_core_component_dex_v1_EventPositionOpen_trading_fee_tag 5
#define penumbra_core_component_dex_v1_EventPositionOpen_position_tag 6
#define penumbra_core_component_dex_v1_EventPositionClose_position_id_tag 1
#define penumbra_core_component_dex_v1_EventQueuePositionClose_position_id_tag 1
#define penumbra_core_component_dex_v1_EventPositionWithdraw_position_id_tag 1
#define penumbra_core_component_dex_v1_EventPositionWithdraw_trading_pair_tag 2
#define penumbra_core_component_dex_v1_EventPositionWithdraw_reserves_1_tag 3
#define penumbra_core_component_dex_v1_EventPositionWithdraw_reserves_2_tag 4
#define penumbra_core_component_dex_v1_EventPositionWithdraw_sequence_tag 5
#define penumbra_core_component_dex_v1_EventPositionExecution_position_id_tag 1
#define penumbra_core_component_dex_v1_EventPositionExecution_trading_pair_tag 2
#define penumbra_core_component_dex_v1_EventPositionExecution_reserves_1_tag 3
#define penumbra_core_component_dex_v1_EventPositionExecution_reserves_2_tag 4
#define penumbra_core_component_dex_v1_EventPositionExecution_prev_reserves_1_tag 5
#define penumbra_core_component_dex_v1_EventPositionExecution_prev_reserves_2_tag 6
#define penumbra_core_component_dex_v1_EventPositionExecution_context_tag 7
#define penumbra_core_component_dex_v1_EventBatchSwap_batch_swap_output_data_tag 1
#define penumbra_core_component_dex_v1_EventBatchSwap_swap_execution_1_for_2_tag 2
#define penumbra_core_component_dex_v1_EventBatchSwap_swap_execution_2_for_1_tag 3
#define penumbra_core_component_dex_v1_EventArbExecution_height_tag 1
#define penumbra_core_component_dex_v1_EventArbExecution_swap_execution_tag 2
#define penumbra_core_component_dex_v1_EventValueCircuitBreakerCredit_asset_id_tag 1
#define penumbra_core_component_dex_v1_EventValueCircuitBreakerCredit_previous_balance_tag 2
#define penumbra_core_component_dex_v1_EventValueCircuitBreakerCredit_new_balance_tag 3
#define penumbra_core_component_dex_v1_EventValueCircuitBreakerDebit_asset_id_tag 1
#define penumbra_core_component_dex_v1_EventValueCircuitBreakerDebit_previous_balance_tag 2
#define penumbra_core_component_dex_v1_EventValueCircuitBreakerDebit_new_balance_tag 3
#define penumbra_core_component_dex_v1_DexParameters_is_enabled_tag 1
#define penumbra_core_component_dex_v1_DexParameters_fixed_candidates_tag 2
#define penumbra_core_component_dex_v1_DexParameters_max_hops_tag 3
#define penumbra_core_component_dex_v1_DexParameters_max_positions_per_pair_tag 4
#define penumbra_core_component_dex_v1_DexParameters_max_execution_budget_tag 5
#define penumbra_core_component_dex_v1_GenesisContent_dex_params_tag 1
#define penumbra_core_component_dex_v1_CandlestickData_height_tag 1
#define penumbra_core_component_dex_v1_CandlestickData_open_tag 2
#define penumbra_core_component_dex_v1_CandlestickData_close_tag 3
#define penumbra_core_component_dex_v1_CandlestickData_high_tag 4
#define penumbra_core_component_dex_v1_CandlestickData_low_tag 5
#define penumbra_core_component_dex_v1_CandlestickData_direct_volume_tag 6
#define penumbra_core_component_dex_v1_CandlestickData_swap_volume_tag 7
#define penumbra_core_component_dex_v1_CandlestickDataRequest_pair_tag 1
#define penumbra_core_component_dex_v1_CandlestickDataRequest_limit_tag 2
#define penumbra_core_component_dex_v1_CandlestickDataRequest_start_height_tag 3
#define penumbra_core_component_dex_v1_CandlestickDataResponse_data_tag 1
#define penumbra_core_component_dex_v1_CandlestickDataStreamRequest_pair_tag 1
#define penumbra_core_component_dex_v1_CandlestickDataStreamResponse_data_tag 1

/* Struct field encoding specification for nanopb */
#define penumbra_core_component_dex_v1_ZKSwapProof_FIELDLIST(X, a) X(a, CALLBACK, SINGULAR, BYTES, inner, 1)
#define penumbra_core_component_dex_v1_ZKSwapProof_CALLBACK pb_default_field_callback
#define penumbra_core_component_dex_v1_ZKSwapProof_DEFAULT NULL

#define penumbra_core_component_dex_v1_ZKSwapClaimProof_FIELDLIST(X, a) X(a, CALLBACK, SINGULAR, BYTES, inner, 1)
#define penumbra_core_component_dex_v1_ZKSwapClaimProof_CALLBACK pb_default_field_callback
#define penumbra_core_component_dex_v1_ZKSwapClaimProof_DEFAULT NULL

#define penumbra_core_component_dex_v1_Swap_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, proof, 1)               \
    X(a, STATIC, OPTIONAL, MESSAGE, body, 4)
#define penumbra_core_component_dex_v1_Swap_CALLBACK NULL
#define penumbra_core_component_dex_v1_Swap_DEFAULT NULL
#define penumbra_core_component_dex_v1_Swap_proof_MSGTYPE penumbra_core_component_dex_v1_ZKSwapProof
#define penumbra_core_component_dex_v1_Swap_body_MSGTYPE penumbra_core_component_dex_v1_SwapBody

#define penumbra_core_component_dex_v1_SwapClaim_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, proof, 1)                    \
    X(a, STATIC, OPTIONAL, MESSAGE, body, 2)                     \
    X(a, STATIC, SINGULAR, UINT64, epoch_duration, 7)
#define penumbra_core_component_dex_v1_SwapClaim_CALLBACK NULL
#define penumbra_core_component_dex_v1_SwapClaim_DEFAULT NULL
#define penumbra_core_component_dex_v1_SwapClaim_proof_MSGTYPE penumbra_core_component_dex_v1_ZKSwapClaimProof
#define penumbra_core_component_dex_v1_SwapClaim_body_MSGTYPE penumbra_core_component_dex_v1_SwapClaimBody

#define penumbra_core_component_dex_v1_SwapClaimBody_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, nullifier, 1)                    \
    X(a, STATIC, OPTIONAL, MESSAGE, fee, 2)                          \
    X(a, STATIC, OPTIONAL, MESSAGE, output_1_commitment, 3)          \
    X(a, STATIC, OPTIONAL, MESSAGE, output_2_commitment, 4)          \
    X(a, STATIC, OPTIONAL, MESSAGE, output_data, 6)
#define penumbra_core_component_dex_v1_SwapClaimBody_CALLBACK NULL
#define penumbra_core_component_dex_v1_SwapClaimBody_DEFAULT NULL
#define penumbra_core_component_dex_v1_SwapClaimBody_nullifier_MSGTYPE penumbra_core_component_sct_v1_Nullifier
#define penumbra_core_component_dex_v1_SwapClaimBody_fee_MSGTYPE penumbra_core_component_fee_v1_Fee
#define penumbra_core_component_dex_v1_SwapClaimBody_output_1_commitment_MSGTYPE penumbra_crypto_tct_v1_StateCommitment
#define penumbra_core_component_dex_v1_SwapClaimBody_output_2_commitment_MSGTYPE penumbra_crypto_tct_v1_StateCommitment
#define penumbra_core_component_dex_v1_SwapClaimBody_output_data_MSGTYPE penumbra_core_component_dex_v1_BatchSwapOutputData

#define penumbra_core_component_dex_v1_SwapBody_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, trading_pair, 1)            \
    X(a, STATIC, OPTIONAL, MESSAGE, delta_1_i, 2)               \
    X(a, STATIC, OPTIONAL, MESSAGE, delta_2_i, 3)               \
    X(a, STATIC, OPTIONAL, MESSAGE, fee_commitment, 4)          \
    X(a, STATIC, OPTIONAL, MESSAGE, payload, 5)
#define penumbra_core_component_dex_v1_SwapBody_CALLBACK NULL
#define penumbra_core_component_dex_v1_SwapBody_DEFAULT NULL
#define penumbra_core_component_dex_v1_SwapBody_trading_pair_MSGTYPE penumbra_core_component_dex_v1_TradingPair
#define penumbra_core_component_dex_v1_SwapBody_delta_1_i_MSGTYPE penumbra_core_num_v1_Amount
#define penumbra_core_component_dex_v1_SwapBody_delta_2_i_MSGTYPE penumbra_core_num_v1_Amount
#define penumbra_core_component_dex_v1_SwapBody_fee_commitment_MSGTYPE penumbra_core_asset_v1_BalanceCommitment
#define penumbra_core_component_dex_v1_SwapBody_payload_MSGTYPE penumbra_core_component_dex_v1_SwapPayload

#define penumbra_core_component_dex_v1_SwapPayload_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, commitment, 1)                 \
    X(a, CALLBACK, SINGULAR, BYTES, encrypted_swap, 2)
#define penumbra_core_component_dex_v1_SwapPayload_CALLBACK pb_default_field_callback
#define penumbra_core_component_dex_v1_SwapPayload_DEFAULT NULL
#define penumbra_core_component_dex_v1_SwapPayload_commitment_MSGTYPE penumbra_crypto_tct_v1_StateCommitment

#define penumbra_core_component_dex_v1_SwapPlaintext_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, trading_pair, 1)                 \
    X(a, STATIC, OPTIONAL, MESSAGE, delta_1_i, 2)                    \
    X(a, STATIC, OPTIONAL, MESSAGE, delta_2_i, 3)                    \
    X(a, STATIC, OPTIONAL, MESSAGE, claim_fee, 4)                    \
    X(a, STATIC, OPTIONAL, MESSAGE, claim_address, 5)                \
    X(a, CALLBACK, SINGULAR, BYTES, rseed, 6)
#define penumbra_core_component_dex_v1_SwapPlaintext_CALLBACK pb_default_field_callback
#define penumbra_core_component_dex_v1_SwapPlaintext_DEFAULT NULL
#define penumbra_core_component_dex_v1_SwapPlaintext_trading_pair_MSGTYPE penumbra_core_component_dex_v1_TradingPair
#define penumbra_core_component_dex_v1_SwapPlaintext_delta_1_i_MSGTYPE penumbra_core_num_v1_Amount
#define penumbra_core_component_dex_v1_SwapPlaintext_delta_2_i_MSGTYPE penumbra_core_num_v1_Amount
#define penumbra_core_component_dex_v1_SwapPlaintext_claim_fee_MSGTYPE penumbra_core_component_fee_v1_Fee
#define penumbra_core_component_dex_v1_SwapPlaintext_claim_address_MSGTYPE penumbra_core_keys_v1_Address

#define penumbra_core_component_dex_v1_SwapPlan_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, swap_plaintext, 1)          \
    X(a, CALLBACK, SINGULAR, BYTES, fee_blinding, 2)            \
    X(a, CALLBACK, SINGULAR, BYTES, proof_blinding_r, 3)        \
    X(a, CALLBACK, SINGULAR, BYTES, proof_blinding_s, 4)
#define penumbra_core_component_dex_v1_SwapPlan_CALLBACK pb_default_field_callback
#define penumbra_core_component_dex_v1_SwapPlan_DEFAULT NULL
#define penumbra_core_component_dex_v1_SwapPlan_swap_plaintext_MSGTYPE penumbra_core_component_dex_v1_SwapPlaintext

#define penumbra_core_component_dex_v1_SwapClaimPlan_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, swap_plaintext, 1)               \
    X(a, STATIC, SINGULAR, UINT64, position, 2)                      \
    X(a, STATIC, OPTIONAL, MESSAGE, output_data, 3)                  \
    X(a, STATIC, SINGULAR, UINT64, epoch_duration, 4)                \
    X(a, CALLBACK, SINGULAR, BYTES, proof_blinding_r, 5)             \
    X(a, CALLBACK, SINGULAR, BYTES, proof_blinding_s, 6)
#define penumbra_core_component_dex_v1_SwapClaimPlan_CALLBACK pb_default_field_callback
#define penumbra_core_component_dex_v1_SwapClaimPlan_DEFAULT NULL
#define penumbra_core_component_dex_v1_SwapClaimPlan_swap_plaintext_MSGTYPE penumbra_core_component_dex_v1_SwapPlaintext
#define penumbra_core_component_dex_v1_SwapClaimPlan_output_data_MSGTYPE penumbra_core_component_dex_v1_BatchSwapOutputData

#define penumbra_core_component_dex_v1_SwapView_FIELDLIST(X, a)              \
    X(a, STATIC, ONEOF, MESSAGE, (swap_view, visible, swap_view.visible), 1) \
    X(a, STATIC, ONEOF, MESSAGE, (swap_view, opaque, swap_view.opaque), 2)
#define penumbra_core_component_dex_v1_SwapView_CALLBACK NULL
#define penumbra_core_component_dex_v1_SwapView_DEFAULT NULL
#define penumbra_core_component_dex_v1_SwapView_swap_view_visible_MSGTYPE penumbra_core_component_dex_v1_SwapView_Visible
#define penumbra_core_component_dex_v1_SwapView_swap_view_opaque_MSGTYPE penumbra_core_component_dex_v1_SwapView_Opaque

#define penumbra_core_component_dex_v1_SwapView_Visible_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, swap, 1)                            \
    X(a, STATIC, OPTIONAL, MESSAGE, swap_plaintext, 3)                  \
    X(a, STATIC, OPTIONAL, MESSAGE, claim_tx, 4)                        \
    X(a, STATIC, OPTIONAL, MESSAGE, batch_swap_output_data, 20)         \
    X(a, STATIC, OPTIONAL, MESSAGE, output_1, 30)                       \
    X(a, STATIC, OPTIONAL, MESSAGE, output_2, 31)                       \
    X(a, STATIC, OPTIONAL, MESSAGE, asset_1_metadata, 40)               \
    X(a, STATIC, OPTIONAL, MESSAGE, asset_2_metadata, 41)
#define penumbra_core_component_dex_v1_SwapView_Visible_CALLBACK NULL
#define penumbra_core_component_dex_v1_SwapView_Visible_DEFAULT NULL
#define penumbra_core_component_dex_v1_SwapView_Visible_swap_MSGTYPE penumbra_core_component_dex_v1_Swap
#define penumbra_core_component_dex_v1_SwapView_Visible_swap_plaintext_MSGTYPE penumbra_core_component_dex_v1_SwapPlaintext
#define penumbra_core_component_dex_v1_SwapView_Visible_claim_tx_MSGTYPE penumbra_core_txhash_v1_TransactionId
#define penumbra_core_component_dex_v1_SwapView_Visible_batch_swap_output_data_MSGTYPE \
    penumbra_core_component_dex_v1_BatchSwapOutputData
#define penumbra_core_component_dex_v1_SwapView_Visible_output_1_MSGTYPE penumbra_core_component_shielded_pool_v1_NoteView
#define penumbra_core_component_dex_v1_SwapView_Visible_output_2_MSGTYPE penumbra_core_component_shielded_pool_v1_NoteView
#define penumbra_core_component_dex_v1_SwapView_Visible_asset_1_metadata_MSGTYPE penumbra_core_asset_v1_Metadata
#define penumbra_core_component_dex_v1_SwapView_Visible_asset_2_metadata_MSGTYPE penumbra_core_asset_v1_Metadata

#define penumbra_core_component_dex_v1_SwapView_Opaque_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, swap, 1)                           \
    X(a, STATIC, OPTIONAL, MESSAGE, batch_swap_output_data, 20)        \
    X(a, STATIC, OPTIONAL, MESSAGE, output_1_value, 30)                \
    X(a, STATIC, OPTIONAL, MESSAGE, output_2_value, 31)                \
    X(a, STATIC, OPTIONAL, MESSAGE, asset_1_metadata, 40)              \
    X(a, STATIC, OPTIONAL, MESSAGE, asset_2_metadata, 41)
#define penumbra_core_component_dex_v1_SwapView_Opaque_CALLBACK NULL
#define penumbra_core_component_dex_v1_SwapView_Opaque_DEFAULT NULL
#define penumbra_core_component_dex_v1_SwapView_Opaque_swap_MSGTYPE penumbra_core_component_dex_v1_Swap
#define penumbra_core_component_dex_v1_SwapView_Opaque_batch_swap_output_data_MSGTYPE \
    penumbra_core_component_dex_v1_BatchSwapOutputData
#define penumbra_core_component_dex_v1_SwapView_Opaque_output_1_value_MSGTYPE penumbra_core_asset_v1_ValueView
#define penumbra_core_component_dex_v1_SwapView_Opaque_output_2_value_MSGTYPE penumbra_core_asset_v1_ValueView
#define penumbra_core_component_dex_v1_SwapView_Opaque_asset_1_metadata_MSGTYPE penumbra_core_asset_v1_Metadata
#define penumbra_core_component_dex_v1_SwapView_Opaque_asset_2_metadata_MSGTYPE penumbra_core_asset_v1_Metadata

#define penumbra_core_component_dex_v1_SwapClaimView_FIELDLIST(X, a)                     \
    X(a, STATIC, ONEOF, MESSAGE, (swap_claim_view, visible, swap_claim_view.visible), 1) \
    X(a, STATIC, ONEOF, MESSAGE, (swap_claim_view, opaque, swap_claim_view.opaque), 2)
#define penumbra_core_component_dex_v1_SwapClaimView_CALLBACK NULL
#define penumbra_core_component_dex_v1_SwapClaimView_DEFAULT NULL
#define penumbra_core_component_dex_v1_SwapClaimView_swap_claim_view_visible_MSGTYPE \
    penumbra_core_component_dex_v1_SwapClaimView_Visible
#define penumbra_core_component_dex_v1_SwapClaimView_swap_claim_view_opaque_MSGTYPE \
    penumbra_core_component_dex_v1_SwapClaimView_Opaque

#define penumbra_core_component_dex_v1_SwapClaimView_Visible_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, swap_claim, 1)                           \
    X(a, STATIC, OPTIONAL, MESSAGE, output_1, 2)                             \
    X(a, STATIC, OPTIONAL, MESSAGE, output_2, 3)                             \
    X(a, STATIC, OPTIONAL, MESSAGE, swap_tx, 4)
#define penumbra_core_component_dex_v1_SwapClaimView_Visible_CALLBACK NULL
#define penumbra_core_component_dex_v1_SwapClaimView_Visible_DEFAULT NULL
#define penumbra_core_component_dex_v1_SwapClaimView_Visible_swap_claim_MSGTYPE penumbra_core_component_dex_v1_SwapClaim
#define penumbra_core_component_dex_v1_SwapClaimView_Visible_output_1_MSGTYPE \
    penumbra_core_component_shielded_pool_v1_NoteView
#define penumbra_core_component_dex_v1_SwapClaimView_Visible_output_2_MSGTYPE \
    penumbra_core_component_shielded_pool_v1_NoteView
#define penumbra_core_component_dex_v1_SwapClaimView_Visible_swap_tx_MSGTYPE penumbra_core_txhash_v1_TransactionId

#define penumbra_core_component_dex_v1_SwapClaimView_Opaque_FIELDLIST(X, a) X(a, STATIC, OPTIONAL, MESSAGE, swap_claim, 1)
#define penumbra_core_component_dex_v1_SwapClaimView_Opaque_CALLBACK NULL
#define penumbra_core_component_dex_v1_SwapClaimView_Opaque_DEFAULT NULL
#define penumbra_core_component_dex_v1_SwapClaimView_Opaque_swap_claim_MSGTYPE penumbra_core_component_dex_v1_SwapClaim

#define penumbra_core_component_dex_v1_TradingPair_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, asset_1, 1)                    \
    X(a, STATIC, OPTIONAL, MESSAGE, asset_2, 2)
#define penumbra_core_component_dex_v1_TradingPair_CALLBACK NULL
#define penumbra_core_component_dex_v1_TradingPair_DEFAULT NULL
#define penumbra_core_component_dex_v1_TradingPair_asset_1_MSGTYPE penumbra_core_asset_v1_AssetId
#define penumbra_core_component_dex_v1_TradingPair_asset_2_MSGTYPE penumbra_core_asset_v1_AssetId

#define penumbra_core_component_dex_v1_DirectedTradingPair_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, start, 1)                              \
    X(a, STATIC, OPTIONAL, MESSAGE, end, 2)
#define penumbra_core_component_dex_v1_DirectedTradingPair_CALLBACK NULL
#define penumbra_core_component_dex_v1_DirectedTradingPair_DEFAULT NULL
#define penumbra_core_component_dex_v1_DirectedTradingPair_start_MSGTYPE penumbra_core_asset_v1_AssetId
#define penumbra_core_component_dex_v1_DirectedTradingPair_end_MSGTYPE penumbra_core_asset_v1_AssetId

#define penumbra_core_component_dex_v1_BatchSwapOutputData_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, delta_1, 1)                            \
    X(a, STATIC, OPTIONAL, MESSAGE, delta_2, 2)                            \
    X(a, STATIC, OPTIONAL, MESSAGE, lambda_1, 3)                           \
    X(a, STATIC, OPTIONAL, MESSAGE, lambda_2, 4)                           \
    X(a, STATIC, OPTIONAL, MESSAGE, unfilled_1, 5)                         \
    X(a, STATIC, OPTIONAL, MESSAGE, unfilled_2, 6)                         \
    X(a, STATIC, SINGULAR, UINT64, height, 7)                              \
    X(a, STATIC, OPTIONAL, MESSAGE, trading_pair, 8)                       \
    X(a, STATIC, SINGULAR, UINT64, epoch_starting_height, 9)               \
    X(a, STATIC, SINGULAR, UINT64, sct_position_prefix, 10)
#define penumbra_core_component_dex_v1_BatchSwapOutputData_CALLBACK NULL
#define penumbra_core_component_dex_v1_BatchSwapOutputData_DEFAULT NULL
#define penumbra_core_component_dex_v1_BatchSwapOutputData_delta_1_MSGTYPE penumbra_core_num_v1_Amount
#define penumbra_core_component_dex_v1_BatchSwapOutputData_delta_2_MSGTYPE penumbra_core_num_v1_Amount
#define penumbra_core_component_dex_v1_BatchSwapOutputData_lambda_1_MSGTYPE penumbra_core_num_v1_Amount
#define penumbra_core_component_dex_v1_BatchSwapOutputData_lambda_2_MSGTYPE penumbra_core_num_v1_Amount
#define penumbra_core_component_dex_v1_BatchSwapOutputData_unfilled_1_MSGTYPE penumbra_core_num_v1_Amount
#define penumbra_core_component_dex_v1_BatchSwapOutputData_unfilled_2_MSGTYPE penumbra_core_num_v1_Amount
#define penumbra_core_component_dex_v1_BatchSwapOutputData_trading_pair_MSGTYPE penumbra_core_component_dex_v1_TradingPair

#define penumbra_core_component_dex_v1_TradingFunction_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, component, 1)                      \
    X(a, STATIC, OPTIONAL, MESSAGE, pair, 2)
#define penumbra_core_component_dex_v1_TradingFunction_CALLBACK NULL
#define penumbra_core_component_dex_v1_TradingFunction_DEFAULT NULL
#define penumbra_core_component_dex_v1_TradingFunction_component_MSGTYPE penumbra_core_component_dex_v1_BareTradingFunction
#define penumbra_core_component_dex_v1_TradingFunction_pair_MSGTYPE penumbra_core_component_dex_v1_TradingPair

#define penumbra_core_component_dex_v1_BareTradingFunction_FIELDLIST(X, a) \
    X(a, STATIC, SINGULAR, UINT32, fee, 1)                                 \
    X(a, STATIC, OPTIONAL, MESSAGE, p, 2)                                  \
    X(a, STATIC, OPTIONAL, MESSAGE, q, 3)
#define penumbra_core_component_dex_v1_BareTradingFunction_CALLBACK NULL
#define penumbra_core_component_dex_v1_BareTradingFunction_DEFAULT NULL
#define penumbra_core_component_dex_v1_BareTradingFunction_p_MSGTYPE penumbra_core_num_v1_Amount
#define penumbra_core_component_dex_v1_BareTradingFunction_q_MSGTYPE penumbra_core_num_v1_Amount

#define penumbra_core_component_dex_v1_Reserves_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, r1, 1)                      \
    X(a, STATIC, OPTIONAL, MESSAGE, r2, 2)
#define penumbra_core_component_dex_v1_Reserves_CALLBACK NULL
#define penumbra_core_component_dex_v1_Reserves_DEFAULT NULL
#define penumbra_core_component_dex_v1_Reserves_r1_MSGTYPE penumbra_core_num_v1_Amount
#define penumbra_core_component_dex_v1_Reserves_r2_MSGTYPE penumbra_core_num_v1_Amount

#define penumbra_core_component_dex_v1_Position_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, phi, 1)                     \
    X(a, CALLBACK, SINGULAR, BYTES, nonce, 2)                   \
    X(a, STATIC, OPTIONAL, MESSAGE, state, 3)                   \
    X(a, STATIC, OPTIONAL, MESSAGE, reserves, 4)                \
    X(a, STATIC, SINGULAR, BOOL, close_on_fill, 5)
#define penumbra_core_component_dex_v1_Position_CALLBACK pb_default_field_callback
#define penumbra_core_component_dex_v1_Position_DEFAULT NULL
#define penumbra_core_component_dex_v1_Position_phi_MSGTYPE penumbra_core_component_dex_v1_TradingFunction
#define penumbra_core_component_dex_v1_Position_state_MSGTYPE penumbra_core_component_dex_v1_PositionState
#define penumbra_core_component_dex_v1_Position_reserves_MSGTYPE penumbra_core_component_dex_v1_Reserves

#define penumbra_core_component_dex_v1_PositionId_FIELDLIST(X, a) \
    X(a, CALLBACK, SINGULAR, BYTES, inner, 1)                     \
    X(a, CALLBACK, SINGULAR, STRING, alt_bech32m, 2)
#define penumbra_core_component_dex_v1_PositionId_CALLBACK pb_default_field_callback
#define penumbra_core_component_dex_v1_PositionId_DEFAULT NULL

#define penumbra_core_component_dex_v1_PositionState_FIELDLIST(X, a) \
    X(a, STATIC, SINGULAR, UENUM, state, 1)                          \
    X(a, STATIC, SINGULAR, UINT64, sequence, 2)
#define penumbra_core_component_dex_v1_PositionState_CALLBACK NULL
#define penumbra_core_component_dex_v1_PositionState_DEFAULT NULL

#define penumbra_core_component_dex_v1_LpNft_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, position_id, 1)          \
    X(a, STATIC, OPTIONAL, MESSAGE, state, 2)
#define penumbra_core_component_dex_v1_LpNft_CALLBACK NULL
#define penumbra_core_component_dex_v1_LpNft_DEFAULT NULL
#define penumbra_core_component_dex_v1_LpNft_position_id_MSGTYPE penumbra_core_component_dex_v1_PositionId
#define penumbra_core_component_dex_v1_LpNft_state_MSGTYPE penumbra_core_component_dex_v1_PositionState

#define penumbra_core_component_dex_v1_PositionOpen_FIELDLIST(X, a) X(a, STATIC, OPTIONAL, MESSAGE, position, 1)
#define penumbra_core_component_dex_v1_PositionOpen_CALLBACK NULL
#define penumbra_core_component_dex_v1_PositionOpen_DEFAULT NULL
#define penumbra_core_component_dex_v1_PositionOpen_position_MSGTYPE penumbra_core_component_dex_v1_Position

#define penumbra_core_component_dex_v1_PositionClose_FIELDLIST(X, a) X(a, STATIC, OPTIONAL, MESSAGE, position_id, 1)
#define penumbra_core_component_dex_v1_PositionClose_CALLBACK NULL
#define penumbra_core_component_dex_v1_PositionClose_DEFAULT NULL
#define penumbra_core_component_dex_v1_PositionClose_position_id_MSGTYPE penumbra_core_component_dex_v1_PositionId

#define penumbra_core_component_dex_v1_PositionWithdraw_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, position_id, 1)                     \
    X(a, STATIC, OPTIONAL, MESSAGE, reserves_commitment, 2)             \
    X(a, STATIC, SINGULAR, UINT64, sequence, 3)
#define penumbra_core_component_dex_v1_PositionWithdraw_CALLBACK NULL
#define penumbra_core_component_dex_v1_PositionWithdraw_DEFAULT NULL
#define penumbra_core_component_dex_v1_PositionWithdraw_position_id_MSGTYPE penumbra_core_component_dex_v1_PositionId
#define penumbra_core_component_dex_v1_PositionWithdraw_reserves_commitment_MSGTYPE penumbra_core_asset_v1_BalanceCommitment

#define penumbra_core_component_dex_v1_PositionRewardClaim_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, position_id, 1)                        \
    X(a, STATIC, OPTIONAL, MESSAGE, rewards_commitment, 2)
#define penumbra_core_component_dex_v1_PositionRewardClaim_CALLBACK NULL
#define penumbra_core_component_dex_v1_PositionRewardClaim_DEFAULT NULL
#define penumbra_core_component_dex_v1_PositionRewardClaim_position_id_MSGTYPE penumbra_core_component_dex_v1_PositionId
#define penumbra_core_component_dex_v1_PositionRewardClaim_rewards_commitment_MSGTYPE \
    penumbra_core_asset_v1_BalanceCommitment

#define penumbra_core_component_dex_v1_SwapExecution_FIELDLIST(X, a) \
    X(a, CALLBACK, REPEATED, MESSAGE, traces, 1)                     \
    X(a, STATIC, OPTIONAL, MESSAGE, input, 2)                        \
    X(a, STATIC, OPTIONAL, MESSAGE, output, 3)
#define penumbra_core_component_dex_v1_SwapExecution_CALLBACK pb_default_field_callback
#define penumbra_core_component_dex_v1_SwapExecution_DEFAULT NULL
#define penumbra_core_component_dex_v1_SwapExecution_traces_MSGTYPE penumbra_core_component_dex_v1_SwapExecution_Trace
#define penumbra_core_component_dex_v1_SwapExecution_input_MSGTYPE penumbra_core_asset_v1_Value
#define penumbra_core_component_dex_v1_SwapExecution_output_MSGTYPE penumbra_core_asset_v1_Value

#define penumbra_core_component_dex_v1_SwapExecution_Trace_FIELDLIST(X, a) X(a, CALLBACK, REPEATED, MESSAGE, value, 1)
#define penumbra_core_component_dex_v1_SwapExecution_Trace_CALLBACK pb_default_field_callback
#define penumbra_core_component_dex_v1_SwapExecution_Trace_DEFAULT NULL
#define penumbra_core_component_dex_v1_SwapExecution_Trace_value_MSGTYPE penumbra_core_asset_v1_Value

#define penumbra_core_component_dex_v1_PositionWithdrawPlan_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, reserves, 1)                            \
    X(a, STATIC, OPTIONAL, MESSAGE, position_id, 2)                         \
    X(a, STATIC, OPTIONAL, MESSAGE, pair, 3)                                \
    X(a, STATIC, SINGULAR, UINT64, sequence, 4)                             \
    X(a, CALLBACK, REPEATED, MESSAGE, rewards, 5)
#define penumbra_core_component_dex_v1_PositionWithdrawPlan_CALLBACK pb_default_field_callback
#define penumbra_core_component_dex_v1_PositionWithdrawPlan_DEFAULT NULL
#define penumbra_core_component_dex_v1_PositionWithdrawPlan_reserves_MSGTYPE penumbra_core_component_dex_v1_Reserves
#define penumbra_core_component_dex_v1_PositionWithdrawPlan_position_id_MSGTYPE penumbra_core_component_dex_v1_PositionId
#define penumbra_core_component_dex_v1_PositionWithdrawPlan_pair_MSGTYPE penumbra_core_component_dex_v1_TradingPair
#define penumbra_core_component_dex_v1_PositionWithdrawPlan_rewards_MSGTYPE penumbra_core_asset_v1_Value

#define penumbra_core_component_dex_v1_PositionRewardClaimPlan_FIELDLIST(X, a) X(a, STATIC, OPTIONAL, MESSAGE, reserves, 1)
#define penumbra_core_component_dex_v1_PositionRewardClaimPlan_CALLBACK NULL
#define penumbra_core_component_dex_v1_PositionRewardClaimPlan_DEFAULT NULL
#define penumbra_core_component_dex_v1_PositionRewardClaimPlan_reserves_MSGTYPE penumbra_core_component_dex_v1_Reserves

#define penumbra_core_component_dex_v1_BatchSwapOutputDataRequest_FIELDLIST(X, a) \
    X(a, STATIC, SINGULAR, UINT64, height, 2)                                     \
    X(a, STATIC, OPTIONAL, MESSAGE, trading_pair, 3)
#define penumbra_core_component_dex_v1_BatchSwapOutputDataRequest_CALLBACK NULL
#define penumbra_core_component_dex_v1_BatchSwapOutputDataRequest_DEFAULT NULL
#define penumbra_core_component_dex_v1_BatchSwapOutputDataRequest_trading_pair_MSGTYPE \
    penumbra_core_component_dex_v1_TradingPair

#define penumbra_core_component_dex_v1_BatchSwapOutputDataResponse_FIELDLIST(X, a) X(a, STATIC, OPTIONAL, MESSAGE, data, 1)
#define penumbra_core_component_dex_v1_BatchSwapOutputDataResponse_CALLBACK NULL
#define penumbra_core_component_dex_v1_BatchSwapOutputDataResponse_DEFAULT NULL
#define penumbra_core_component_dex_v1_BatchSwapOutputDataResponse_data_MSGTYPE \
    penumbra_core_component_dex_v1_BatchSwapOutputData

#define penumbra_core_component_dex_v1_SwapExecutionRequest_FIELDLIST(X, a) \
    X(a, STATIC, SINGULAR, UINT64, height, 2)                               \
    X(a, STATIC, OPTIONAL, MESSAGE, trading_pair, 3)
#define penumbra_core_component_dex_v1_SwapExecutionRequest_CALLBACK NULL
#define penumbra_core_component_dex_v1_SwapExecutionRequest_DEFAULT NULL
#define penumbra_core_component_dex_v1_SwapExecutionRequest_trading_pair_MSGTYPE \
    penumbra_core_component_dex_v1_DirectedTradingPair

#define penumbra_core_component_dex_v1_SwapExecutionResponse_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, swap_execution, 1)
#define penumbra_core_component_dex_v1_SwapExecutionResponse_CALLBACK NULL
#define penumbra_core_component_dex_v1_SwapExecutionResponse_DEFAULT NULL
#define penumbra_core_component_dex_v1_SwapExecutionResponse_swap_execution_MSGTYPE \
    penumbra_core_component_dex_v1_SwapExecution

#define penumbra_core_component_dex_v1_ArbExecutionRequest_FIELDLIST(X, a) X(a, STATIC, SINGULAR, UINT64, height, 2)
#define penumbra_core_component_dex_v1_ArbExecutionRequest_CALLBACK NULL
#define penumbra_core_component_dex_v1_ArbExecutionRequest_DEFAULT NULL

#define penumbra_core_component_dex_v1_ArbExecutionResponse_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, swap_execution, 1)                      \
    X(a, STATIC, SINGULAR, UINT64, height, 2)
#define penumbra_core_component_dex_v1_ArbExecutionResponse_CALLBACK NULL
#define penumbra_core_component_dex_v1_ArbExecutionResponse_DEFAULT NULL
#define penumbra_core_component_dex_v1_ArbExecutionResponse_swap_execution_MSGTYPE \
    penumbra_core_component_dex_v1_SwapExecution

#define penumbra_core_component_dex_v1_SwapExecutionsRequest_FIELDLIST(X, a) \
    X(a, STATIC, SINGULAR, UINT64, start_height, 2)                          \
    X(a, STATIC, SINGULAR, UINT64, end_height, 3)                            \
    X(a, STATIC, OPTIONAL, MESSAGE, trading_pair, 4)
#define penumbra_core_component_dex_v1_SwapExecutionsRequest_CALLBACK NULL
#define penumbra_core_component_dex_v1_SwapExecutionsRequest_DEFAULT NULL
#define penumbra_core_component_dex_v1_SwapExecutionsRequest_trading_pair_MSGTYPE \
    penumbra_core_component_dex_v1_DirectedTradingPair

#define penumbra_core_component_dex_v1_SwapExecutionsResponse_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, swap_execution, 1)                        \
    X(a, STATIC, SINGULAR, UINT64, height, 2)                                 \
    X(a, STATIC, OPTIONAL, MESSAGE, trading_pair, 3)
#define penumbra_core_component_dex_v1_SwapExecutionsResponse_CALLBACK NULL
#define penumbra_core_component_dex_v1_SwapExecutionsResponse_DEFAULT NULL
#define penumbra_core_component_dex_v1_SwapExecutionsResponse_swap_execution_MSGTYPE \
    penumbra_core_component_dex_v1_SwapExecution
#define penumbra_core_component_dex_v1_SwapExecutionsResponse_trading_pair_MSGTYPE \
    penumbra_core_component_dex_v1_DirectedTradingPair

#define penumbra_core_component_dex_v1_ArbExecutionsRequest_FIELDLIST(X, a) \
    X(a, STATIC, SINGULAR, UINT64, start_height, 2)                         \
    X(a, STATIC, SINGULAR, UINT64, end_height, 3)
#define penumbra_core_component_dex_v1_ArbExecutionsRequest_CALLBACK NULL
#define penumbra_core_component_dex_v1_ArbExecutionsRequest_DEFAULT NULL

#define penumbra_core_component_dex_v1_ArbExecutionsResponse_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, swap_execution, 1)                       \
    X(a, STATIC, SINGULAR, UINT64, height, 2)
#define penumbra_core_component_dex_v1_ArbExecutionsResponse_CALLBACK NULL
#define penumbra_core_component_dex_v1_ArbExecutionsResponse_DEFAULT NULL
#define penumbra_core_component_dex_v1_ArbExecutionsResponse_swap_execution_MSGTYPE \
    penumbra_core_component_dex_v1_SwapExecution

#define penumbra_core_component_dex_v1_LiquidityPositionsRequest_FIELDLIST(X, a) \
    X(a, STATIC, SINGULAR, BOOL, include_closed, 4)
#define penumbra_core_component_dex_v1_LiquidityPositionsRequest_CALLBACK NULL
#define penumbra_core_component_dex_v1_LiquidityPositionsRequest_DEFAULT NULL

#define penumbra_core_component_dex_v1_LiquidityPositionsResponse_FIELDLIST(X, a) X(a, STATIC, OPTIONAL, MESSAGE, data, 1)
#define penumbra_core_component_dex_v1_LiquidityPositionsResponse_CALLBACK NULL
#define penumbra_core_component_dex_v1_LiquidityPositionsResponse_DEFAULT NULL
#define penumbra_core_component_dex_v1_LiquidityPositionsResponse_data_MSGTYPE penumbra_core_component_dex_v1_Position

#define penumbra_core_component_dex_v1_LiquidityPositionByIdRequest_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, position_id, 2)
#define penumbra_core_component_dex_v1_LiquidityPositionByIdRequest_CALLBACK NULL
#define penumbra_core_component_dex_v1_LiquidityPositionByIdRequest_DEFAULT NULL
#define penumbra_core_component_dex_v1_LiquidityPositionByIdRequest_position_id_MSGTYPE \
    penumbra_core_component_dex_v1_PositionId

#define penumbra_core_component_dex_v1_LiquidityPositionByIdResponse_FIELDLIST(X, a) X(a, STATIC, OPTIONAL, MESSAGE, data, 1)
#define penumbra_core_component_dex_v1_LiquidityPositionByIdResponse_CALLBACK NULL
#define penumbra_core_component_dex_v1_LiquidityPositionByIdResponse_DEFAULT NULL
#define penumbra_core_component_dex_v1_LiquidityPositionByIdResponse_data_MSGTYPE penumbra_core_component_dex_v1_Position

#define penumbra_core_component_dex_v1_LiquidityPositionsByIdRequest_FIELDLIST(X, a) \
    X(a, CALLBACK, REPEATED, MESSAGE, position_id, 2)
#define penumbra_core_component_dex_v1_LiquidityPositionsByIdRequest_CALLBACK pb_default_field_callback
#define penumbra_core_component_dex_v1_LiquidityPositionsByIdRequest_DEFAULT NULL
#define penumbra_core_component_dex_v1_LiquidityPositionsByIdRequest_position_id_MSGTYPE \
    penumbra_core_component_dex_v1_PositionId

#define penumbra_core_component_dex_v1_LiquidityPositionsByIdResponse_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, data, 1)
#define penumbra_core_component_dex_v1_LiquidityPositionsByIdResponse_CALLBACK NULL
#define penumbra_core_component_dex_v1_LiquidityPositionsByIdResponse_DEFAULT NULL
#define penumbra_core_component_dex_v1_LiquidityPositionsByIdResponse_data_MSGTYPE penumbra_core_component_dex_v1_Position

#define penumbra_core_component_dex_v1_LiquidityPositionsByPriceRequest_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, trading_pair, 2)                                    \
    X(a, STATIC, SINGULAR, UINT64, limit, 5)
#define penumbra_core_component_dex_v1_LiquidityPositionsByPriceRequest_CALLBACK NULL
#define penumbra_core_component_dex_v1_LiquidityPositionsByPriceRequest_DEFAULT NULL
#define penumbra_core_component_dex_v1_LiquidityPositionsByPriceRequest_trading_pair_MSGTYPE \
    penumbra_core_component_dex_v1_DirectedTradingPair

#define penumbra_core_component_dex_v1_LiquidityPositionsByPriceResponse_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, data, 1)                                             \
    X(a, STATIC, OPTIONAL, MESSAGE, id, 2)
#define penumbra_core_component_dex_v1_LiquidityPositionsByPriceResponse_CALLBACK NULL
#define penumbra_core_component_dex_v1_LiquidityPositionsByPriceResponse_DEFAULT NULL
#define penumbra_core_component_dex_v1_LiquidityPositionsByPriceResponse_data_MSGTYPE penumbra_core_component_dex_v1_Position
#define penumbra_core_component_dex_v1_LiquidityPositionsByPriceResponse_id_MSGTYPE penumbra_core_component_dex_v1_PositionId

#define penumbra_core_component_dex_v1_SpreadRequest_FIELDLIST(X, a) X(a, STATIC, OPTIONAL, MESSAGE, trading_pair, 2)
#define penumbra_core_component_dex_v1_SpreadRequest_CALLBACK NULL
#define penumbra_core_component_dex_v1_SpreadRequest_DEFAULT NULL
#define penumbra_core_component_dex_v1_SpreadRequest_trading_pair_MSGTYPE penumbra_core_component_dex_v1_TradingPair

#define penumbra_core_component_dex_v1_SpreadResponse_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, best_1_to_2_position, 1)          \
    X(a, STATIC, OPTIONAL, MESSAGE, best_2_to_1_position, 2)          \
    X(a, STATIC, SINGULAR, DOUBLE, approx_effective_price_1_to_2, 3)  \
    X(a, STATIC, SINGULAR, DOUBLE, approx_effective_price_2_to_1, 4)
#define penumbra_core_component_dex_v1_SpreadResponse_CALLBACK NULL
#define penumbra_core_component_dex_v1_SpreadResponse_DEFAULT NULL
#define penumbra_core_component_dex_v1_SpreadResponse_best_1_to_2_position_MSGTYPE penumbra_core_component_dex_v1_Position
#define penumbra_core_component_dex_v1_SpreadResponse_best_2_to_1_position_MSGTYPE penumbra_core_component_dex_v1_Position

#define penumbra_core_component_dex_v1_SimulateTradeRequest_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, input, 1)                               \
    X(a, STATIC, OPTIONAL, MESSAGE, output, 2)                              \
    X(a, STATIC, OPTIONAL, MESSAGE, routing, 3)
#define penumbra_core_component_dex_v1_SimulateTradeRequest_CALLBACK NULL
#define penumbra_core_component_dex_v1_SimulateTradeRequest_DEFAULT NULL
#define penumbra_core_component_dex_v1_SimulateTradeRequest_input_MSGTYPE penumbra_core_asset_v1_Value
#define penumbra_core_component_dex_v1_SimulateTradeRequest_output_MSGTYPE penumbra_core_asset_v1_AssetId
#define penumbra_core_component_dex_v1_SimulateTradeRequest_routing_MSGTYPE \
    penumbra_core_component_dex_v1_SimulateTradeRequest_Routing

#define penumbra_core_component_dex_v1_SimulateTradeRequest_Routing_FIELDLIST(X, a) \
    X(a, STATIC, ONEOF, MESSAGE, (setting, default_, setting.default_), 1)          \
    X(a, STATIC, ONEOF, MESSAGE, (setting, single_hop, setting.single_hop), 2)
#define penumbra_core_component_dex_v1_SimulateTradeRequest_Routing_CALLBACK NULL
#define penumbra_core_component_dex_v1_SimulateTradeRequest_Routing_DEFAULT NULL
#define penumbra_core_component_dex_v1_SimulateTradeRequest_Routing_setting_default__MSGTYPE \
    penumbra_core_component_dex_v1_SimulateTradeRequest_Routing_Default
#define penumbra_core_component_dex_v1_SimulateTradeRequest_Routing_setting_single_hop_MSGTYPE \
    penumbra_core_component_dex_v1_SimulateTradeRequest_Routing_SingleHop

#define penumbra_core_component_dex_v1_SimulateTradeRequest_Routing_SingleHop_FIELDLIST(X, a)

#define penumbra_core_component_dex_v1_SimulateTradeRequest_Routing_SingleHop_CALLBACK NULL
#define penumbra_core_component_dex_v1_SimulateTradeRequest_Routing_SingleHop_DEFAULT NULL

#define penumbra_core_component_dex_v1_SimulateTradeRequest_Routing_Default_FIELDLIST(X, a)

#define penumbra_core_component_dex_v1_SimulateTradeRequest_Routing_Default_CALLBACK NULL
#define penumbra_core_component_dex_v1_SimulateTradeRequest_Routing_Default_DEFAULT NULL

#define penumbra_core_component_dex_v1_SimulateTradeResponse_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, output, 1)                               \
    X(a, STATIC, OPTIONAL, MESSAGE, unfilled, 2)
#define penumbra_core_component_dex_v1_SimulateTradeResponse_CALLBACK NULL
#define penumbra_core_component_dex_v1_SimulateTradeResponse_DEFAULT NULL
#define penumbra_core_component_dex_v1_SimulateTradeResponse_output_MSGTYPE penumbra_core_component_dex_v1_SwapExecution
#define penumbra_core_component_dex_v1_SimulateTradeResponse_unfilled_MSGTYPE penumbra_core_asset_v1_Value

#define penumbra_core_component_dex_v1_EventSwap_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, trading_pair, 1)             \
    X(a, STATIC, OPTIONAL, MESSAGE, delta_1_i, 2)                \
    X(a, STATIC, OPTIONAL, MESSAGE, delta_2_i, 3)                \
    X(a, STATIC, OPTIONAL, MESSAGE, swap_commitment, 4)
#define penumbra_core_component_dex_v1_EventSwap_CALLBACK NULL
#define penumbra_core_component_dex_v1_EventSwap_DEFAULT NULL
#define penumbra_core_component_dex_v1_EventSwap_trading_pair_MSGTYPE penumbra_core_component_dex_v1_TradingPair
#define penumbra_core_component_dex_v1_EventSwap_delta_1_i_MSGTYPE penumbra_core_num_v1_Amount
#define penumbra_core_component_dex_v1_EventSwap_delta_2_i_MSGTYPE penumbra_core_num_v1_Amount
#define penumbra_core_component_dex_v1_EventSwap_swap_commitment_MSGTYPE penumbra_crypto_tct_v1_StateCommitment

#define penumbra_core_component_dex_v1_EventSwapClaim_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, trading_pair, 1)                  \
    X(a, STATIC, OPTIONAL, MESSAGE, output_1_commitment, 2)           \
    X(a, STATIC, OPTIONAL, MESSAGE, output_2_commitment, 3)           \
    X(a, STATIC, OPTIONAL, MESSAGE, nullifier, 4)
#define penumbra_core_component_dex_v1_EventSwapClaim_CALLBACK NULL
#define penumbra_core_component_dex_v1_EventSwapClaim_DEFAULT NULL
#define penumbra_core_component_dex_v1_EventSwapClaim_trading_pair_MSGTYPE penumbra_core_component_dex_v1_TradingPair
#define penumbra_core_component_dex_v1_EventSwapClaim_output_1_commitment_MSGTYPE penumbra_crypto_tct_v1_StateCommitment
#define penumbra_core_component_dex_v1_EventSwapClaim_output_2_commitment_MSGTYPE penumbra_crypto_tct_v1_StateCommitment
#define penumbra_core_component_dex_v1_EventSwapClaim_nullifier_MSGTYPE penumbra_core_component_sct_v1_Nullifier

#define penumbra_core_component_dex_v1_EventPositionOpen_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, position_id, 1)                      \
    X(a, STATIC, OPTIONAL, MESSAGE, trading_pair, 2)                     \
    X(a, STATIC, OPTIONAL, MESSAGE, reserves_1, 3)                       \
    X(a, STATIC, OPTIONAL, MESSAGE, reserves_2, 4)                       \
    X(a, STATIC, SINGULAR, UINT32, trading_fee, 5)                       \
    X(a, STATIC, OPTIONAL, MESSAGE, position, 6)
#define penumbra_core_component_dex_v1_EventPositionOpen_CALLBACK NULL
#define penumbra_core_component_dex_v1_EventPositionOpen_DEFAULT NULL
#define penumbra_core_component_dex_v1_EventPositionOpen_position_id_MSGTYPE penumbra_core_component_dex_v1_PositionId
#define penumbra_core_component_dex_v1_EventPositionOpen_trading_pair_MSGTYPE penumbra_core_component_dex_v1_TradingPair
#define penumbra_core_component_dex_v1_EventPositionOpen_reserves_1_MSGTYPE penumbra_core_num_v1_Amount
#define penumbra_core_component_dex_v1_EventPositionOpen_reserves_2_MSGTYPE penumbra_core_num_v1_Amount
#define penumbra_core_component_dex_v1_EventPositionOpen_position_MSGTYPE penumbra_core_component_dex_v1_Position

#define penumbra_core_component_dex_v1_EventPositionClose_FIELDLIST(X, a) X(a, STATIC, OPTIONAL, MESSAGE, position_id, 1)
#define penumbra_core_component_dex_v1_EventPositionClose_CALLBACK NULL
#define penumbra_core_component_dex_v1_EventPositionClose_DEFAULT NULL
#define penumbra_core_component_dex_v1_EventPositionClose_position_id_MSGTYPE penumbra_core_component_dex_v1_PositionId

#define penumbra_core_component_dex_v1_EventQueuePositionClose_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, position_id, 1)
#define penumbra_core_component_dex_v1_EventQueuePositionClose_CALLBACK NULL
#define penumbra_core_component_dex_v1_EventQueuePositionClose_DEFAULT NULL
#define penumbra_core_component_dex_v1_EventQueuePositionClose_position_id_MSGTYPE penumbra_core_component_dex_v1_PositionId

#define penumbra_core_component_dex_v1_EventPositionWithdraw_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, position_id, 1)                          \
    X(a, STATIC, OPTIONAL, MESSAGE, trading_pair, 2)                         \
    X(a, STATIC, OPTIONAL, MESSAGE, reserves_1, 3)                           \
    X(a, STATIC, OPTIONAL, MESSAGE, reserves_2, 4)                           \
    X(a, STATIC, SINGULAR, UINT64, sequence, 5)
#define penumbra_core_component_dex_v1_EventPositionWithdraw_CALLBACK NULL
#define penumbra_core_component_dex_v1_EventPositionWithdraw_DEFAULT NULL
#define penumbra_core_component_dex_v1_EventPositionWithdraw_position_id_MSGTYPE penumbra_core_component_dex_v1_PositionId
#define penumbra_core_component_dex_v1_EventPositionWithdraw_trading_pair_MSGTYPE penumbra_core_component_dex_v1_TradingPair
#define penumbra_core_component_dex_v1_EventPositionWithdraw_reserves_1_MSGTYPE penumbra_core_num_v1_Amount
#define penumbra_core_component_dex_v1_EventPositionWithdraw_reserves_2_MSGTYPE penumbra_core_num_v1_Amount

#define penumbra_core_component_dex_v1_EventPositionExecution_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, position_id, 1)                           \
    X(a, STATIC, OPTIONAL, MESSAGE, trading_pair, 2)                          \
    X(a, STATIC, OPTIONAL, MESSAGE, reserves_1, 3)                            \
    X(a, STATIC, OPTIONAL, MESSAGE, reserves_2, 4)                            \
    X(a, STATIC, OPTIONAL, MESSAGE, prev_reserves_1, 5)                       \
    X(a, STATIC, OPTIONAL, MESSAGE, prev_reserves_2, 6)                       \
    X(a, STATIC, OPTIONAL, MESSAGE, context, 7)
#define penumbra_core_component_dex_v1_EventPositionExecution_CALLBACK NULL
#define penumbra_core_component_dex_v1_EventPositionExecution_DEFAULT NULL
#define penumbra_core_component_dex_v1_EventPositionExecution_position_id_MSGTYPE penumbra_core_component_dex_v1_PositionId
#define penumbra_core_component_dex_v1_EventPositionExecution_trading_pair_MSGTYPE penumbra_core_component_dex_v1_TradingPair
#define penumbra_core_component_dex_v1_EventPositionExecution_reserves_1_MSGTYPE penumbra_core_num_v1_Amount
#define penumbra_core_component_dex_v1_EventPositionExecution_reserves_2_MSGTYPE penumbra_core_num_v1_Amount
#define penumbra_core_component_dex_v1_EventPositionExecution_prev_reserves_1_MSGTYPE penumbra_core_num_v1_Amount
#define penumbra_core_component_dex_v1_EventPositionExecution_prev_reserves_2_MSGTYPE penumbra_core_num_v1_Amount
#define penumbra_core_component_dex_v1_EventPositionExecution_context_MSGTYPE \
    penumbra_core_component_dex_v1_DirectedTradingPair

#define penumbra_core_component_dex_v1_EventBatchSwap_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, batch_swap_output_data, 1)        \
    X(a, STATIC, OPTIONAL, MESSAGE, swap_execution_1_for_2, 2)        \
    X(a, STATIC, OPTIONAL, MESSAGE, swap_execution_2_for_1, 3)
#define penumbra_core_component_dex_v1_EventBatchSwap_CALLBACK NULL
#define penumbra_core_component_dex_v1_EventBatchSwap_DEFAULT NULL
#define penumbra_core_component_dex_v1_EventBatchSwap_batch_swap_output_data_MSGTYPE \
    penumbra_core_component_dex_v1_BatchSwapOutputData
#define penumbra_core_component_dex_v1_EventBatchSwap_swap_execution_1_for_2_MSGTYPE \
    penumbra_core_component_dex_v1_SwapExecution
#define penumbra_core_component_dex_v1_EventBatchSwap_swap_execution_2_for_1_MSGTYPE \
    penumbra_core_component_dex_v1_SwapExecution

#define penumbra_core_component_dex_v1_EventArbExecution_FIELDLIST(X, a) \
    X(a, STATIC, SINGULAR, UINT64, height, 1)                            \
    X(a, STATIC, OPTIONAL, MESSAGE, swap_execution, 2)
#define penumbra_core_component_dex_v1_EventArbExecution_CALLBACK NULL
#define penumbra_core_component_dex_v1_EventArbExecution_DEFAULT NULL
#define penumbra_core_component_dex_v1_EventArbExecution_swap_execution_MSGTYPE penumbra_core_component_dex_v1_SwapExecution

#define penumbra_core_component_dex_v1_EventValueCircuitBreakerCredit_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, asset_id, 1)                                      \
    X(a, STATIC, OPTIONAL, MESSAGE, previous_balance, 2)                              \
    X(a, STATIC, OPTIONAL, MESSAGE, new_balance, 3)
#define penumbra_core_component_dex_v1_EventValueCircuitBreakerCredit_CALLBACK NULL
#define penumbra_core_component_dex_v1_EventValueCircuitBreakerCredit_DEFAULT NULL
#define penumbra_core_component_dex_v1_EventValueCircuitBreakerCredit_asset_id_MSGTYPE penumbra_core_asset_v1_AssetId
#define penumbra_core_component_dex_v1_EventValueCircuitBreakerCredit_previous_balance_MSGTYPE penumbra_core_num_v1_Amount
#define penumbra_core_component_dex_v1_EventValueCircuitBreakerCredit_new_balance_MSGTYPE penumbra_core_num_v1_Amount

#define penumbra_core_component_dex_v1_EventValueCircuitBreakerDebit_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, asset_id, 1)                                     \
    X(a, STATIC, OPTIONAL, MESSAGE, previous_balance, 2)                             \
    X(a, STATIC, OPTIONAL, MESSAGE, new_balance, 3)
#define penumbra_core_component_dex_v1_EventValueCircuitBreakerDebit_CALLBACK NULL
#define penumbra_core_component_dex_v1_EventValueCircuitBreakerDebit_DEFAULT NULL
#define penumbra_core_component_dex_v1_EventValueCircuitBreakerDebit_asset_id_MSGTYPE penumbra_core_asset_v1_AssetId
#define penumbra_core_component_dex_v1_EventValueCircuitBreakerDebit_previous_balance_MSGTYPE penumbra_core_num_v1_Amount
#define penumbra_core_component_dex_v1_EventValueCircuitBreakerDebit_new_balance_MSGTYPE penumbra_core_num_v1_Amount

#define penumbra_core_component_dex_v1_DexParameters_FIELDLIST(X, a) \
    X(a, STATIC, SINGULAR, BOOL, is_enabled, 1)                      \
    X(a, CALLBACK, REPEATED, MESSAGE, fixed_candidates, 2)           \
    X(a, STATIC, SINGULAR, UINT32, max_hops, 3)                      \
    X(a, STATIC, SINGULAR, UINT32, max_positions_per_pair, 4)        \
    X(a, STATIC, SINGULAR, UINT32, max_execution_budget, 5)
#define penumbra_core_component_dex_v1_DexParameters_CALLBACK pb_default_field_callback
#define penumbra_core_component_dex_v1_DexParameters_DEFAULT NULL
#define penumbra_core_component_dex_v1_DexParameters_fixed_candidates_MSGTYPE penumbra_core_asset_v1_AssetId

#define penumbra_core_component_dex_v1_GenesisContent_FIELDLIST(X, a) X(a, STATIC, OPTIONAL, MESSAGE, dex_params, 1)
#define penumbra_core_component_dex_v1_GenesisContent_CALLBACK NULL
#define penumbra_core_component_dex_v1_GenesisContent_DEFAULT NULL
#define penumbra_core_component_dex_v1_GenesisContent_dex_params_MSGTYPE penumbra_core_component_dex_v1_DexParameters

#define penumbra_core_component_dex_v1_CandlestickData_FIELDLIST(X, a) \
    X(a, STATIC, SINGULAR, UINT64, height, 1)                          \
    X(a, STATIC, SINGULAR, DOUBLE, open, 2)                            \
    X(a, STATIC, SINGULAR, DOUBLE, close, 3)                           \
    X(a, STATIC, SINGULAR, DOUBLE, high, 4)                            \
    X(a, STATIC, SINGULAR, DOUBLE, low, 5)                             \
    X(a, STATIC, SINGULAR, DOUBLE, direct_volume, 6)                   \
    X(a, STATIC, SINGULAR, DOUBLE, swap_volume, 7)
#define penumbra_core_component_dex_v1_CandlestickData_CALLBACK NULL
#define penumbra_core_component_dex_v1_CandlestickData_DEFAULT NULL

#define penumbra_core_component_dex_v1_CandlestickDataRequest_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, pair, 1)                                  \
    X(a, STATIC, SINGULAR, UINT64, limit, 2)                                  \
    X(a, STATIC, SINGULAR, UINT64, start_height, 3)
#define penumbra_core_component_dex_v1_CandlestickDataRequest_CALLBACK NULL
#define penumbra_core_component_dex_v1_CandlestickDataRequest_DEFAULT NULL
#define penumbra_core_component_dex_v1_CandlestickDataRequest_pair_MSGTYPE penumbra_core_component_dex_v1_DirectedTradingPair

#define penumbra_core_component_dex_v1_CandlestickDataResponse_FIELDLIST(X, a) X(a, CALLBACK, REPEATED, MESSAGE, data, 1)
#define penumbra_core_component_dex_v1_CandlestickDataResponse_CALLBACK pb_default_field_callback
#define penumbra_core_component_dex_v1_CandlestickDataResponse_DEFAULT NULL
#define penumbra_core_component_dex_v1_CandlestickDataResponse_data_MSGTYPE penumbra_core_component_dex_v1_CandlestickData

#define penumbra_core_component_dex_v1_CandlestickDataStreamRequest_FIELDLIST(X, a) X(a, STATIC, OPTIONAL, MESSAGE, pair, 1)
#define penumbra_core_component_dex_v1_CandlestickDataStreamRequest_CALLBACK NULL
#define penumbra_core_component_dex_v1_CandlestickDataStreamRequest_DEFAULT NULL
#define penumbra_core_component_dex_v1_CandlestickDataStreamRequest_pair_MSGTYPE \
    penumbra_core_component_dex_v1_DirectedTradingPair

#define penumbra_core_component_dex_v1_CandlestickDataStreamResponse_FIELDLIST(X, a) X(a, STATIC, OPTIONAL, MESSAGE, data, 1)
#define penumbra_core_component_dex_v1_CandlestickDataStreamResponse_CALLBACK NULL
#define penumbra_core_component_dex_v1_CandlestickDataStreamResponse_DEFAULT NULL
#define penumbra_core_component_dex_v1_CandlestickDataStreamResponse_data_MSGTYPE \
    penumbra_core_component_dex_v1_CandlestickData

extern const pb_msgdesc_t penumbra_core_component_dex_v1_ZKSwapProof_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_ZKSwapClaimProof_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_Swap_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_SwapClaim_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_SwapClaimBody_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_SwapBody_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_SwapPayload_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_SwapPlaintext_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_SwapPlan_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_SwapClaimPlan_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_SwapView_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_SwapView_Visible_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_SwapView_Opaque_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_SwapClaimView_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_SwapClaimView_Visible_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_SwapClaimView_Opaque_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_TradingPair_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_DirectedTradingPair_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_BatchSwapOutputData_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_TradingFunction_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_BareTradingFunction_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_Reserves_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_Position_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_PositionId_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_PositionState_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_LpNft_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_PositionOpen_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_PositionClose_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_PositionWithdraw_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_PositionRewardClaim_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_SwapExecution_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_SwapExecution_Trace_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_PositionWithdrawPlan_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_PositionRewardClaimPlan_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_BatchSwapOutputDataRequest_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_BatchSwapOutputDataResponse_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_SwapExecutionRequest_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_SwapExecutionResponse_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_ArbExecutionRequest_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_ArbExecutionResponse_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_SwapExecutionsRequest_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_SwapExecutionsResponse_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_ArbExecutionsRequest_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_ArbExecutionsResponse_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_LiquidityPositionsRequest_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_LiquidityPositionsResponse_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_LiquidityPositionByIdRequest_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_LiquidityPositionByIdResponse_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_LiquidityPositionsByIdRequest_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_LiquidityPositionsByIdResponse_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_LiquidityPositionsByPriceRequest_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_LiquidityPositionsByPriceResponse_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_SpreadRequest_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_SpreadResponse_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_SimulateTradeRequest_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_SimulateTradeRequest_Routing_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_SimulateTradeRequest_Routing_SingleHop_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_SimulateTradeRequest_Routing_Default_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_SimulateTradeResponse_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_EventSwap_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_EventSwapClaim_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_EventPositionOpen_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_EventPositionClose_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_EventQueuePositionClose_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_EventPositionWithdraw_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_EventPositionExecution_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_EventBatchSwap_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_EventArbExecution_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_EventValueCircuitBreakerCredit_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_EventValueCircuitBreakerDebit_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_DexParameters_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_GenesisContent_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_CandlestickData_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_CandlestickDataRequest_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_CandlestickDataResponse_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_CandlestickDataStreamRequest_msg;
extern const pb_msgdesc_t penumbra_core_component_dex_v1_CandlestickDataStreamResponse_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define penumbra_core_component_dex_v1_ZKSwapProof_fields &penumbra_core_component_dex_v1_ZKSwapProof_msg
#define penumbra_core_component_dex_v1_ZKSwapClaimProof_fields &penumbra_core_component_dex_v1_ZKSwapClaimProof_msg
#define penumbra_core_component_dex_v1_Swap_fields &penumbra_core_component_dex_v1_Swap_msg
#define penumbra_core_component_dex_v1_SwapClaim_fields &penumbra_core_component_dex_v1_SwapClaim_msg
#define penumbra_core_component_dex_v1_SwapClaimBody_fields &penumbra_core_component_dex_v1_SwapClaimBody_msg
#define penumbra_core_component_dex_v1_SwapBody_fields &penumbra_core_component_dex_v1_SwapBody_msg
#define penumbra_core_component_dex_v1_SwapPayload_fields &penumbra_core_component_dex_v1_SwapPayload_msg
#define penumbra_core_component_dex_v1_SwapPlaintext_fields &penumbra_core_component_dex_v1_SwapPlaintext_msg
#define penumbra_core_component_dex_v1_SwapPlan_fields &penumbra_core_component_dex_v1_SwapPlan_msg
#define penumbra_core_component_dex_v1_SwapClaimPlan_fields &penumbra_core_component_dex_v1_SwapClaimPlan_msg
#define penumbra_core_component_dex_v1_SwapView_fields &penumbra_core_component_dex_v1_SwapView_msg
#define penumbra_core_component_dex_v1_SwapView_Visible_fields &penumbra_core_component_dex_v1_SwapView_Visible_msg
#define penumbra_core_component_dex_v1_SwapView_Opaque_fields &penumbra_core_component_dex_v1_SwapView_Opaque_msg
#define penumbra_core_component_dex_v1_SwapClaimView_fields &penumbra_core_component_dex_v1_SwapClaimView_msg
#define penumbra_core_component_dex_v1_SwapClaimView_Visible_fields &penumbra_core_component_dex_v1_SwapClaimView_Visible_msg
#define penumbra_core_component_dex_v1_SwapClaimView_Opaque_fields &penumbra_core_component_dex_v1_SwapClaimView_Opaque_msg
#define penumbra_core_component_dex_v1_TradingPair_fields &penumbra_core_component_dex_v1_TradingPair_msg
#define penumbra_core_component_dex_v1_DirectedTradingPair_fields &penumbra_core_component_dex_v1_DirectedTradingPair_msg
#define penumbra_core_component_dex_v1_BatchSwapOutputData_fields &penumbra_core_component_dex_v1_BatchSwapOutputData_msg
#define penumbra_core_component_dex_v1_TradingFunction_fields &penumbra_core_component_dex_v1_TradingFunction_msg
#define penumbra_core_component_dex_v1_BareTradingFunction_fields &penumbra_core_component_dex_v1_BareTradingFunction_msg
#define penumbra_core_component_dex_v1_Reserves_fields &penumbra_core_component_dex_v1_Reserves_msg
#define penumbra_core_component_dex_v1_Position_fields &penumbra_core_component_dex_v1_Position_msg
#define penumbra_core_component_dex_v1_PositionId_fields &penumbra_core_component_dex_v1_PositionId_msg
#define penumbra_core_component_dex_v1_PositionState_fields &penumbra_core_component_dex_v1_PositionState_msg
#define penumbra_core_component_dex_v1_LpNft_fields &penumbra_core_component_dex_v1_LpNft_msg
#define penumbra_core_component_dex_v1_PositionOpen_fields &penumbra_core_component_dex_v1_PositionOpen_msg
#define penumbra_core_component_dex_v1_PositionClose_fields &penumbra_core_component_dex_v1_PositionClose_msg
#define penumbra_core_component_dex_v1_PositionWithdraw_fields &penumbra_core_component_dex_v1_PositionWithdraw_msg
#define penumbra_core_component_dex_v1_PositionRewardClaim_fields &penumbra_core_component_dex_v1_PositionRewardClaim_msg
#define penumbra_core_component_dex_v1_SwapExecution_fields &penumbra_core_component_dex_v1_SwapExecution_msg
#define penumbra_core_component_dex_v1_SwapExecution_Trace_fields &penumbra_core_component_dex_v1_SwapExecution_Trace_msg
#define penumbra_core_component_dex_v1_PositionWithdrawPlan_fields &penumbra_core_component_dex_v1_PositionWithdrawPlan_msg
#define penumbra_core_component_dex_v1_PositionRewardClaimPlan_fields \
    &penumbra_core_component_dex_v1_PositionRewardClaimPlan_msg
#define penumbra_core_component_dex_v1_BatchSwapOutputDataRequest_fields \
    &penumbra_core_component_dex_v1_BatchSwapOutputDataRequest_msg
#define penumbra_core_component_dex_v1_BatchSwapOutputDataResponse_fields \
    &penumbra_core_component_dex_v1_BatchSwapOutputDataResponse_msg
#define penumbra_core_component_dex_v1_SwapExecutionRequest_fields &penumbra_core_component_dex_v1_SwapExecutionRequest_msg
#define penumbra_core_component_dex_v1_SwapExecutionResponse_fields &penumbra_core_component_dex_v1_SwapExecutionResponse_msg
#define penumbra_core_component_dex_v1_ArbExecutionRequest_fields &penumbra_core_component_dex_v1_ArbExecutionRequest_msg
#define penumbra_core_component_dex_v1_ArbExecutionResponse_fields &penumbra_core_component_dex_v1_ArbExecutionResponse_msg
#define penumbra_core_component_dex_v1_SwapExecutionsRequest_fields &penumbra_core_component_dex_v1_SwapExecutionsRequest_msg
#define penumbra_core_component_dex_v1_SwapExecutionsResponse_fields \
    &penumbra_core_component_dex_v1_SwapExecutionsResponse_msg
#define penumbra_core_component_dex_v1_ArbExecutionsRequest_fields &penumbra_core_component_dex_v1_ArbExecutionsRequest_msg
#define penumbra_core_component_dex_v1_ArbExecutionsResponse_fields &penumbra_core_component_dex_v1_ArbExecutionsResponse_msg
#define penumbra_core_component_dex_v1_LiquidityPositionsRequest_fields \
    &penumbra_core_component_dex_v1_LiquidityPositionsRequest_msg
#define penumbra_core_component_dex_v1_LiquidityPositionsResponse_fields \
    &penumbra_core_component_dex_v1_LiquidityPositionsResponse_msg
#define penumbra_core_component_dex_v1_LiquidityPositionByIdRequest_fields \
    &penumbra_core_component_dex_v1_LiquidityPositionByIdRequest_msg
#define penumbra_core_component_dex_v1_LiquidityPositionByIdResponse_fields \
    &penumbra_core_component_dex_v1_LiquidityPositionByIdResponse_msg
#define penumbra_core_component_dex_v1_LiquidityPositionsByIdRequest_fields \
    &penumbra_core_component_dex_v1_LiquidityPositionsByIdRequest_msg
#define penumbra_core_component_dex_v1_LiquidityPositionsByIdResponse_fields \
    &penumbra_core_component_dex_v1_LiquidityPositionsByIdResponse_msg
#define penumbra_core_component_dex_v1_LiquidityPositionsByPriceRequest_fields \
    &penumbra_core_component_dex_v1_LiquidityPositionsByPriceRequest_msg
#define penumbra_core_component_dex_v1_LiquidityPositionsByPriceResponse_fields \
    &penumbra_core_component_dex_v1_LiquidityPositionsByPriceResponse_msg
#define penumbra_core_component_dex_v1_SpreadRequest_fields &penumbra_core_component_dex_v1_SpreadRequest_msg
#define penumbra_core_component_dex_v1_SpreadResponse_fields &penumbra_core_component_dex_v1_SpreadResponse_msg
#define penumbra_core_component_dex_v1_SimulateTradeRequest_fields &penumbra_core_component_dex_v1_SimulateTradeRequest_msg
#define penumbra_core_component_dex_v1_SimulateTradeRequest_Routing_fields \
    &penumbra_core_component_dex_v1_SimulateTradeRequest_Routing_msg
#define penumbra_core_component_dex_v1_SimulateTradeRequest_Routing_SingleHop_fields \
    &penumbra_core_component_dex_v1_SimulateTradeRequest_Routing_SingleHop_msg
#define penumbra_core_component_dex_v1_SimulateTradeRequest_Routing_Default_fields \
    &penumbra_core_component_dex_v1_SimulateTradeRequest_Routing_Default_msg
#define penumbra_core_component_dex_v1_SimulateTradeResponse_fields &penumbra_core_component_dex_v1_SimulateTradeResponse_msg
#define penumbra_core_component_dex_v1_EventSwap_fields &penumbra_core_component_dex_v1_EventSwap_msg
#define penumbra_core_component_dex_v1_EventSwapClaim_fields &penumbra_core_component_dex_v1_EventSwapClaim_msg
#define penumbra_core_component_dex_v1_EventPositionOpen_fields &penumbra_core_component_dex_v1_EventPositionOpen_msg
#define penumbra_core_component_dex_v1_EventPositionClose_fields &penumbra_core_component_dex_v1_EventPositionClose_msg
#define penumbra_core_component_dex_v1_EventQueuePositionClose_fields \
    &penumbra_core_component_dex_v1_EventQueuePositionClose_msg
#define penumbra_core_component_dex_v1_EventPositionWithdraw_fields &penumbra_core_component_dex_v1_EventPositionWithdraw_msg
#define penumbra_core_component_dex_v1_EventPositionExecution_fields \
    &penumbra_core_component_dex_v1_EventPositionExecution_msg
#define penumbra_core_component_dex_v1_EventBatchSwap_fields &penumbra_core_component_dex_v1_EventBatchSwap_msg
#define penumbra_core_component_dex_v1_EventArbExecution_fields &penumbra_core_component_dex_v1_EventArbExecution_msg
#define penumbra_core_component_dex_v1_EventValueCircuitBreakerCredit_fields \
    &penumbra_core_component_dex_v1_EventValueCircuitBreakerCredit_msg
#define penumbra_core_component_dex_v1_EventValueCircuitBreakerDebit_fields \
    &penumbra_core_component_dex_v1_EventValueCircuitBreakerDebit_msg
#define penumbra_core_component_dex_v1_DexParameters_fields &penumbra_core_component_dex_v1_DexParameters_msg
#define penumbra_core_component_dex_v1_GenesisContent_fields &penumbra_core_component_dex_v1_GenesisContent_msg
#define penumbra_core_component_dex_v1_CandlestickData_fields &penumbra_core_component_dex_v1_CandlestickData_msg
#define penumbra_core_component_dex_v1_CandlestickDataRequest_fields \
    &penumbra_core_component_dex_v1_CandlestickDataRequest_msg
#define penumbra_core_component_dex_v1_CandlestickDataResponse_fields \
    &penumbra_core_component_dex_v1_CandlestickDataResponse_msg
#define penumbra_core_component_dex_v1_CandlestickDataStreamRequest_fields \
    &penumbra_core_component_dex_v1_CandlestickDataStreamRequest_msg
#define penumbra_core_component_dex_v1_CandlestickDataStreamResponse_fields \
    &penumbra_core_component_dex_v1_CandlestickDataStreamResponse_msg

/* Maximum encoded size of messages (where known) */
/* penumbra_core_component_dex_v1_ZKSwapProof_size depends on runtime parameters */
/* penumbra_core_component_dex_v1_ZKSwapClaimProof_size depends on runtime parameters */
/* penumbra_core_component_dex_v1_Swap_size depends on runtime parameters */
/* penumbra_core_component_dex_v1_SwapClaim_size depends on runtime parameters */
/* penumbra_core_component_dex_v1_SwapBody_size depends on runtime parameters */
/* penumbra_core_component_dex_v1_SwapPayload_size depends on runtime parameters */
/* penumbra_core_component_dex_v1_SwapPlaintext_size depends on runtime parameters */
/* penumbra_core_component_dex_v1_SwapPlan_size depends on runtime parameters */
/* penumbra_core_component_dex_v1_SwapClaimPlan_size depends on runtime parameters */
/* penumbra_core_component_dex_v1_SwapView_size depends on runtime parameters */
/* penumbra_core_component_dex_v1_SwapView_Visible_size depends on runtime parameters */
/* penumbra_core_component_dex_v1_SwapView_Opaque_size depends on runtime parameters */
/* penumbra_core_component_dex_v1_SwapClaimView_size depends on runtime parameters */
/* penumbra_core_component_dex_v1_SwapClaimView_Visible_size depends on runtime parameters */
/* penumbra_core_component_dex_v1_SwapClaimView_Opaque_size depends on runtime parameters */
/* penumbra_core_component_dex_v1_Position_size depends on runtime parameters */
/* penumbra_core_component_dex_v1_PositionId_size depends on runtime parameters */
/* penumbra_core_component_dex_v1_LpNft_size depends on runtime parameters */
/* penumbra_core_component_dex_v1_PositionOpen_size depends on runtime parameters */
/* penumbra_core_component_dex_v1_PositionClose_size depends on runtime parameters */
/* penumbra_core_component_dex_v1_PositionWithdraw_size depends on runtime parameters */
/* penumbra_core_component_dex_v1_PositionRewardClaim_size depends on runtime parameters */
/* penumbra_core_component_dex_v1_SwapExecution_size depends on runtime parameters */
/* penumbra_core_component_dex_v1_SwapExecution_Trace_size depends on runtime parameters */
/* penumbra_core_component_dex_v1_PositionWithdrawPlan_size depends on runtime parameters */
/* penumbra_core_component_dex_v1_SwapExecutionResponse_size depends on runtime parameters */
/* penumbra_core_component_dex_v1_ArbExecutionResponse_size depends on runtime parameters */
/* penumbra_core_component_dex_v1_SwapExecutionsResponse_size depends on runtime parameters */
/* penumbra_core_component_dex_v1_ArbExecutionsResponse_size depends on runtime parameters */
/* penumbra_core_component_dex_v1_LiquidityPositionsResponse_size depends on runtime parameters */
/* penumbra_core_component_dex_v1_LiquidityPositionByIdRequest_size depends on runtime parameters */
/* penumbra_core_component_dex_v1_LiquidityPositionByIdResponse_size depends on runtime parameters */
/* penumbra_core_component_dex_v1_LiquidityPositionsByIdRequest_size depends on runtime parameters */
/* penumbra_core_component_dex_v1_LiquidityPositionsByIdResponse_size depends on runtime parameters */
/* penumbra_core_component_dex_v1_LiquidityPositionsByPriceResponse_size depends on runtime parameters */
/* penumbra_core_component_dex_v1_SpreadResponse_size depends on runtime parameters */
/* penumbra_core_component_dex_v1_SimulateTradeResponse_size depends on runtime parameters */
/* penumbra_core_component_dex_v1_EventPositionOpen_size depends on runtime parameters */
/* penumbra_core_component_dex_v1_EventPositionClose_size depends on runtime parameters */
/* penumbra_core_component_dex_v1_EventQueuePositionClose_size depends on runtime parameters */
/* penumbra_core_component_dex_v1_EventPositionWithdraw_size depends on runtime parameters */
/* penumbra_core_component_dex_v1_EventPositionExecution_size depends on runtime parameters */
/* penumbra_core_component_dex_v1_EventBatchSwap_size depends on runtime parameters */
/* penumbra_core_component_dex_v1_EventArbExecution_size depends on runtime parameters */
/* penumbra_core_component_dex_v1_DexParameters_size depends on runtime parameters */
/* penumbra_core_component_dex_v1_GenesisContent_size depends on runtime parameters */
/* penumbra_core_component_dex_v1_CandlestickDataResponse_size depends on runtime parameters */
#if defined(penumbra_core_component_sct_v1_Nullifier_size) && defined(penumbra_core_component_fee_v1_Fee_size) &&   \
    defined(penumbra_crypto_tct_v1_StateCommitment_size) && defined(penumbra_crypto_tct_v1_StateCommitment_size) && \
    defined(penumbra_core_asset_v1_AssetId_size) && defined(penumbra_core_asset_v1_AssetId_size)
#define PENUMBRA_CORE_COMPONENT_DEX_V1_PENUMBRA_CORE_COMPONENT_DEX_V1_DEX_PB_H_MAX_SIZE \
    penumbra_core_component_dex_v1_SwapClaimBody_size
#define penumbra_core_component_dex_v1_SwapClaimBody_size                                            \
    (225 + penumbra_core_component_sct_v1_Nullifier_size + penumbra_core_component_fee_v1_Fee_size + \
     penumbra_crypto_tct_v1_StateCommitment_size + penumbra_crypto_tct_v1_StateCommitment_size +     \
     penumbra_core_asset_v1_AssetId_size + penumbra_core_asset_v1_AssetId_size)
#endif
#if defined(penumbra_core_asset_v1_AssetId_size) && defined(penumbra_core_asset_v1_AssetId_size)
#define penumbra_core_component_dex_v1_BatchSwapOutputDataRequest_size \
    (29 + penumbra_core_asset_v1_AssetId_size + penumbra_core_asset_v1_AssetId_size)
#define penumbra_core_component_dex_v1_BatchSwapOutputDataResponse_size \
    (201 + penumbra_core_asset_v1_AssetId_size + penumbra_core_asset_v1_AssetId_size)
#define penumbra_core_component_dex_v1_BatchSwapOutputData_size \
    (195 + penumbra_core_asset_v1_AssetId_size + penumbra_core_asset_v1_AssetId_size)
#define penumbra_core_component_dex_v1_CandlestickDataRequest_size \
    (40 + penumbra_core_asset_v1_AssetId_size + penumbra_core_asset_v1_AssetId_size)
#define penumbra_core_component_dex_v1_CandlestickDataStreamRequest_size \
    (18 + penumbra_core_asset_v1_AssetId_size + penumbra_core_asset_v1_AssetId_size)
#define penumbra_core_component_dex_v1_DirectedTradingPair_size \
    (12 + penumbra_core_asset_v1_AssetId_size + penumbra_core_asset_v1_AssetId_size)
#define penumbra_core_component_dex_v1_LiquidityPositionsByPriceRequest_size \
    (29 + penumbra_core_asset_v1_AssetId_size + penumbra_core_asset_v1_AssetId_size)
#define penumbra_core_component_dex_v1_SpreadRequest_size \
    (18 + penumbra_core_asset_v1_AssetId_size + penumbra_core_asset_v1_AssetId_size)
#define penumbra_core_component_dex_v1_SwapExecutionRequest_size \
    (29 + penumbra_core_asset_v1_AssetId_size + penumbra_core_asset_v1_AssetId_size)
#define penumbra_core_component_dex_v1_SwapExecutionsRequest_size \
    (40 + penumbra_core_asset_v1_AssetId_size + penumbra_core_asset_v1_AssetId_size)
#define penumbra_core_component_dex_v1_TradingFunction_size \
    (74 + penumbra_core_asset_v1_AssetId_size + penumbra_core_asset_v1_AssetId_size)
#define penumbra_core_component_dex_v1_TradingPair_size \
    (12 + penumbra_core_asset_v1_AssetId_size + penumbra_core_asset_v1_AssetId_size)
#endif
#define penumbra_core_component_dex_v1_ArbExecutionRequest_size 11
#define penumbra_core_component_dex_v1_ArbExecutionsRequest_size 22
#define penumbra_core_component_dex_v1_BareTradingFunction_size 54
#define penumbra_core_component_dex_v1_CandlestickDataStreamResponse_size 67
#define penumbra_core_component_dex_v1_CandlestickData_size 65
#define penumbra_core_component_dex_v1_LiquidityPositionsRequest_size 2
#define penumbra_core_component_dex_v1_PositionRewardClaimPlan_size 50
#define penumbra_core_component_dex_v1_PositionState_size 13
#define penumbra_core_component_dex_v1_Reserves_size 48
#define penumbra_core_component_dex_v1_SimulateTradeRequest_Routing_Default_size 0
#define penumbra_core_component_dex_v1_SimulateTradeRequest_Routing_SingleHop_size 0
#define penumbra_core_component_dex_v1_SimulateTradeRequest_Routing_size 2
#if defined(penumbra_core_asset_v1_Value_size) && defined(penumbra_core_asset_v1_AssetId_size)
#define penumbra_core_component_dex_v1_SimulateTradeRequest_size \
    (16 + penumbra_core_asset_v1_Value_size + penumbra_core_asset_v1_AssetId_size)
#endif
#if defined(penumbra_core_asset_v1_AssetId_size) && defined(penumbra_core_asset_v1_AssetId_size) && \
    defined(penumbra_crypto_tct_v1_StateCommitment_size)
#define penumbra_core_component_dex_v1_EventSwap_size                                 \
    (72 + penumbra_core_asset_v1_AssetId_size + penumbra_core_asset_v1_AssetId_size + \
     penumbra_crypto_tct_v1_StateCommitment_size)
#endif
#if defined(penumbra_core_asset_v1_AssetId_size) && defined(penumbra_core_asset_v1_AssetId_size) &&                 \
    defined(penumbra_crypto_tct_v1_StateCommitment_size) && defined(penumbra_crypto_tct_v1_StateCommitment_size) && \
    defined(penumbra_core_component_sct_v1_Nullifier_size)
#define penumbra_core_component_dex_v1_EventSwapClaim_size                                       \
    (36 + penumbra_core_asset_v1_AssetId_size + penumbra_core_asset_v1_AssetId_size +            \
     penumbra_crypto_tct_v1_StateCommitment_size + penumbra_crypto_tct_v1_StateCommitment_size + \
     penumbra_core_component_sct_v1_Nullifier_size)
#endif
#if defined(penumbra_core_asset_v1_AssetId_size)
#define penumbra_core_component_dex_v1_EventValueCircuitBreakerCredit_size (54 + penumbra_core_asset_v1_AssetId_size)
#define penumbra_core_component_dex_v1_EventValueCircuitBreakerDebit_size (54 + penumbra_core_asset_v1_AssetId_size)
#endif

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
