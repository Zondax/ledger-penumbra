/* Automatically generated nanopb header */
/* Generated by nanopb-1.0.0-dev */

#ifndef PB_TENDERMINT_CRYPTO_TENDERMINT_CRYPTO_PROOF_PB_H_INCLUDED
#define PB_TENDERMINT_CRYPTO_TENDERMINT_CRYPTO_PROOF_PB_H_INCLUDED
#include <pb.h>

#include "gogoproto/gogo.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _tendermint_crypto_Proof {
    int64_t total;
    int64_t index;
    pb_callback_t leaf_hash;
    pb_callback_t aunts;
} tendermint_crypto_Proof;

typedef struct _tendermint_crypto_ValueOp {
    /* Encoded in ProofOp.Key. */
    pb_callback_t key;
    /* To encode in ProofOp.Data */
    bool has_proof;
    tendermint_crypto_Proof proof;
} tendermint_crypto_ValueOp;

typedef struct _tendermint_crypto_DominoOp {
    pb_callback_t key;
    pb_callback_t input;
    pb_callback_t output;
} tendermint_crypto_DominoOp;

/* ProofOp defines an operation used for calculating Merkle root
 The data could be arbitrary format, providing nessecary data
 for example neighbouring node hash */
typedef struct _tendermint_crypto_ProofOp {
    pb_callback_t type;
    pb_callback_t key;
    pb_callback_t data;
} tendermint_crypto_ProofOp;

/* ProofOps is Merkle proof defined by the list of ProofOps */
typedef struct _tendermint_crypto_ProofOps {
    pb_callback_t ops;
} tendermint_crypto_ProofOps;

#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define tendermint_crypto_Proof_init_default   \
    {                                          \
        0, 0, {{NULL}, NULL}, { {NULL}, NULL } \
    }
#define tendermint_crypto_ValueOp_init_default \
    { {{NULL}, NULL}, false, tendermint_crypto_Proof_init_default }
#define tendermint_crypto_DominoOp_init_default          \
    {                                                    \
        {{NULL}, NULL}, {{NULL}, NULL}, { {NULL}, NULL } \
    }
#define tendermint_crypto_ProofOp_init_default           \
    {                                                    \
        {{NULL}, NULL}, {{NULL}, NULL}, { {NULL}, NULL } \
    }
#define tendermint_crypto_ProofOps_init_default \
    {                                           \
        { {NULL}, NULL }                        \
    }
#define tendermint_crypto_Proof_init_zero      \
    {                                          \
        0, 0, {{NULL}, NULL}, { {NULL}, NULL } \
    }
#define tendermint_crypto_ValueOp_init_zero \
    { {{NULL}, NULL}, false, tendermint_crypto_Proof_init_zero }
#define tendermint_crypto_DominoOp_init_zero             \
    {                                                    \
        {{NULL}, NULL}, {{NULL}, NULL}, { {NULL}, NULL } \
    }
#define tendermint_crypto_ProofOp_init_zero              \
    {                                                    \
        {{NULL}, NULL}, {{NULL}, NULL}, { {NULL}, NULL } \
    }
#define tendermint_crypto_ProofOps_init_zero \
    {                                        \
        { {NULL}, NULL }                     \
    }

/* Field tags (for use in manual encoding/decoding) */
#define tendermint_crypto_Proof_total_tag 1
#define tendermint_crypto_Proof_index_tag 2
#define tendermint_crypto_Proof_leaf_hash_tag 3
#define tendermint_crypto_Proof_aunts_tag 4
#define tendermint_crypto_ValueOp_key_tag 1
#define tendermint_crypto_ValueOp_proof_tag 2
#define tendermint_crypto_DominoOp_key_tag 1
#define tendermint_crypto_DominoOp_input_tag 2
#define tendermint_crypto_DominoOp_output_tag 3
#define tendermint_crypto_ProofOp_type_tag 1
#define tendermint_crypto_ProofOp_key_tag 2
#define tendermint_crypto_ProofOp_data_tag 3
#define tendermint_crypto_ProofOps_ops_tag 1

/* Struct field encoding specification for nanopb */
#define tendermint_crypto_Proof_FIELDLIST(X, a)   \
    X(a, STATIC, SINGULAR, INT64, total, 1)       \
    X(a, STATIC, SINGULAR, INT64, index, 2)       \
    X(a, CALLBACK, SINGULAR, BYTES, leaf_hash, 3) \
    X(a, CALLBACK, REPEATED, BYTES, aunts, 4)
#define tendermint_crypto_Proof_CALLBACK pb_default_field_callback
#define tendermint_crypto_Proof_DEFAULT NULL

#define tendermint_crypto_ValueOp_FIELDLIST(X, a) \
    X(a, CALLBACK, SINGULAR, BYTES, key, 1)       \
    X(a, STATIC, OPTIONAL, MESSAGE, proof, 2)
#define tendermint_crypto_ValueOp_CALLBACK pb_default_field_callback
#define tendermint_crypto_ValueOp_DEFAULT NULL
#define tendermint_crypto_ValueOp_proof_MSGTYPE tendermint_crypto_Proof

#define tendermint_crypto_DominoOp_FIELDLIST(X, a) \
    X(a, CALLBACK, SINGULAR, STRING, key, 1)       \
    X(a, CALLBACK, SINGULAR, STRING, input, 2)     \
    X(a, CALLBACK, SINGULAR, STRING, output, 3)
#define tendermint_crypto_DominoOp_CALLBACK pb_default_field_callback
#define tendermint_crypto_DominoOp_DEFAULT NULL

#define tendermint_crypto_ProofOp_FIELDLIST(X, a) \
    X(a, CALLBACK, SINGULAR, STRING, type, 1)     \
    X(a, CALLBACK, SINGULAR, BYTES, key, 2)       \
    X(a, CALLBACK, SINGULAR, BYTES, data, 3)
#define tendermint_crypto_ProofOp_CALLBACK pb_default_field_callback
#define tendermint_crypto_ProofOp_DEFAULT NULL

#define tendermint_crypto_ProofOps_FIELDLIST(X, a) X(a, CALLBACK, REPEATED, MESSAGE, ops, 1)
#define tendermint_crypto_ProofOps_CALLBACK pb_default_field_callback
#define tendermint_crypto_ProofOps_DEFAULT NULL
#define tendermint_crypto_ProofOps_ops_MSGTYPE tendermint_crypto_ProofOp

extern const pb_msgdesc_t tendermint_crypto_Proof_msg;
extern const pb_msgdesc_t tendermint_crypto_ValueOp_msg;
extern const pb_msgdesc_t tendermint_crypto_DominoOp_msg;
extern const pb_msgdesc_t tendermint_crypto_ProofOp_msg;
extern const pb_msgdesc_t tendermint_crypto_ProofOps_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define tendermint_crypto_Proof_fields &tendermint_crypto_Proof_msg
#define tendermint_crypto_ValueOp_fields &tendermint_crypto_ValueOp_msg
#define tendermint_crypto_DominoOp_fields &tendermint_crypto_DominoOp_msg
#define tendermint_crypto_ProofOp_fields &tendermint_crypto_ProofOp_msg
#define tendermint_crypto_ProofOps_fields &tendermint_crypto_ProofOps_msg

/* Maximum encoded size of messages (where known) */
/* tendermint_crypto_Proof_size depends on runtime parameters */
/* tendermint_crypto_ValueOp_size depends on runtime parameters */
/* tendermint_crypto_DominoOp_size depends on runtime parameters */
/* tendermint_crypto_ProofOp_size depends on runtime parameters */
/* tendermint_crypto_ProofOps_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
