/* Automatically generated nanopb header */
/* Generated by nanopb-1.0.0-dev */

#ifndef PB_COSMOS_BASE_QUERY_V1BETA1_COSMOS_BASE_QUERY_V1BETA1_PAGINATION_PB_H_INCLUDED
#define PB_COSMOS_BASE_QUERY_V1BETA1_COSMOS_BASE_QUERY_V1BETA1_PAGINATION_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
/* PageRequest is to be embedded in gRPC request messages for efficient
 pagination. Ex:

  message SomeRequest {
          Foo some_parameter = 1;
          PageRequest pagination = 2;
  } */
typedef struct _cosmos_base_query_v1beta1_PageRequest {
    /* key is a value returned in PageResponse.next_key to begin
 querying the next page most efficiently. Only one of offset or key
 should be set. */
    pb_callback_t key;
    /* offset is a numeric offset that can be used when key is unavailable.
 It is less efficient than using key. Only one of offset or key should
 be set. */
    uint64_t offset;
    /* limit is the total number of results to be returned in the result page.
 If left empty it will default to a value to be set by each app. */
    uint64_t limit;
    /* count_total is set to true  to indicate that the result set should include
 a count of the total number of items available for pagination in UIs.
 count_total is only respected when offset is used. It is ignored when key
 is set. */
    bool count_total;
    /* reverse is set to true if results are to be returned in the descending order.

 Since: cosmos-sdk 0.43 */
    bool reverse;
} cosmos_base_query_v1beta1_PageRequest;

/* PageResponse is to be embedded in gRPC response messages where the
 corresponding request message has used PageRequest.

  message SomeResponse {
          repeated Bar results = 1;
          PageResponse page = 2;
  } */
typedef struct _cosmos_base_query_v1beta1_PageResponse {
    /* next_key is the key to be passed to PageRequest.key to
 query the next page most efficiently. It will be empty if
 there are no more results. */
    pb_callback_t next_key;
    /* total is total number of results available if PageRequest.count_total
 was set, its value is undefined otherwise */
    uint64_t total;
} cosmos_base_query_v1beta1_PageResponse;

#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define cosmos_base_query_v1beta1_PageRequest_init_default \
    { {{NULL}, NULL}, 0, 0, 0, 0 }
#define cosmos_base_query_v1beta1_PageResponse_init_default \
    { {{NULL}, NULL}, 0 }
#define cosmos_base_query_v1beta1_PageRequest_init_zero \
    { {{NULL}, NULL}, 0, 0, 0, 0 }
#define cosmos_base_query_v1beta1_PageResponse_init_zero \
    { {{NULL}, NULL}, 0 }

/* Field tags (for use in manual encoding/decoding) */
#define cosmos_base_query_v1beta1_PageRequest_key_tag 1
#define cosmos_base_query_v1beta1_PageRequest_offset_tag 2
#define cosmos_base_query_v1beta1_PageRequest_limit_tag 3
#define cosmos_base_query_v1beta1_PageRequest_count_total_tag 4
#define cosmos_base_query_v1beta1_PageRequest_reverse_tag 5
#define cosmos_base_query_v1beta1_PageResponse_next_key_tag 1
#define cosmos_base_query_v1beta1_PageResponse_total_tag 2

/* Struct field encoding specification for nanopb */
#define cosmos_base_query_v1beta1_PageRequest_FIELDLIST(X, a) \
    X(a, CALLBACK, SINGULAR, BYTES, key, 1)                   \
    X(a, STATIC, SINGULAR, UINT64, offset, 2)                 \
    X(a, STATIC, SINGULAR, UINT64, limit, 3)                  \
    X(a, STATIC, SINGULAR, BOOL, count_total, 4)              \
    X(a, STATIC, SINGULAR, BOOL, reverse, 5)
#define cosmos_base_query_v1beta1_PageRequest_CALLBACK pb_default_field_callback
#define cosmos_base_query_v1beta1_PageRequest_DEFAULT NULL

#define cosmos_base_query_v1beta1_PageResponse_FIELDLIST(X, a) \
    X(a, CALLBACK, SINGULAR, BYTES, next_key, 1)               \
    X(a, STATIC, SINGULAR, UINT64, total, 2)
#define cosmos_base_query_v1beta1_PageResponse_CALLBACK pb_default_field_callback
#define cosmos_base_query_v1beta1_PageResponse_DEFAULT NULL

extern const pb_msgdesc_t cosmos_base_query_v1beta1_PageRequest_msg;
extern const pb_msgdesc_t cosmos_base_query_v1beta1_PageResponse_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define cosmos_base_query_v1beta1_PageRequest_fields &cosmos_base_query_v1beta1_PageRequest_msg
#define cosmos_base_query_v1beta1_PageResponse_fields &cosmos_base_query_v1beta1_PageResponse_msg

/* Maximum encoded size of messages (where known) */
/* cosmos_base_query_v1beta1_PageRequest_size depends on runtime parameters */
/* cosmos_base_query_v1beta1_PageResponse_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
