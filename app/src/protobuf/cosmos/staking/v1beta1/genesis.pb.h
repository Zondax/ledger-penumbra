/* Automatically generated nanopb header */
/* Generated by nanopb-1.0.0-dev */

#ifndef PB_COSMOS_STAKING_V1BETA1_COSMOS_STAKING_V1BETA1_GENESIS_PB_H_INCLUDED
#define PB_COSMOS_STAKING_V1BETA1_COSMOS_STAKING_V1BETA1_GENESIS_PB_H_INCLUDED
#include <pb.h>

#include "amino/amino.pb.h"
#include "cosmos/staking/v1beta1/staking.pb.h"
#include "cosmos_proto/cosmos.pb.h"
#include "gogoproto/gogo.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
/* GenesisState defines the staking module's genesis state. */
typedef struct _cosmos_staking_v1beta1_GenesisState {
    /* params defines all the parameters of related to deposit. */
    bool has_params;
    cosmos_staking_v1beta1_Params params;
    /* last_total_power tracks the total amounts of bonded tokens recorded during
 the previous end block. */
    pb_callback_t last_total_power;
    /* last_validator_powers is a special index that provides a historical list
 of the last-block's bonded validators. */
    pb_callback_t last_validator_powers;
    /* validators defines the validator set at genesis. */
    pb_callback_t validators;
    /* delegations defines the delegations active at genesis. */
    pb_callback_t delegations;
    /* unbonding_delegations defines the unbonding delegations active at genesis. */
    pb_callback_t unbonding_delegations;
    /* redelegations defines the redelegations active at genesis. */
    pb_callback_t redelegations;
    bool exported;
} cosmos_staking_v1beta1_GenesisState;

/* LastValidatorPower required for validator set update logic. */
typedef struct _cosmos_staking_v1beta1_LastValidatorPower {
    /* address is the address of the validator. */
    pb_callback_t address;
    /* power defines the power of the validator. */
    int64_t power;
} cosmos_staking_v1beta1_LastValidatorPower;

#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define cosmos_staking_v1beta1_GenesisState_init_default                                                                   \
    {                                                                                                                      \
        false, cosmos_staking_v1beta1_Params_init_default, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, \
            {{NULL}, NULL}, {{NULL}, NULL}, 0                                                                              \
    }
#define cosmos_staking_v1beta1_LastValidatorPower_init_default \
    { {{NULL}, NULL}, 0 }
#define cosmos_staking_v1beta1_GenesisState_init_zero                                                                   \
    {                                                                                                                   \
        false, cosmos_staking_v1beta1_Params_init_zero, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, \
            {{NULL}, NULL}, {{NULL}, NULL}, 0                                                                           \
    }
#define cosmos_staking_v1beta1_LastValidatorPower_init_zero \
    { {{NULL}, NULL}, 0 }

/* Field tags (for use in manual encoding/decoding) */
#define cosmos_staking_v1beta1_GenesisState_params_tag 1
#define cosmos_staking_v1beta1_GenesisState_last_total_power_tag 2
#define cosmos_staking_v1beta1_GenesisState_last_validator_powers_tag 3
#define cosmos_staking_v1beta1_GenesisState_validators_tag 4
#define cosmos_staking_v1beta1_GenesisState_delegations_tag 5
#define cosmos_staking_v1beta1_GenesisState_unbonding_delegations_tag 6
#define cosmos_staking_v1beta1_GenesisState_redelegations_tag 7
#define cosmos_staking_v1beta1_GenesisState_exported_tag 8
#define cosmos_staking_v1beta1_LastValidatorPower_address_tag 1
#define cosmos_staking_v1beta1_LastValidatorPower_power_tag 2

/* Struct field encoding specification for nanopb */
#define cosmos_staking_v1beta1_GenesisState_FIELDLIST(X, a)     \
    X(a, STATIC, OPTIONAL, MESSAGE, params, 1)                  \
    X(a, CALLBACK, SINGULAR, BYTES, last_total_power, 2)        \
    X(a, CALLBACK, REPEATED, MESSAGE, last_validator_powers, 3) \
    X(a, CALLBACK, REPEATED, MESSAGE, validators, 4)            \
    X(a, CALLBACK, REPEATED, MESSAGE, delegations, 5)           \
    X(a, CALLBACK, REPEATED, MESSAGE, unbonding_delegations, 6) \
    X(a, CALLBACK, REPEATED, MESSAGE, redelegations, 7)         \
    X(a, STATIC, SINGULAR, BOOL, exported, 8)
#define cosmos_staking_v1beta1_GenesisState_CALLBACK pb_default_field_callback
#define cosmos_staking_v1beta1_GenesisState_DEFAULT NULL
#define cosmos_staking_v1beta1_GenesisState_params_MSGTYPE cosmos_staking_v1beta1_Params
#define cosmos_staking_v1beta1_GenesisState_last_validator_powers_MSGTYPE cosmos_staking_v1beta1_LastValidatorPower
#define cosmos_staking_v1beta1_GenesisState_validators_MSGTYPE cosmos_staking_v1beta1_Validator
#define cosmos_staking_v1beta1_GenesisState_delegations_MSGTYPE cosmos_staking_v1beta1_Delegation
#define cosmos_staking_v1beta1_GenesisState_unbonding_delegations_MSGTYPE cosmos_staking_v1beta1_UnbondingDelegation
#define cosmos_staking_v1beta1_GenesisState_redelegations_MSGTYPE cosmos_staking_v1beta1_Redelegation

#define cosmos_staking_v1beta1_LastValidatorPower_FIELDLIST(X, a) \
    X(a, CALLBACK, SINGULAR, STRING, address, 1)                  \
    X(a, STATIC, SINGULAR, INT64, power, 2)
#define cosmos_staking_v1beta1_LastValidatorPower_CALLBACK pb_default_field_callback
#define cosmos_staking_v1beta1_LastValidatorPower_DEFAULT NULL

extern const pb_msgdesc_t cosmos_staking_v1beta1_GenesisState_msg;
extern const pb_msgdesc_t cosmos_staking_v1beta1_LastValidatorPower_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define cosmos_staking_v1beta1_GenesisState_fields &cosmos_staking_v1beta1_GenesisState_msg
#define cosmos_staking_v1beta1_LastValidatorPower_fields &cosmos_staking_v1beta1_LastValidatorPower_msg

/* Maximum encoded size of messages (where known) */
/* cosmos_staking_v1beta1_GenesisState_size depends on runtime parameters */
/* cosmos_staking_v1beta1_LastValidatorPower_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
