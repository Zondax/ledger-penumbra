/* Automatically generated nanopb header */
/* Generated by nanopb-1.0.0-dev */

#ifndef PB_COSMOS_AUTH_MODULE_V1_COSMOS_AUTH_MODULE_V1_MODULE_PB_H_INCLUDED
#define PB_COSMOS_AUTH_MODULE_V1_COSMOS_AUTH_MODULE_V1_MODULE_PB_H_INCLUDED
#include <pb.h>

#include "cosmos/app/v1alpha1/module.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
/* Module is the config object for the auth module. */
typedef struct _cosmos_auth_module_v1_Module {
    /* bech32_prefix is the bech32 account prefix for the app. */
    pb_callback_t bech32_prefix;
    /* module_account_permissions are module account permissions. */
    pb_callback_t module_account_permissions;
    /* authority defines the custom module authority. If not set, defaults to the governance module. */
    pb_callback_t authority;
} cosmos_auth_module_v1_Module;

/* ModuleAccountPermission represents permissions for a module account. */
typedef struct _cosmos_auth_module_v1_ModuleAccountPermission {
    /* account is the name of the module. */
    pb_callback_t account;
    /* permissions are the permissions this module has. Currently recognized
 values are minter, burner and staking. */
    pb_callback_t permissions;
} cosmos_auth_module_v1_ModuleAccountPermission;

#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define cosmos_auth_module_v1_Module_init_default        \
    {                                                    \
        {{NULL}, NULL}, {{NULL}, NULL}, { {NULL}, NULL } \
    }
#define cosmos_auth_module_v1_ModuleAccountPermission_init_default \
    {                                                              \
        {{NULL}, NULL}, { {NULL}, NULL }                           \
    }
#define cosmos_auth_module_v1_Module_init_zero           \
    {                                                    \
        {{NULL}, NULL}, {{NULL}, NULL}, { {NULL}, NULL } \
    }
#define cosmos_auth_module_v1_ModuleAccountPermission_init_zero \
    {                                                           \
        {{NULL}, NULL}, { {NULL}, NULL }                        \
    }

/* Field tags (for use in manual encoding/decoding) */
#define cosmos_auth_module_v1_Module_bech32_prefix_tag 1
#define cosmos_auth_module_v1_Module_module_account_permissions_tag 2
#define cosmos_auth_module_v1_Module_authority_tag 3
#define cosmos_auth_module_v1_ModuleAccountPermission_account_tag 1
#define cosmos_auth_module_v1_ModuleAccountPermission_permissions_tag 2

/* Struct field encoding specification for nanopb */
#define cosmos_auth_module_v1_Module_FIELDLIST(X, a)                 \
    X(a, CALLBACK, SINGULAR, STRING, bech32_prefix, 1)               \
    X(a, CALLBACK, REPEATED, MESSAGE, module_account_permissions, 2) \
    X(a, CALLBACK, SINGULAR, STRING, authority, 3)
#define cosmos_auth_module_v1_Module_CALLBACK pb_default_field_callback
#define cosmos_auth_module_v1_Module_DEFAULT NULL
#define cosmos_auth_module_v1_Module_module_account_permissions_MSGTYPE cosmos_auth_module_v1_ModuleAccountPermission

#define cosmos_auth_module_v1_ModuleAccountPermission_FIELDLIST(X, a) \
    X(a, CALLBACK, SINGULAR, STRING, account, 1)                      \
    X(a, CALLBACK, REPEATED, STRING, permissions, 2)
#define cosmos_auth_module_v1_ModuleAccountPermission_CALLBACK pb_default_field_callback
#define cosmos_auth_module_v1_ModuleAccountPermission_DEFAULT NULL

extern const pb_msgdesc_t cosmos_auth_module_v1_Module_msg;
extern const pb_msgdesc_t cosmos_auth_module_v1_ModuleAccountPermission_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define cosmos_auth_module_v1_Module_fields &cosmos_auth_module_v1_Module_msg
#define cosmos_auth_module_v1_ModuleAccountPermission_fields &cosmos_auth_module_v1_ModuleAccountPermission_msg

/* Maximum encoded size of messages (where known) */
/* cosmos_auth_module_v1_Module_size depends on runtime parameters */
/* cosmos_auth_module_v1_ModuleAccountPermission_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
