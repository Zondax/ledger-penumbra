/* Automatically generated nanopb header */
/* Generated by nanopb-1.0.0-dev */

#ifndef PB_COSMOS_ORM_V1_COSMOS_ORM_V1_ORM_PB_H_INCLUDED
#define PB_COSMOS_ORM_V1_COSMOS_ORM_V1_ORM_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
/* PrimaryKeyDescriptor describes a table primary key. */
typedef struct _cosmos_orm_v1_PrimaryKeyDescriptor {
    /* fields is a comma-separated list of fields in the primary key. Spaces are
 not allowed. Supported field types, their encodings, and any applicable constraints
 are described below.
   - uint32 are encoded as 2,3,4 or 5 bytes using a compact encoding that
     is suitable for sorted iteration (not varint encoding). This type is
     well-suited for small integers.
   - uint64 are encoded as 2,4,6 or 9 bytes using a compact encoding that
     is suitable for sorted iteration (not varint encoding). This type is
     well-suited for small integers such as auto-incrementing sequences.
   - fixed32, fixed64 are encoded as big-endian fixed width bytes and support
   sorted iteration. These types are well-suited for encoding fixed with
   decimals as integers.
   - string's are encoded as raw bytes in terminal key segments and null-terminated
   in non-terminal segments. Null characters are thus forbidden in strings.
   string fields support sorted iteration.
   - bytes are encoded as raw bytes in terminal segments and length-prefixed
   with a 32-bit unsigned varint in non-terminal segments.
   - int32, sint32, int64, sint64, sfixed32, sfixed64 are encoded as fixed width bytes with
   an encoding that enables sorted iteration.
   - google.protobuf.Timestamp is encoded such that values with only seconds occupy 6 bytes,
   values including nanos occupy 9 bytes, and nil values occupy 1 byte. When iterating, nil
   values will always be ordered last. Seconds and nanos values must conform to the officially
   specified ranges of 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z and 0 to 999,999,999 respectively.
   - google.protobuf.Duration is encoded as 12 bytes using an encoding that enables sorted iteration.
   - enum fields are encoded using varint encoding and do not support sorted
   iteration.
   - bool fields are encoded as a single byte 0 or 1.

 All other fields types are unsupported in keys including repeated and
 oneof fields.

 Primary keys are prefixed by the varint encoded table id and the byte 0x0
 plus any additional prefix specified by the schema. */
    pb_callback_t fields;
    /* auto_increment specifies that the primary key is generated by an
 auto-incrementing integer. If this is set to true fields must only
 contain one field of that is of type uint64. */
    bool auto_increment;
} cosmos_orm_v1_PrimaryKeyDescriptor;

/* TableDescriptor describes an ORM table. */
typedef struct _cosmos_orm_v1_TableDescriptor {
    /* primary_key defines the primary key for the table. */
    bool has_primary_key;
    cosmos_orm_v1_PrimaryKeyDescriptor primary_key;
    /* index defines one or more secondary indexes. */
    pb_callback_t index;
    /* id is a non-zero integer ID that must be unique within the
 tables and singletons in this file. It may be deprecated in the future when this
 can be auto-generated. */
    uint32_t id;
} cosmos_orm_v1_TableDescriptor;

/* PrimaryKeyDescriptor describes a table secondary index. */
typedef struct _cosmos_orm_v1_SecondaryIndexDescriptor {
    /* fields is a comma-separated list of fields in the index. The supported
 field types are the same as those for PrimaryKeyDescriptor.fields.
 Index keys are prefixed by the varint encoded table id and the varint
 encoded index id plus any additional prefix specified by the schema.

 In addition the field segments, non-unique index keys are suffixed with
 any additional primary key fields not present in the index fields so that the
 primary key can be reconstructed. Unique indexes instead of being suffixed
 store the remaining primary key fields in the value.. */
    pb_callback_t fields;
    /* id is a non-zero integer ID that must be unique within the indexes for this
 table and less than 32768. It may be deprecated in the future when this can
 be auto-generated. */
    uint32_t id;
    /* unique specifies that this an unique index. */
    bool unique;
} cosmos_orm_v1_SecondaryIndexDescriptor;

/* TableDescriptor describes an ORM singleton table which has at most one instance. */
typedef struct _cosmos_orm_v1_SingletonDescriptor {
    /* id is a non-zero integer ID that must be unique within the
 tables and singletons in this file. It may be deprecated in the future when this
 can be auto-generated. */
    uint32_t id;
} cosmos_orm_v1_SingletonDescriptor;

/* Extensions */
extern const pb_extension_type_t cosmos_orm_v1_table;     /* field type: cosmos_orm_v1_TableDescriptor table; */
extern const pb_extension_type_t cosmos_orm_v1_singleton; /* field type: cosmos_orm_v1_SingletonDescriptor singleton; */

#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define cosmos_orm_v1_TableDescriptor_init_default \
    { false, cosmos_orm_v1_PrimaryKeyDescriptor_init_default, {{NULL}, NULL}, 0 }
#define cosmos_orm_v1_PrimaryKeyDescriptor_init_default \
    { {{NULL}, NULL}, 0 }
#define cosmos_orm_v1_SecondaryIndexDescriptor_init_default \
    { {{NULL}, NULL}, 0, 0 }
#define cosmos_orm_v1_SingletonDescriptor_init_default \
    { 0 }
#define cosmos_orm_v1_TableDescriptor_init_zero \
    { false, cosmos_orm_v1_PrimaryKeyDescriptor_init_zero, {{NULL}, NULL}, 0 }
#define cosmos_orm_v1_PrimaryKeyDescriptor_init_zero \
    { {{NULL}, NULL}, 0 }
#define cosmos_orm_v1_SecondaryIndexDescriptor_init_zero \
    { {{NULL}, NULL}, 0, 0 }
#define cosmos_orm_v1_SingletonDescriptor_init_zero \
    { 0 }

/* Field tags (for use in manual encoding/decoding) */
#define cosmos_orm_v1_PrimaryKeyDescriptor_fields_tag 1
#define cosmos_orm_v1_PrimaryKeyDescriptor_auto_increment_tag 2
#define cosmos_orm_v1_TableDescriptor_primary_key_tag 1
#define cosmos_orm_v1_TableDescriptor_index_tag 2
#define cosmos_orm_v1_TableDescriptor_id_tag 3
#define cosmos_orm_v1_SecondaryIndexDescriptor_fields_tag 1
#define cosmos_orm_v1_SecondaryIndexDescriptor_id_tag 2
#define cosmos_orm_v1_SecondaryIndexDescriptor_unique_tag 3
#define cosmos_orm_v1_SingletonDescriptor_id_tag 1
#define cosmos_orm_v1_table_tag 104503790
#define cosmos_orm_v1_singleton_tag 104503791

/* Struct field encoding specification for nanopb */
#define cosmos_orm_v1_TableDescriptor_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, primary_key, 1)   \
    X(a, CALLBACK, REPEATED, MESSAGE, index, 2)       \
    X(a, STATIC, SINGULAR, UINT32, id, 3)
#define cosmos_orm_v1_TableDescriptor_CALLBACK pb_default_field_callback
#define cosmos_orm_v1_TableDescriptor_DEFAULT NULL
#define cosmos_orm_v1_TableDescriptor_primary_key_MSGTYPE cosmos_orm_v1_PrimaryKeyDescriptor
#define cosmos_orm_v1_TableDescriptor_index_MSGTYPE cosmos_orm_v1_SecondaryIndexDescriptor

#define cosmos_orm_v1_PrimaryKeyDescriptor_FIELDLIST(X, a) \
    X(a, CALLBACK, SINGULAR, STRING, fields, 1)            \
    X(a, STATIC, SINGULAR, BOOL, auto_increment, 2)
#define cosmos_orm_v1_PrimaryKeyDescriptor_CALLBACK pb_default_field_callback
#define cosmos_orm_v1_PrimaryKeyDescriptor_DEFAULT NULL

#define cosmos_orm_v1_SecondaryIndexDescriptor_FIELDLIST(X, a) \
    X(a, CALLBACK, SINGULAR, STRING, fields, 1)                \
    X(a, STATIC, SINGULAR, UINT32, id, 2)                      \
    X(a, STATIC, SINGULAR, BOOL, unique, 3)
#define cosmos_orm_v1_SecondaryIndexDescriptor_CALLBACK pb_default_field_callback
#define cosmos_orm_v1_SecondaryIndexDescriptor_DEFAULT NULL

#define cosmos_orm_v1_SingletonDescriptor_FIELDLIST(X, a) X(a, STATIC, SINGULAR, UINT32, id, 1)
#define cosmos_orm_v1_SingletonDescriptor_CALLBACK NULL
#define cosmos_orm_v1_SingletonDescriptor_DEFAULT NULL

extern const pb_msgdesc_t cosmos_orm_v1_TableDescriptor_msg;
extern const pb_msgdesc_t cosmos_orm_v1_PrimaryKeyDescriptor_msg;
extern const pb_msgdesc_t cosmos_orm_v1_SecondaryIndexDescriptor_msg;
extern const pb_msgdesc_t cosmos_orm_v1_SingletonDescriptor_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define cosmos_orm_v1_TableDescriptor_fields &cosmos_orm_v1_TableDescriptor_msg
#define cosmos_orm_v1_PrimaryKeyDescriptor_fields &cosmos_orm_v1_PrimaryKeyDescriptor_msg
#define cosmos_orm_v1_SecondaryIndexDescriptor_fields &cosmos_orm_v1_SecondaryIndexDescriptor_msg
#define cosmos_orm_v1_SingletonDescriptor_fields &cosmos_orm_v1_SingletonDescriptor_msg

/* Maximum encoded size of messages (where known) */
/* cosmos_orm_v1_TableDescriptor_size depends on runtime parameters */
/* cosmos_orm_v1_PrimaryKeyDescriptor_size depends on runtime parameters */
/* cosmos_orm_v1_SecondaryIndexDescriptor_size depends on runtime parameters */
#define COSMOS_ORM_V1_COSMOS_ORM_V1_ORM_PB_H_MAX_SIZE cosmos_orm_v1_SingletonDescriptor_size
#define cosmos_orm_v1_SingletonDescriptor_size 6

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
