/* Automatically generated nanopb header */
/* Generated by nanopb-1.0.0-dev */

#ifndef PB_IBC_CORE_COMMITMENT_V1_IBC_CORE_COMMITMENT_V1_COMMITMENT_PB_H_INCLUDED
#define PB_IBC_CORE_COMMITMENT_V1_IBC_CORE_COMMITMENT_V1_COMMITMENT_PB_H_INCLUDED
#include <pb.h>

#include "cosmos/ics23/v1/proofs.pb.h"
#include "gogoproto/gogo.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
/* MerkleRoot defines a merkle root hash.
 In the Cosmos SDK, the AppHash of a block header becomes the root. */
typedef struct _ibc_core_commitment_v1_MerkleRoot {
    pb_callback_t hash;
} ibc_core_commitment_v1_MerkleRoot;

/* MerklePrefix is merkle path prefixed to the key.
 The constructed key from the Path and the key will be append(Path.KeyPath,
 append(Path.KeyPrefix, key...)) */
typedef struct _ibc_core_commitment_v1_MerklePrefix {
    pb_callback_t key_prefix;
} ibc_core_commitment_v1_MerklePrefix;

/* MerklePath is the path used to verify commitment proofs, which can be an
 arbitrary structured object (defined by a commitment type).
 MerklePath is represented from root-to-leaf */
typedef struct _ibc_core_commitment_v1_MerklePath {
    pb_callback_t key_path;
} ibc_core_commitment_v1_MerklePath;

/* MerkleProof is a wrapper type over a chain of CommitmentProofs.
 It demonstrates membership or non-membership for an element or set of
 elements, verifiable in conjunction with a known commitment root. Proofs
 should be succinct.
 MerkleProofs are ordered from leaf-to-root */
typedef struct _ibc_core_commitment_v1_MerkleProof {
    pb_callback_t proofs;
} ibc_core_commitment_v1_MerkleProof;

#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define ibc_core_commitment_v1_MerkleRoot_init_default \
    {                                                  \
        { {NULL}, NULL }                               \
    }
#define ibc_core_commitment_v1_MerklePrefix_init_default \
    {                                                    \
        { {NULL}, NULL }                                 \
    }
#define ibc_core_commitment_v1_MerklePath_init_default \
    {                                                  \
        { {NULL}, NULL }                               \
    }
#define ibc_core_commitment_v1_MerkleProof_init_default \
    {                                                   \
        { {NULL}, NULL }                                \
    }
#define ibc_core_commitment_v1_MerkleRoot_init_zero \
    {                                               \
        { {NULL}, NULL }                            \
    }
#define ibc_core_commitment_v1_MerklePrefix_init_zero \
    {                                                 \
        { {NULL}, NULL }                              \
    }
#define ibc_core_commitment_v1_MerklePath_init_zero \
    {                                               \
        { {NULL}, NULL }                            \
    }
#define ibc_core_commitment_v1_MerkleProof_init_zero \
    {                                                \
        { {NULL}, NULL }                             \
    }

/* Field tags (for use in manual encoding/decoding) */
#define ibc_core_commitment_v1_MerkleRoot_hash_tag 1
#define ibc_core_commitment_v1_MerklePrefix_key_prefix_tag 1
#define ibc_core_commitment_v1_MerklePath_key_path_tag 1
#define ibc_core_commitment_v1_MerkleProof_proofs_tag 1

/* Struct field encoding specification for nanopb */
#define ibc_core_commitment_v1_MerkleRoot_FIELDLIST(X, a) X(a, CALLBACK, SINGULAR, BYTES, hash, 1)
#define ibc_core_commitment_v1_MerkleRoot_CALLBACK pb_default_field_callback
#define ibc_core_commitment_v1_MerkleRoot_DEFAULT NULL

#define ibc_core_commitment_v1_MerklePrefix_FIELDLIST(X, a) X(a, CALLBACK, SINGULAR, BYTES, key_prefix, 1)
#define ibc_core_commitment_v1_MerklePrefix_CALLBACK pb_default_field_callback
#define ibc_core_commitment_v1_MerklePrefix_DEFAULT NULL

#define ibc_core_commitment_v1_MerklePath_FIELDLIST(X, a) X(a, CALLBACK, REPEATED, STRING, key_path, 1)
#define ibc_core_commitment_v1_MerklePath_CALLBACK pb_default_field_callback
#define ibc_core_commitment_v1_MerklePath_DEFAULT NULL

#define ibc_core_commitment_v1_MerkleProof_FIELDLIST(X, a) X(a, CALLBACK, REPEATED, MESSAGE, proofs, 1)
#define ibc_core_commitment_v1_MerkleProof_CALLBACK pb_default_field_callback
#define ibc_core_commitment_v1_MerkleProof_DEFAULT NULL
#define ibc_core_commitment_v1_MerkleProof_proofs_MSGTYPE cosmos_ics23_v1_CommitmentProof

extern const pb_msgdesc_t ibc_core_commitment_v1_MerkleRoot_msg;
extern const pb_msgdesc_t ibc_core_commitment_v1_MerklePrefix_msg;
extern const pb_msgdesc_t ibc_core_commitment_v1_MerklePath_msg;
extern const pb_msgdesc_t ibc_core_commitment_v1_MerkleProof_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define ibc_core_commitment_v1_MerkleRoot_fields &ibc_core_commitment_v1_MerkleRoot_msg
#define ibc_core_commitment_v1_MerklePrefix_fields &ibc_core_commitment_v1_MerklePrefix_msg
#define ibc_core_commitment_v1_MerklePath_fields &ibc_core_commitment_v1_MerklePath_msg
#define ibc_core_commitment_v1_MerkleProof_fields &ibc_core_commitment_v1_MerkleProof_msg

/* Maximum encoded size of messages (where known) */
/* ibc_core_commitment_v1_MerkleRoot_size depends on runtime parameters */
/* ibc_core_commitment_v1_MerklePrefix_size depends on runtime parameters */
/* ibc_core_commitment_v1_MerklePath_size depends on runtime parameters */
/* ibc_core_commitment_v1_MerkleProof_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
