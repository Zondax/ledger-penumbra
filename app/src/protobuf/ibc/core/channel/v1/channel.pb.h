/* Automatically generated nanopb header */
/* Generated by nanopb-1.0.0-dev */

#ifndef PB_IBC_CORE_CHANNEL_V1_IBC_CORE_CHANNEL_V1_CHANNEL_PB_H_INCLUDED
#define PB_IBC_CORE_CHANNEL_V1_IBC_CORE_CHANNEL_V1_CHANNEL_PB_H_INCLUDED
#include <pb.h>

#include "gogoproto/gogo.pb.h"
#include "ibc/core/client/v1/client.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
/* State defines if a channel is in one of the following states:
 CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED. */
typedef enum _ibc_core_channel_v1_State {
    /* Default State */
    ibc_core_channel_v1_State_STATE_UNINITIALIZED_UNSPECIFIED = 0,
    /* A channel has just started the opening handshake. */
    ibc_core_channel_v1_State_STATE_INIT = 1,
    /* A channel has acknowledged the handshake step on the counterparty chain. */
    ibc_core_channel_v1_State_STATE_TRYOPEN = 2,
    /* A channel has completed the handshake. Open channels are
 ready to send and receive packets. */
    ibc_core_channel_v1_State_STATE_OPEN = 3,
    /* A channel has been closed and can no longer be used to send or receive
 packets. */
    ibc_core_channel_v1_State_STATE_CLOSED = 4
} ibc_core_channel_v1_State;

/* Order defines if a channel is ORDERED or UNORDERED */
typedef enum _ibc_core_channel_v1_Order {
    /* zero-value for channel ordering */
    ibc_core_channel_v1_Order_ORDER_NONE_UNSPECIFIED = 0,
    /* packets can be delivered in any order, which may differ from the order in
 which they were sent. */
    ibc_core_channel_v1_Order_ORDER_UNORDERED = 1,
    /* packets are delivered exactly in the order which they were sent */
    ibc_core_channel_v1_Order_ORDER_ORDERED = 2
} ibc_core_channel_v1_Order;

/* Struct definitions */
/* Counterparty defines a channel end counterparty */
typedef struct _ibc_core_channel_v1_Counterparty {
    /* port on the counterparty chain which owns the other end of the channel. */
    pb_callback_t port_id;
    /* channel end on the counterparty chain */
    pb_callback_t channel_id;
} ibc_core_channel_v1_Counterparty;

/* Channel defines pipeline for exactly-once packet delivery between specific
 modules on separate blockchains, which has at least one end capable of
 sending packets and one end capable of receiving packets. */
typedef struct _ibc_core_channel_v1_Channel {
    /* current state of the channel end */
    ibc_core_channel_v1_State state;
    /* whether the channel is ordered or unordered */
    ibc_core_channel_v1_Order ordering;
    /* counterparty channel end */
    bool has_counterparty;
    ibc_core_channel_v1_Counterparty counterparty;
    /* list of connection identifiers, in order, along which packets sent on
 this channel will travel */
    pb_callback_t connection_hops;
    /* opaque channel version, which is agreed upon during the handshake */
    pb_callback_t version;
} ibc_core_channel_v1_Channel;

/* IdentifiedChannel defines a channel with additional port and channel
 identifier fields. */
typedef struct _ibc_core_channel_v1_IdentifiedChannel {
    /* current state of the channel end */
    ibc_core_channel_v1_State state;
    /* whether the channel is ordered or unordered */
    ibc_core_channel_v1_Order ordering;
    /* counterparty channel end */
    bool has_counterparty;
    ibc_core_channel_v1_Counterparty counterparty;
    /* list of connection identifiers, in order, along which packets sent on
 this channel will travel */
    pb_callback_t connection_hops;
    /* opaque channel version, which is agreed upon during the handshake */
    pb_callback_t version;
    /* port identifier */
    pb_callback_t port_id;
    /* channel identifier */
    pb_callback_t channel_id;
} ibc_core_channel_v1_IdentifiedChannel;

/* Packet defines a type that carries data across different chains through IBC */
typedef struct _ibc_core_channel_v1_Packet {
    /* number corresponds to the order of sends and receives, where a Packet
 with an earlier sequence number must be sent and received before a Packet
 with a later sequence number. */
    uint64_t sequence;
    /* identifies the port on the sending chain. */
    pb_callback_t source_port;
    /* identifies the channel end on the sending chain. */
    pb_callback_t source_channel;
    /* identifies the port on the receiving chain. */
    pb_callback_t destination_port;
    /* identifies the channel end on the receiving chain. */
    pb_callback_t destination_channel;
    /* actual opaque bytes transferred directly to the application module */
    pb_callback_t data;
    /* block height after which the packet times out */
    bool has_timeout_height;
    ibc_core_client_v1_Height timeout_height;
    /* block timestamp (in nanoseconds) after which the packet times out */
    uint64_t timeout_timestamp;
} ibc_core_channel_v1_Packet;

/* PacketState defines the generic type necessary to retrieve and store
 packet commitments, acknowledgements, and receipts.
 Caller is responsible for knowing the context necessary to interpret this
 state as a commitment, acknowledgement, or a receipt. */
typedef struct _ibc_core_channel_v1_PacketState {
    /* channel port identifier. */
    pb_callback_t port_id;
    /* channel unique identifier. */
    pb_callback_t channel_id;
    /* packet sequence. */
    uint64_t sequence;
    /* embedded data that represents packet state. */
    pb_callback_t data;
} ibc_core_channel_v1_PacketState;

/* PacketId is an identifer for a unique Packet
 Source chains refer to packets by source port/channel
 Destination chains refer to packets by destination port/channel */
typedef struct _ibc_core_channel_v1_PacketId {
    /* channel port identifier */
    pb_callback_t port_id;
    /* channel unique identifier */
    pb_callback_t channel_id;
    /* packet sequence */
    uint64_t sequence;
} ibc_core_channel_v1_PacketId;

/* Acknowledgement is the recommended acknowledgement format to be used by
 app-specific protocols.
 NOTE: The field numbers 21 and 22 were explicitly chosen to avoid accidental
 conflicts with other protobuf message formats used for acknowledgements.
 The first byte of any message with this format will be the non-ASCII values
 `0xaa` (result) or `0xb2` (error). Implemented as defined by ICS:
 https://github.com/cosmos/ibc/tree/master/spec/core/ics-004-channel-and-packet-semantics#acknowledgement-envelope */
typedef struct _ibc_core_channel_v1_Acknowledgement {
    pb_size_t which_response;
    union {
        pb_callback_t result;
        pb_callback_t error;
    } response;
} ibc_core_channel_v1_Acknowledgement;

/* Timeout defines an execution deadline structure for 04-channel handlers.
 This includes packet lifecycle handlers as well as the upgrade handshake handlers.
 A valid Timeout contains either one or both of a timestamp and block height (sequence). */
typedef struct _ibc_core_channel_v1_Timeout {
    /* block height after which the packet or upgrade times out */
    bool has_height;
    ibc_core_client_v1_Height height;
    /* block timestamp (in nanoseconds) after which the packet or upgrade times out */
    uint64_t timestamp;
} ibc_core_channel_v1_Timeout;

#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _ibc_core_channel_v1_State_MIN ibc_core_channel_v1_State_STATE_UNINITIALIZED_UNSPECIFIED
#define _ibc_core_channel_v1_State_MAX ibc_core_channel_v1_State_STATE_CLOSED
#define _ibc_core_channel_v1_State_ARRAYSIZE ((ibc_core_channel_v1_State)(ibc_core_channel_v1_State_STATE_CLOSED + 1))

#define _ibc_core_channel_v1_Order_MIN ibc_core_channel_v1_Order_ORDER_NONE_UNSPECIFIED
#define _ibc_core_channel_v1_Order_MAX ibc_core_channel_v1_Order_ORDER_ORDERED
#define _ibc_core_channel_v1_Order_ARRAYSIZE ((ibc_core_channel_v1_Order)(ibc_core_channel_v1_Order_ORDER_ORDERED + 1))

#define ibc_core_channel_v1_Channel_state_ENUMTYPE ibc_core_channel_v1_State
#define ibc_core_channel_v1_Channel_ordering_ENUMTYPE ibc_core_channel_v1_Order

#define ibc_core_channel_v1_IdentifiedChannel_state_ENUMTYPE ibc_core_channel_v1_State
#define ibc_core_channel_v1_IdentifiedChannel_ordering_ENUMTYPE ibc_core_channel_v1_Order

/* Initializer values for message structs */
#define ibc_core_channel_v1_Channel_init_default                               \
    {                                                                          \
        _ibc_core_channel_v1_State_MIN, _ibc_core_channel_v1_Order_MIN, false, \
            ibc_core_channel_v1_Counterparty_init_default, {{NULL}, NULL}, {   \
            {NULL}, NULL                                                       \
        }                                                                      \
    }
#define ibc_core_channel_v1_IdentifiedChannel_init_default                                                   \
    {                                                                                                        \
        _ibc_core_channel_v1_State_MIN, _ibc_core_channel_v1_Order_MIN, false,                               \
            ibc_core_channel_v1_Counterparty_init_default, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, { \
            {NULL}, NULL                                                                                     \
        }                                                                                                    \
    }
#define ibc_core_channel_v1_Counterparty_init_default \
    {                                                 \
        {{NULL}, NULL}, { {NULL}, NULL }              \
    }
#define ibc_core_channel_v1_Packet_init_default                                                   \
    {                                                                                             \
        0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, \
            ibc_core_client_v1_Height_init_default, 0                                             \
    }
#define ibc_core_channel_v1_PacketState_init_default        \
    {                                                       \
        {{NULL}, NULL}, {{NULL}, NULL}, 0, { {NULL}, NULL } \
    }
#define ibc_core_channel_v1_PacketId_init_default \
    { {{NULL}, NULL}, {{NULL}, NULL}, 0 }
#define ibc_core_channel_v1_Acknowledgement_init_default \
    {                                                    \
        0, {                                             \
            { {NULL}, NULL }                             \
        }                                                \
    }
#define ibc_core_channel_v1_Timeout_init_default \
    { false, ibc_core_client_v1_Height_init_default, 0 }
#define ibc_core_channel_v1_Channel_init_zero                                                                              \
    {                                                                                                                      \
        _ibc_core_channel_v1_State_MIN, _ibc_core_channel_v1_Order_MIN, false, ibc_core_channel_v1_Counterparty_init_zero, \
            {{NULL}, NULL}, {                                                                                              \
            {NULL}, NULL                                                                                                   \
        }                                                                                                                  \
    }
#define ibc_core_channel_v1_IdentifiedChannel_init_zero                                                                    \
    {                                                                                                                      \
        _ibc_core_channel_v1_State_MIN, _ibc_core_channel_v1_Order_MIN, false, ibc_core_channel_v1_Counterparty_init_zero, \
            {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {                                                              \
            {NULL}, NULL                                                                                                   \
        }                                                                                                                  \
    }
#define ibc_core_channel_v1_Counterparty_init_zero \
    {                                              \
        {{NULL}, NULL}, { {NULL}, NULL }           \
    }
#define ibc_core_channel_v1_Packet_init_zero                                                      \
    {                                                                                             \
        0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, \
            ibc_core_client_v1_Height_init_zero, 0                                                \
    }
#define ibc_core_channel_v1_PacketState_init_zero           \
    {                                                       \
        {{NULL}, NULL}, {{NULL}, NULL}, 0, { {NULL}, NULL } \
    }
#define ibc_core_channel_v1_PacketId_init_zero \
    { {{NULL}, NULL}, {{NULL}, NULL}, 0 }
#define ibc_core_channel_v1_Acknowledgement_init_zero \
    {                                                 \
        0, {                                          \
            { {NULL}, NULL }                          \
        }                                             \
    }
#define ibc_core_channel_v1_Timeout_init_zero \
    { false, ibc_core_client_v1_Height_init_zero, 0 }

/* Field tags (for use in manual encoding/decoding) */
#define ibc_core_channel_v1_Counterparty_port_id_tag 1
#define ibc_core_channel_v1_Counterparty_channel_id_tag 2
#define ibc_core_channel_v1_Channel_state_tag 1
#define ibc_core_channel_v1_Channel_ordering_tag 2
#define ibc_core_channel_v1_Channel_counterparty_tag 3
#define ibc_core_channel_v1_Channel_connection_hops_tag 4
#define ibc_core_channel_v1_Channel_version_tag 5
#define ibc_core_channel_v1_IdentifiedChannel_state_tag 1
#define ibc_core_channel_v1_IdentifiedChannel_ordering_tag 2
#define ibc_core_channel_v1_IdentifiedChannel_counterparty_tag 3
#define ibc_core_channel_v1_IdentifiedChannel_connection_hops_tag 4
#define ibc_core_channel_v1_IdentifiedChannel_version_tag 5
#define ibc_core_channel_v1_IdentifiedChannel_port_id_tag 6
#define ibc_core_channel_v1_IdentifiedChannel_channel_id_tag 7
#define ibc_core_channel_v1_Packet_sequence_tag 1
#define ibc_core_channel_v1_Packet_source_port_tag 2
#define ibc_core_channel_v1_Packet_source_channel_tag 3
#define ibc_core_channel_v1_Packet_destination_port_tag 4
#define ibc_core_channel_v1_Packet_destination_channel_tag 5
#define ibc_core_channel_v1_Packet_data_tag 6
#define ibc_core_channel_v1_Packet_timeout_height_tag 7
#define ibc_core_channel_v1_Packet_timeout_timestamp_tag 8
#define ibc_core_channel_v1_PacketState_port_id_tag 1
#define ibc_core_channel_v1_PacketState_channel_id_tag 2
#define ibc_core_channel_v1_PacketState_sequence_tag 3
#define ibc_core_channel_v1_PacketState_data_tag 4
#define ibc_core_channel_v1_PacketId_port_id_tag 1
#define ibc_core_channel_v1_PacketId_channel_id_tag 2
#define ibc_core_channel_v1_PacketId_sequence_tag 3
#define ibc_core_channel_v1_Acknowledgement_result_tag 21
#define ibc_core_channel_v1_Acknowledgement_error_tag 22
#define ibc_core_channel_v1_Timeout_height_tag 1
#define ibc_core_channel_v1_Timeout_timestamp_tag 2

/* Struct field encoding specification for nanopb */
#define ibc_core_channel_v1_Channel_FIELDLIST(X, a)      \
    X(a, STATIC, SINGULAR, UENUM, state, 1)              \
    X(a, STATIC, SINGULAR, UENUM, ordering, 2)           \
    X(a, STATIC, OPTIONAL, MESSAGE, counterparty, 3)     \
    X(a, CALLBACK, REPEATED, STRING, connection_hops, 4) \
    X(a, CALLBACK, SINGULAR, STRING, version, 5)
#define ibc_core_channel_v1_Channel_CALLBACK pb_default_field_callback
#define ibc_core_channel_v1_Channel_DEFAULT NULL
#define ibc_core_channel_v1_Channel_counterparty_MSGTYPE ibc_core_channel_v1_Counterparty

#define ibc_core_channel_v1_IdentifiedChannel_FIELDLIST(X, a) \
    X(a, STATIC, SINGULAR, UENUM, state, 1)                   \
    X(a, STATIC, SINGULAR, UENUM, ordering, 2)                \
    X(a, STATIC, OPTIONAL, MESSAGE, counterparty, 3)          \
    X(a, CALLBACK, REPEATED, STRING, connection_hops, 4)      \
    X(a, CALLBACK, SINGULAR, STRING, version, 5)              \
    X(a, CALLBACK, SINGULAR, STRING, port_id, 6)              \
    X(a, CALLBACK, SINGULAR, STRING, channel_id, 7)
#define ibc_core_channel_v1_IdentifiedChannel_CALLBACK pb_default_field_callback
#define ibc_core_channel_v1_IdentifiedChannel_DEFAULT NULL
#define ibc_core_channel_v1_IdentifiedChannel_counterparty_MSGTYPE ibc_core_channel_v1_Counterparty

#define ibc_core_channel_v1_Counterparty_FIELDLIST(X, a) \
    X(a, CALLBACK, SINGULAR, STRING, port_id, 1)         \
    X(a, CALLBACK, SINGULAR, STRING, channel_id, 2)
#define ibc_core_channel_v1_Counterparty_CALLBACK pb_default_field_callback
#define ibc_core_channel_v1_Counterparty_DEFAULT NULL

#define ibc_core_channel_v1_Packet_FIELDLIST(X, a)           \
    X(a, STATIC, SINGULAR, UINT64, sequence, 1)              \
    X(a, CALLBACK, SINGULAR, STRING, source_port, 2)         \
    X(a, CALLBACK, SINGULAR, STRING, source_channel, 3)      \
    X(a, CALLBACK, SINGULAR, STRING, destination_port, 4)    \
    X(a, CALLBACK, SINGULAR, STRING, destination_channel, 5) \
    X(a, CALLBACK, SINGULAR, BYTES, data, 6)                 \
    X(a, STATIC, OPTIONAL, MESSAGE, timeout_height, 7)       \
    X(a, STATIC, SINGULAR, UINT64, timeout_timestamp, 8)
#define ibc_core_channel_v1_Packet_CALLBACK pb_default_field_callback
#define ibc_core_channel_v1_Packet_DEFAULT NULL
#define ibc_core_channel_v1_Packet_timeout_height_MSGTYPE ibc_core_client_v1_Height

#define ibc_core_channel_v1_PacketState_FIELDLIST(X, a) \
    X(a, CALLBACK, SINGULAR, STRING, port_id, 1)        \
    X(a, CALLBACK, SINGULAR, STRING, channel_id, 2)     \
    X(a, STATIC, SINGULAR, UINT64, sequence, 3)         \
    X(a, CALLBACK, SINGULAR, BYTES, data, 4)
#define ibc_core_channel_v1_PacketState_CALLBACK pb_default_field_callback
#define ibc_core_channel_v1_PacketState_DEFAULT NULL

#define ibc_core_channel_v1_PacketId_FIELDLIST(X, a) \
    X(a, CALLBACK, SINGULAR, STRING, port_id, 1)     \
    X(a, CALLBACK, SINGULAR, STRING, channel_id, 2)  \
    X(a, STATIC, SINGULAR, UINT64, sequence, 3)
#define ibc_core_channel_v1_PacketId_CALLBACK pb_default_field_callback
#define ibc_core_channel_v1_PacketId_DEFAULT NULL

#define ibc_core_channel_v1_Acknowledgement_FIELDLIST(X, a)               \
    X(a, CALLBACK, ONEOF, BYTES, (response, result, response.result), 21) \
    X(a, CALLBACK, ONEOF, STRING, (response, error, response.error), 22)
#define ibc_core_channel_v1_Acknowledgement_CALLBACK pb_default_field_callback
#define ibc_core_channel_v1_Acknowledgement_DEFAULT NULL

#define ibc_core_channel_v1_Timeout_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, height, 1)      \
    X(a, STATIC, SINGULAR, UINT64, timestamp, 2)
#define ibc_core_channel_v1_Timeout_CALLBACK NULL
#define ibc_core_channel_v1_Timeout_DEFAULT NULL
#define ibc_core_channel_v1_Timeout_height_MSGTYPE ibc_core_client_v1_Height

extern const pb_msgdesc_t ibc_core_channel_v1_Channel_msg;
extern const pb_msgdesc_t ibc_core_channel_v1_IdentifiedChannel_msg;
extern const pb_msgdesc_t ibc_core_channel_v1_Counterparty_msg;
extern const pb_msgdesc_t ibc_core_channel_v1_Packet_msg;
extern const pb_msgdesc_t ibc_core_channel_v1_PacketState_msg;
extern const pb_msgdesc_t ibc_core_channel_v1_PacketId_msg;
extern const pb_msgdesc_t ibc_core_channel_v1_Acknowledgement_msg;
extern const pb_msgdesc_t ibc_core_channel_v1_Timeout_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define ibc_core_channel_v1_Channel_fields &ibc_core_channel_v1_Channel_msg
#define ibc_core_channel_v1_IdentifiedChannel_fields &ibc_core_channel_v1_IdentifiedChannel_msg
#define ibc_core_channel_v1_Counterparty_fields &ibc_core_channel_v1_Counterparty_msg
#define ibc_core_channel_v1_Packet_fields &ibc_core_channel_v1_Packet_msg
#define ibc_core_channel_v1_PacketState_fields &ibc_core_channel_v1_PacketState_msg
#define ibc_core_channel_v1_PacketId_fields &ibc_core_channel_v1_PacketId_msg
#define ibc_core_channel_v1_Acknowledgement_fields &ibc_core_channel_v1_Acknowledgement_msg
#define ibc_core_channel_v1_Timeout_fields &ibc_core_channel_v1_Timeout_msg

/* Maximum encoded size of messages (where known) */
/* ibc_core_channel_v1_Channel_size depends on runtime parameters */
/* ibc_core_channel_v1_IdentifiedChannel_size depends on runtime parameters */
/* ibc_core_channel_v1_Counterparty_size depends on runtime parameters */
/* ibc_core_channel_v1_Packet_size depends on runtime parameters */
/* ibc_core_channel_v1_PacketState_size depends on runtime parameters */
/* ibc_core_channel_v1_PacketId_size depends on runtime parameters */
/* ibc_core_channel_v1_Acknowledgement_size depends on runtime parameters */
#define IBC_CORE_CHANNEL_V1_IBC_CORE_CHANNEL_V1_CHANNEL_PB_H_MAX_SIZE ibc_core_channel_v1_Timeout_size
#define ibc_core_channel_v1_Timeout_size 35

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
