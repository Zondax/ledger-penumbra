/* automatically generated by rust-bindgen 0.69.5 */

pub const PB_FIELD_32BIT: u32 = 1;
pub const __has_safe_buffers: u32 = 0;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_EXTSN: &[u8; 14] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_VERS_1050: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __has_ptrcheck: u32 = 0;
pub const __DARWIN_CLK_TCK: u32 = 100;
pub const MB_LEN_MAX: u32 = 6;
pub const CLK_TCK: u32 = 100;
pub const CHAR_BIT: u32 = 8;
pub const SCHAR_MAX: u32 = 127;
pub const SCHAR_MIN: i32 = -128;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MAX: u32 = 127;
pub const CHAR_MIN: i32 = -128;
pub const USHRT_MAX: u32 = 65535;
pub const SHRT_MAX: u32 = 32767;
pub const SHRT_MIN: i32 = -32768;
pub const UINT_MAX: u32 = 4294967295;
pub const INT_MAX: u32 = 2147483647;
pub const INT_MIN: i32 = -2147483648;
pub const ULONG_MAX: i32 = -1;
pub const LONG_MAX: u64 = 9223372036854775807;
pub const LONG_MIN: i64 = -9223372036854775808;
pub const ULLONG_MAX: i32 = -1;
pub const LLONG_MAX: u64 = 9223372036854775807;
pub const LLONG_MIN: i64 = -9223372036854775808;
pub const LONG_BIT: u32 = 64;
pub const SSIZE_MAX: u64 = 9223372036854775807;
pub const WORD_BIT: u32 = 32;
pub const SIZE_T_MAX: i32 = -1;
pub const UQUAD_MAX: i32 = -1;
pub const QUAD_MAX: u64 = 9223372036854775807;
pub const QUAD_MIN: i64 = -9223372036854775808;
pub const ARG_MAX: u32 = 1048576;
pub const CHILD_MAX: u32 = 266;
pub const GID_MAX: u32 = 2147483647;
pub const LINK_MAX: u32 = 32767;
pub const MAX_CANON: u32 = 1024;
pub const MAX_INPUT: u32 = 1024;
pub const NAME_MAX: u32 = 255;
pub const NGROUPS_MAX: u32 = 16;
pub const UID_MAX: u32 = 2147483647;
pub const OPEN_MAX: u32 = 10240;
pub const PATH_MAX: u32 = 1024;
pub const PIPE_BUF: u32 = 512;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const CHARCLASS_NAME_MAX: u32 = 14;
pub const COLL_WEIGHTS_MAX: u32 = 2;
pub const EQUIV_CLASS_MAX: u32 = 2;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 255;
pub const NZERO: u32 = 20;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_EQUIV_CLASS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_KEYS_MAX: u32 = 512;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_SS_REPL_MAX: u32 = 4;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TRACE_EVENT_NAME_MAX: u32 = 30;
pub const _POSIX_TRACE_NAME_MAX: u32 = 8;
pub const _POSIX_TRACE_SYS_MAX: u32 = 8;
pub const _POSIX_TRACE_USER_EVENT_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const OFF_MIN: i64 = -9223372036854775808;
pub const OFF_MAX: u64 = 9223372036854775807;
pub const PASS_MAX: u32 = 128;
pub const NL_ARGMAX: u32 = 9;
pub const NL_LANGMAX: u32 = 14;
pub const NL_MSGMAX: u32 = 32767;
pub const NL_NMAX: u32 = 1;
pub const NL_SETMAX: u32 = 255;
pub const NL_TEXTMAX: u32 = 2048;
pub const _XOPEN_IOV_MAX: u32 = 16;
pub const IOV_MAX: u32 = 1024;
pub const _XOPEN_NAME_MAX: u32 = 255;
pub const _XOPEN_PATH_MAX: u32 = 1024;
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __WORDSIZE: u32 = 64;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_IOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACCATALYST: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_WATCHOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_TVOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_DRIVERKIT: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_VISIONOS: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_14_5: u32 = 101405;
pub const __MAC_10_14_6: u32 = 101406;
pub const __MAC_10_15: u32 = 101500;
pub const __MAC_10_15_1: u32 = 101501;
pub const __MAC_10_15_4: u32 = 101504;
pub const __MAC_10_16: u32 = 101600;
pub const __MAC_11_0: u32 = 110000;
pub const __MAC_11_1: u32 = 110100;
pub const __MAC_11_3: u32 = 110300;
pub const __MAC_11_4: u32 = 110400;
pub const __MAC_11_5: u32 = 110500;
pub const __MAC_11_6: u32 = 110600;
pub const __MAC_12_0: u32 = 120000;
pub const __MAC_12_1: u32 = 120100;
pub const __MAC_12_2: u32 = 120200;
pub const __MAC_12_3: u32 = 120300;
pub const __MAC_12_4: u32 = 120400;
pub const __MAC_12_5: u32 = 120500;
pub const __MAC_12_6: u32 = 120600;
pub const __MAC_12_7: u32 = 120700;
pub const __MAC_13_0: u32 = 130000;
pub const __MAC_13_1: u32 = 130100;
pub const __MAC_13_2: u32 = 130200;
pub const __MAC_13_3: u32 = 130300;
pub const __MAC_13_4: u32 = 130400;
pub const __MAC_13_5: u32 = 130500;
pub const __MAC_13_6: u32 = 130600;
pub const __MAC_14_0: u32 = 140000;
pub const __MAC_14_1: u32 = 140100;
pub const __MAC_14_2: u32 = 140200;
pub const __MAC_14_3: u32 = 140300;
pub const __MAC_14_4: u32 = 140400;
pub const __MAC_14_5: u32 = 140500;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_12_4: u32 = 120400;
pub const __IPHONE_13_0: u32 = 130000;
pub const __IPHONE_13_1: u32 = 130100;
pub const __IPHONE_13_2: u32 = 130200;
pub const __IPHONE_13_3: u32 = 130300;
pub const __IPHONE_13_4: u32 = 130400;
pub const __IPHONE_13_5: u32 = 130500;
pub const __IPHONE_13_6: u32 = 130600;
pub const __IPHONE_13_7: u32 = 130700;
pub const __IPHONE_14_0: u32 = 140000;
pub const __IPHONE_14_1: u32 = 140100;
pub const __IPHONE_14_2: u32 = 140200;
pub const __IPHONE_14_3: u32 = 140300;
pub const __IPHONE_14_5: u32 = 140500;
pub const __IPHONE_14_4: u32 = 140400;
pub const __IPHONE_14_6: u32 = 140600;
pub const __IPHONE_14_7: u32 = 140700;
pub const __IPHONE_14_8: u32 = 140800;
pub const __IPHONE_15_0: u32 = 150000;
pub const __IPHONE_15_1: u32 = 150100;
pub const __IPHONE_15_2: u32 = 150200;
pub const __IPHONE_15_3: u32 = 150300;
pub const __IPHONE_15_4: u32 = 150400;
pub const __IPHONE_15_5: u32 = 150500;
pub const __IPHONE_15_6: u32 = 150600;
pub const __IPHONE_15_7: u32 = 150700;
pub const __IPHONE_15_8: u32 = 150800;
pub const __IPHONE_16_0: u32 = 160000;
pub const __IPHONE_16_1: u32 = 160100;
pub const __IPHONE_16_2: u32 = 160200;
pub const __IPHONE_16_3: u32 = 160300;
pub const __IPHONE_16_4: u32 = 160400;
pub const __IPHONE_16_5: u32 = 160500;
pub const __IPHONE_16_6: u32 = 160600;
pub const __IPHONE_16_7: u32 = 160700;
pub const __IPHONE_17_0: u32 = 170000;
pub const __IPHONE_17_1: u32 = 170100;
pub const __IPHONE_17_2: u32 = 170200;
pub const __IPHONE_17_3: u32 = 170300;
pub const __IPHONE_17_4: u32 = 170400;
pub const __IPHONE_17_5: u32 = 170500;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_5_3: u32 = 50300;
pub const __WATCHOS_6_0: u32 = 60000;
pub const __WATCHOS_6_1: u32 = 60100;
pub const __WATCHOS_6_2: u32 = 60200;
pub const __WATCHOS_7_0: u32 = 70000;
pub const __WATCHOS_7_1: u32 = 70100;
pub const __WATCHOS_7_2: u32 = 70200;
pub const __WATCHOS_7_3: u32 = 70300;
pub const __WATCHOS_7_4: u32 = 70400;
pub const __WATCHOS_7_5: u32 = 70500;
pub const __WATCHOS_7_6: u32 = 70600;
pub const __WATCHOS_8_0: u32 = 80000;
pub const __WATCHOS_8_1: u32 = 80100;
pub const __WATCHOS_8_3: u32 = 80300;
pub const __WATCHOS_8_4: u32 = 80400;
pub const __WATCHOS_8_5: u32 = 80500;
pub const __WATCHOS_8_6: u32 = 80600;
pub const __WATCHOS_8_7: u32 = 80700;
pub const __WATCHOS_8_8: u32 = 80800;
pub const __WATCHOS_9_0: u32 = 90000;
pub const __WATCHOS_9_1: u32 = 90100;
pub const __WATCHOS_9_2: u32 = 90200;
pub const __WATCHOS_9_3: u32 = 90300;
pub const __WATCHOS_9_4: u32 = 90400;
pub const __WATCHOS_9_5: u32 = 90500;
pub const __WATCHOS_9_6: u32 = 90600;
pub const __WATCHOS_10_0: u32 = 100000;
pub const __WATCHOS_10_1: u32 = 100100;
pub const __WATCHOS_10_2: u32 = 100200;
pub const __WATCHOS_10_3: u32 = 100300;
pub const __WATCHOS_10_4: u32 = 100400;
pub const __WATCHOS_10_5: u32 = 100500;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_12_4: u32 = 120400;
pub const __TVOS_13_0: u32 = 130000;
pub const __TVOS_13_2: u32 = 130200;
pub const __TVOS_13_3: u32 = 130300;
pub const __TVOS_13_4: u32 = 130400;
pub const __TVOS_14_0: u32 = 140000;
pub const __TVOS_14_1: u32 = 140100;
pub const __TVOS_14_2: u32 = 140200;
pub const __TVOS_14_3: u32 = 140300;
pub const __TVOS_14_5: u32 = 140500;
pub const __TVOS_14_6: u32 = 140600;
pub const __TVOS_14_7: u32 = 140700;
pub const __TVOS_15_0: u32 = 150000;
pub const __TVOS_15_1: u32 = 150100;
pub const __TVOS_15_2: u32 = 150200;
pub const __TVOS_15_3: u32 = 150300;
pub const __TVOS_15_4: u32 = 150400;
pub const __TVOS_15_5: u32 = 150500;
pub const __TVOS_15_6: u32 = 150600;
pub const __TVOS_16_0: u32 = 160000;
pub const __TVOS_16_1: u32 = 160100;
pub const __TVOS_16_2: u32 = 160200;
pub const __TVOS_16_3: u32 = 160300;
pub const __TVOS_16_4: u32 = 160400;
pub const __TVOS_16_5: u32 = 160500;
pub const __TVOS_16_6: u32 = 160600;
pub const __TVOS_17_0: u32 = 170000;
pub const __TVOS_17_1: u32 = 170100;
pub const __TVOS_17_2: u32 = 170200;
pub const __TVOS_17_3: u32 = 170300;
pub const __TVOS_17_4: u32 = 170400;
pub const __TVOS_17_5: u32 = 170500;
pub const __BRIDGEOS_2_0: u32 = 20000;
pub const __BRIDGEOS_3_0: u32 = 30000;
pub const __BRIDGEOS_3_1: u32 = 30100;
pub const __BRIDGEOS_3_4: u32 = 30400;
pub const __BRIDGEOS_4_0: u32 = 40000;
pub const __BRIDGEOS_4_1: u32 = 40100;
pub const __BRIDGEOS_5_0: u32 = 50000;
pub const __BRIDGEOS_5_1: u32 = 50100;
pub const __BRIDGEOS_5_3: u32 = 50300;
pub const __BRIDGEOS_6_0: u32 = 60000;
pub const __BRIDGEOS_6_2: u32 = 60200;
pub const __BRIDGEOS_6_4: u32 = 60400;
pub const __BRIDGEOS_6_5: u32 = 60500;
pub const __BRIDGEOS_6_6: u32 = 60600;
pub const __BRIDGEOS_7_0: u32 = 70000;
pub const __BRIDGEOS_7_1: u32 = 70100;
pub const __BRIDGEOS_7_2: u32 = 70200;
pub const __BRIDGEOS_7_3: u32 = 70300;
pub const __BRIDGEOS_7_4: u32 = 70400;
pub const __BRIDGEOS_7_6: u32 = 70600;
pub const __BRIDGEOS_8_0: u32 = 80000;
pub const __BRIDGEOS_8_1: u32 = 80100;
pub const __BRIDGEOS_8_2: u32 = 80200;
pub const __BRIDGEOS_8_3: u32 = 80300;
pub const __BRIDGEOS_8_4: u32 = 80400;
pub const __BRIDGEOS_8_5: u32 = 80500;
pub const __DRIVERKIT_19_0: u32 = 190000;
pub const __DRIVERKIT_20_0: u32 = 200000;
pub const __DRIVERKIT_21_0: u32 = 210000;
pub const __DRIVERKIT_22_0: u32 = 220000;
pub const __DRIVERKIT_22_4: u32 = 220400;
pub const __DRIVERKIT_22_5: u32 = 220500;
pub const __DRIVERKIT_22_6: u32 = 220600;
pub const __DRIVERKIT_23_0: u32 = 230000;
pub const __DRIVERKIT_23_1: u32 = 230100;
pub const __DRIVERKIT_23_2: u32 = 230200;
pub const __DRIVERKIT_23_3: u32 = 230300;
pub const __DRIVERKIT_23_4: u32 = 230400;
pub const __DRIVERKIT_23_5: u32 = 230500;
pub const __VISIONOS_1_0: u32 = 10000;
pub const __VISIONOS_1_1: u32 = 10100;
pub const __VISIONOS_1_2: u32 = 10200;
pub const MAC_OS_X_VERSION_10_0: u32 = 1000;
pub const MAC_OS_X_VERSION_10_1: u32 = 1010;
pub const MAC_OS_X_VERSION_10_2: u32 = 1020;
pub const MAC_OS_X_VERSION_10_3: u32 = 1030;
pub const MAC_OS_X_VERSION_10_4: u32 = 1040;
pub const MAC_OS_X_VERSION_10_5: u32 = 1050;
pub const MAC_OS_X_VERSION_10_6: u32 = 1060;
pub const MAC_OS_X_VERSION_10_7: u32 = 1070;
pub const MAC_OS_X_VERSION_10_8: u32 = 1080;
pub const MAC_OS_X_VERSION_10_9: u32 = 1090;
pub const MAC_OS_X_VERSION_10_10: u32 = 101000;
pub const MAC_OS_X_VERSION_10_10_2: u32 = 101002;
pub const MAC_OS_X_VERSION_10_10_3: u32 = 101003;
pub const MAC_OS_X_VERSION_10_11: u32 = 101100;
pub const MAC_OS_X_VERSION_10_11_2: u32 = 101102;
pub const MAC_OS_X_VERSION_10_11_3: u32 = 101103;
pub const MAC_OS_X_VERSION_10_11_4: u32 = 101104;
pub const MAC_OS_X_VERSION_10_12: u32 = 101200;
pub const MAC_OS_X_VERSION_10_12_1: u32 = 101201;
pub const MAC_OS_X_VERSION_10_12_2: u32 = 101202;
pub const MAC_OS_X_VERSION_10_12_4: u32 = 101204;
pub const MAC_OS_X_VERSION_10_13: u32 = 101300;
pub const MAC_OS_X_VERSION_10_13_1: u32 = 101301;
pub const MAC_OS_X_VERSION_10_13_2: u32 = 101302;
pub const MAC_OS_X_VERSION_10_13_4: u32 = 101304;
pub const MAC_OS_X_VERSION_10_14: u32 = 101400;
pub const MAC_OS_X_VERSION_10_14_1: u32 = 101401;
pub const MAC_OS_X_VERSION_10_14_4: u32 = 101404;
pub const MAC_OS_X_VERSION_10_14_5: u32 = 101405;
pub const MAC_OS_X_VERSION_10_14_6: u32 = 101406;
pub const MAC_OS_X_VERSION_10_15: u32 = 101500;
pub const MAC_OS_X_VERSION_10_15_1: u32 = 101501;
pub const MAC_OS_X_VERSION_10_15_4: u32 = 101504;
pub const MAC_OS_X_VERSION_10_16: u32 = 101600;
pub const MAC_OS_VERSION_11_0: u32 = 110000;
pub const MAC_OS_VERSION_11_1: u32 = 110100;
pub const MAC_OS_VERSION_11_3: u32 = 110300;
pub const MAC_OS_VERSION_11_4: u32 = 110400;
pub const MAC_OS_VERSION_11_5: u32 = 110500;
pub const MAC_OS_VERSION_11_6: u32 = 110600;
pub const MAC_OS_VERSION_12_0: u32 = 120000;
pub const MAC_OS_VERSION_12_1: u32 = 120100;
pub const MAC_OS_VERSION_12_2: u32 = 120200;
pub const MAC_OS_VERSION_12_3: u32 = 120300;
pub const MAC_OS_VERSION_12_4: u32 = 120400;
pub const MAC_OS_VERSION_12_5: u32 = 120500;
pub const MAC_OS_VERSION_12_6: u32 = 120600;
pub const MAC_OS_VERSION_12_7: u32 = 120700;
pub const MAC_OS_VERSION_13_0: u32 = 130000;
pub const MAC_OS_VERSION_13_1: u32 = 130100;
pub const MAC_OS_VERSION_13_2: u32 = 130200;
pub const MAC_OS_VERSION_13_3: u32 = 130300;
pub const MAC_OS_VERSION_13_4: u32 = 130400;
pub const MAC_OS_VERSION_13_5: u32 = 130500;
pub const MAC_OS_VERSION_13_6: u32 = 130600;
pub const MAC_OS_VERSION_14_0: u32 = 140000;
pub const MAC_OS_VERSION_14_1: u32 = 140100;
pub const MAC_OS_VERSION_14_2: u32 = 140200;
pub const MAC_OS_VERSION_14_3: u32 = 140300;
pub const MAC_OS_VERSION_14_4: u32 = 140400;
pub const MAC_OS_VERSION_14_5: u32 = 140500;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 140500;
pub const __ENABLE_LEGACY_MAC_AVAILABILITY: u32 = 1;
pub const _USE_FORTIFY_LEVEL: u32 = 2;
pub const __HAS_FIXED_CHK_PROTOTYPES: u32 = 1;
pub const PB_MAX_REQUIRED_FIELDS: u32 = 64;
pub const PB_LTYPE_BOOL: u32 = 0;
pub const PB_LTYPE_VARINT: u32 = 1;
pub const PB_LTYPE_UVARINT: u32 = 2;
pub const PB_LTYPE_SVARINT: u32 = 3;
pub const PB_LTYPE_FIXED32: u32 = 4;
pub const PB_LTYPE_FIXED64: u32 = 5;
pub const PB_LTYPE_LAST_PACKABLE: u32 = 5;
pub const PB_LTYPE_BYTES: u32 = 6;
pub const PB_LTYPE_STRING: u32 = 7;
pub const PB_LTYPE_SUBMESSAGE: u32 = 8;
pub const PB_LTYPE_SUBMSG_W_CB: u32 = 9;
pub const PB_LTYPE_EXTENSION: u32 = 10;
pub const PB_LTYPE_FIXED_LENGTH_BYTES: u32 = 11;
pub const PB_LTYPES_COUNT: u32 = 12;
pub const PB_LTYPE_MASK: u32 = 15;
pub const PB_HTYPE_REQUIRED: u32 = 0;
pub const PB_HTYPE_OPTIONAL: u32 = 16;
pub const PB_HTYPE_SINGULAR: u32 = 16;
pub const PB_HTYPE_REPEATED: u32 = 32;
pub const PB_HTYPE_FIXARRAY: u32 = 32;
pub const PB_HTYPE_ONEOF: u32 = 48;
pub const PB_HTYPE_MASK: u32 = 48;
pub const PB_ATYPE_STATIC: u32 = 0;
pub const PB_ATYPE_POINTER: u32 = 128;
pub const PB_ATYPE_CALLBACK: u32 = 64;
pub const PB_ATYPE_MASK: u32 = 192;
pub const PB_PROTO_HEADER_VERSION: u32 = 40;
pub const PB_FI_WIDTH_PB_LTYPE_BOOL: u32 = 1;
pub const PB_FI_WIDTH_PB_LTYPE_BYTES: u32 = 2;
pub const PB_FI_WIDTH_PB_LTYPE_DOUBLE: u32 = 1;
pub const PB_FI_WIDTH_PB_LTYPE_ENUM: u32 = 1;
pub const PB_FI_WIDTH_PB_LTYPE_UENUM: u32 = 1;
pub const PB_FI_WIDTH_PB_LTYPE_FIXED32: u32 = 1;
pub const PB_FI_WIDTH_PB_LTYPE_FIXED64: u32 = 1;
pub const PB_FI_WIDTH_PB_LTYPE_FLOAT: u32 = 1;
pub const PB_FI_WIDTH_PB_LTYPE_INT32: u32 = 1;
pub const PB_FI_WIDTH_PB_LTYPE_INT64: u32 = 1;
pub const PB_FI_WIDTH_PB_LTYPE_MESSAGE: u32 = 2;
pub const PB_FI_WIDTH_PB_LTYPE_MSG_W_CB: u32 = 2;
pub const PB_FI_WIDTH_PB_LTYPE_SFIXED32: u32 = 1;
pub const PB_FI_WIDTH_PB_LTYPE_SFIXED64: u32 = 1;
pub const PB_FI_WIDTH_PB_LTYPE_SINT32: u32 = 1;
pub const PB_FI_WIDTH_PB_LTYPE_SINT64: u32 = 1;
pub const PB_FI_WIDTH_PB_LTYPE_STRING: u32 = 2;
pub const PB_FI_WIDTH_PB_LTYPE_UINT32: u32 = 1;
pub const PB_FI_WIDTH_PB_LTYPE_UINT64: u32 = 1;
pub const PB_FI_WIDTH_PB_LTYPE_EXTENSION: u32 = 1;
pub const PB_FI_WIDTH_PB_LTYPE_FIXED_LENGTH_BYTES: u32 = 2;
pub const PB_LTYPE_MAP_BOOL: u32 = 0;
pub const PB_LTYPE_MAP_BYTES: u32 = 6;
pub const PB_LTYPE_MAP_DOUBLE: u32 = 5;
pub const PB_LTYPE_MAP_ENUM: u32 = 1;
pub const PB_LTYPE_MAP_UENUM: u32 = 2;
pub const PB_LTYPE_MAP_FIXED32: u32 = 4;
pub const PB_LTYPE_MAP_FIXED64: u32 = 5;
pub const PB_LTYPE_MAP_FLOAT: u32 = 4;
pub const PB_LTYPE_MAP_INT32: u32 = 1;
pub const PB_LTYPE_MAP_INT64: u32 = 1;
pub const PB_LTYPE_MAP_MESSAGE: u32 = 8;
pub const PB_LTYPE_MAP_MSG_W_CB: u32 = 9;
pub const PB_LTYPE_MAP_SFIXED32: u32 = 4;
pub const PB_LTYPE_MAP_SFIXED64: u32 = 5;
pub const PB_LTYPE_MAP_SINT32: u32 = 3;
pub const PB_LTYPE_MAP_SINT64: u32 = 3;
pub const PB_LTYPE_MAP_STRING: u32 = 7;
pub const PB_LTYPE_MAP_UINT32: u32 = 2;
pub const PB_LTYPE_MAP_UINT64: u32 = 2;
pub const PB_LTYPE_MAP_EXTENSION: u32 = 10;
pub const PB_LTYPE_MAP_FIXED_LENGTH_BYTES: u32 = 11;
pub const google_protobuf_FileDescriptorSet_file_tag: u32 = 1;
pub const google_protobuf_DescriptorProto_ReservedRange_start_tag: u32 = 1;
pub const google_protobuf_DescriptorProto_ReservedRange_end_tag: u32 = 2;
pub const google_protobuf_ExtensionRangeOptions_Declaration_number_tag: u32 = 1;
pub const google_protobuf_ExtensionRangeOptions_Declaration_full_name_tag: u32 = 2;
pub const google_protobuf_ExtensionRangeOptions_Declaration_type_tag: u32 = 3;
pub const google_protobuf_ExtensionRangeOptions_Declaration_reserved_tag: u32 = 5;
pub const google_protobuf_ExtensionRangeOptions_Declaration_repeated_tag: u32 = 6;
pub const google_protobuf_EnumDescriptorProto_EnumReservedRange_start_tag: u32 = 1;
pub const google_protobuf_EnumDescriptorProto_EnumReservedRange_end_tag: u32 = 2;
pub const google_protobuf_FieldOptions_EditionDefault_value_tag: u32 = 2;
pub const google_protobuf_FieldOptions_EditionDefault_edition_tag: u32 = 3;
pub const google_protobuf_FieldOptions_FeatureSupport_edition_introduced_tag: u32 = 1;
pub const google_protobuf_FieldOptions_FeatureSupport_edition_deprecated_tag: u32 = 2;
pub const google_protobuf_FieldOptions_FeatureSupport_deprecation_warning_tag: u32 = 3;
pub const google_protobuf_FieldOptions_FeatureSupport_edition_removed_tag: u32 = 4;
pub const google_protobuf_UninterpretedOption_name_tag: u32 = 2;
pub const google_protobuf_UninterpretedOption_identifier_value_tag: u32 = 3;
pub const google_protobuf_UninterpretedOption_positive_int_value_tag: u32 = 4;
pub const google_protobuf_UninterpretedOption_negative_int_value_tag: u32 = 5;
pub const google_protobuf_UninterpretedOption_double_value_tag: u32 = 6;
pub const google_protobuf_UninterpretedOption_string_value_tag: u32 = 7;
pub const google_protobuf_UninterpretedOption_aggregate_value_tag: u32 = 8;
pub const google_protobuf_UninterpretedOption_NamePart_name_part_tag: u32 = 1;
pub const google_protobuf_UninterpretedOption_NamePart_is_extension_tag: u32 = 2;
pub const google_protobuf_FeatureSet_field_presence_tag: u32 = 1;
pub const google_protobuf_FeatureSet_enum_type_tag: u32 = 2;
pub const google_protobuf_FeatureSet_repeated_field_encoding_tag: u32 = 3;
pub const google_protobuf_FeatureSet_utf8_validation_tag: u32 = 4;
pub const google_protobuf_FeatureSet_message_encoding_tag: u32 = 5;
pub const google_protobuf_FeatureSet_json_format_tag: u32 = 6;
pub const google_protobuf_ExtensionRangeOptions_declaration_tag: u32 = 2;
pub const google_protobuf_ExtensionRangeOptions_verification_tag: u32 = 3;
pub const google_protobuf_ExtensionRangeOptions_features_tag: u32 = 50;
pub const google_protobuf_ExtensionRangeOptions_uninterpreted_option_tag: u32 = 999;
pub const google_protobuf_DescriptorProto_ExtensionRange_start_tag: u32 = 1;
pub const google_protobuf_DescriptorProto_ExtensionRange_end_tag: u32 = 2;
pub const google_protobuf_DescriptorProto_ExtensionRange_options_tag: u32 = 3;
pub const google_protobuf_FileOptions_java_package_tag: u32 = 1;
pub const google_protobuf_FileOptions_java_outer_classname_tag: u32 = 8;
pub const google_protobuf_FileOptions_optimize_for_tag: u32 = 9;
pub const google_protobuf_FileOptions_java_multiple_files_tag: u32 = 10;
pub const google_protobuf_FileOptions_go_package_tag: u32 = 11;
pub const google_protobuf_FileOptions_cc_generic_services_tag: u32 = 16;
pub const google_protobuf_FileOptions_java_generic_services_tag: u32 = 17;
pub const google_protobuf_FileOptions_py_generic_services_tag: u32 = 18;
pub const google_protobuf_FileOptions_java_generate_equals_and_hash_tag: u32 = 20;
pub const google_protobuf_FileOptions_deprecated_tag: u32 = 23;
pub const google_protobuf_FileOptions_java_string_check_utf8_tag: u32 = 27;
pub const google_protobuf_FileOptions_cc_enable_arenas_tag: u32 = 31;
pub const google_protobuf_FileOptions_objc_class_prefix_tag: u32 = 36;
pub const google_protobuf_FileOptions_csharp_namespace_tag: u32 = 37;
pub const google_protobuf_FileOptions_swift_prefix_tag: u32 = 39;
pub const google_protobuf_FileOptions_php_class_prefix_tag: u32 = 40;
pub const google_protobuf_FileOptions_php_namespace_tag: u32 = 41;
pub const google_protobuf_FileOptions_php_metadata_namespace_tag: u32 = 44;
pub const google_protobuf_FileOptions_ruby_package_tag: u32 = 45;
pub const google_protobuf_FileOptions_features_tag: u32 = 50;
pub const google_protobuf_FileOptions_uninterpreted_option_tag: u32 = 999;
pub const google_protobuf_MessageOptions_message_set_wire_format_tag: u32 = 1;
pub const google_protobuf_MessageOptions_no_standard_descriptor_accessor_tag: u32 = 2;
pub const google_protobuf_MessageOptions_deprecated_tag: u32 = 3;
pub const google_protobuf_MessageOptions_map_entry_tag: u32 = 7;
pub const google_protobuf_MessageOptions_deprecated_legacy_json_field_conflicts_tag: u32 = 11;
pub const google_protobuf_MessageOptions_features_tag: u32 = 12;
pub const google_protobuf_MessageOptions_uninterpreted_option_tag: u32 = 999;
pub const google_protobuf_DescriptorProto_name_tag: u32 = 1;
pub const google_protobuf_DescriptorProto_field_tag: u32 = 2;
pub const google_protobuf_DescriptorProto_nested_type_tag: u32 = 3;
pub const google_protobuf_DescriptorProto_enum_type_tag: u32 = 4;
pub const google_protobuf_DescriptorProto_extension_range_tag: u32 = 5;
pub const google_protobuf_DescriptorProto_extension_tag: u32 = 6;
pub const google_protobuf_DescriptorProto_options_tag: u32 = 7;
pub const google_protobuf_DescriptorProto_oneof_decl_tag: u32 = 8;
pub const google_protobuf_DescriptorProto_reserved_range_tag: u32 = 9;
pub const google_protobuf_DescriptorProto_reserved_name_tag: u32 = 10;
pub const google_protobuf_FieldOptions_ctype_tag: u32 = 1;
pub const google_protobuf_FieldOptions_packed_tag: u32 = 2;
pub const google_protobuf_FieldOptions_deprecated_tag: u32 = 3;
pub const google_protobuf_FieldOptions_lazy_tag: u32 = 5;
pub const google_protobuf_FieldOptions_jstype_tag: u32 = 6;
pub const google_protobuf_FieldOptions_weak_tag: u32 = 10;
pub const google_protobuf_FieldOptions_unverified_lazy_tag: u32 = 15;
pub const google_protobuf_FieldOptions_debug_redact_tag: u32 = 16;
pub const google_protobuf_FieldOptions_retention_tag: u32 = 17;
pub const google_protobuf_FieldOptions_targets_tag: u32 = 19;
pub const google_protobuf_FieldOptions_edition_defaults_tag: u32 = 20;
pub const google_protobuf_FieldOptions_features_tag: u32 = 21;
pub const google_protobuf_FieldOptions_feature_support_tag: u32 = 22;
pub const google_protobuf_FieldOptions_uninterpreted_option_tag: u32 = 999;
pub const google_protobuf_FieldDescriptorProto_name_tag: u32 = 1;
pub const google_protobuf_FieldDescriptorProto_extendee_tag: u32 = 2;
pub const google_protobuf_FieldDescriptorProto_number_tag: u32 = 3;
pub const google_protobuf_FieldDescriptorProto_label_tag: u32 = 4;
pub const google_protobuf_FieldDescriptorProto_type_tag: u32 = 5;
pub const google_protobuf_FieldDescriptorProto_type_name_tag: u32 = 6;
pub const google_protobuf_FieldDescriptorProto_default_value_tag: u32 = 7;
pub const google_protobuf_FieldDescriptorProto_options_tag: u32 = 8;
pub const google_protobuf_FieldDescriptorProto_oneof_index_tag: u32 = 9;
pub const google_protobuf_FieldDescriptorProto_json_name_tag: u32 = 10;
pub const google_protobuf_FieldDescriptorProto_proto3_optional_tag: u32 = 17;
pub const google_protobuf_OneofOptions_features_tag: u32 = 1;
pub const google_protobuf_OneofOptions_uninterpreted_option_tag: u32 = 999;
pub const google_protobuf_OneofDescriptorProto_name_tag: u32 = 1;
pub const google_protobuf_OneofDescriptorProto_options_tag: u32 = 2;
pub const google_protobuf_EnumOptions_allow_alias_tag: u32 = 2;
pub const google_protobuf_EnumOptions_deprecated_tag: u32 = 3;
pub const google_protobuf_EnumOptions_deprecated_legacy_json_field_conflicts_tag: u32 = 6;
pub const google_protobuf_EnumOptions_features_tag: u32 = 7;
pub const google_protobuf_EnumOptions_uninterpreted_option_tag: u32 = 999;
pub const google_protobuf_EnumDescriptorProto_name_tag: u32 = 1;
pub const google_protobuf_EnumDescriptorProto_value_tag: u32 = 2;
pub const google_protobuf_EnumDescriptorProto_options_tag: u32 = 3;
pub const google_protobuf_EnumDescriptorProto_reserved_range_tag: u32 = 4;
pub const google_protobuf_EnumDescriptorProto_reserved_name_tag: u32 = 5;
pub const google_protobuf_EnumValueOptions_deprecated_tag: u32 = 1;
pub const google_protobuf_EnumValueOptions_features_tag: u32 = 2;
pub const google_protobuf_EnumValueOptions_debug_redact_tag: u32 = 3;
pub const google_protobuf_EnumValueOptions_feature_support_tag: u32 = 4;
pub const google_protobuf_EnumValueOptions_uninterpreted_option_tag: u32 = 999;
pub const google_protobuf_EnumValueDescriptorProto_name_tag: u32 = 1;
pub const google_protobuf_EnumValueDescriptorProto_number_tag: u32 = 2;
pub const google_protobuf_EnumValueDescriptorProto_options_tag: u32 = 3;
pub const google_protobuf_ServiceOptions_deprecated_tag: u32 = 33;
pub const google_protobuf_ServiceOptions_features_tag: u32 = 34;
pub const google_protobuf_ServiceOptions_uninterpreted_option_tag: u32 = 999;
pub const google_protobuf_ServiceDescriptorProto_name_tag: u32 = 1;
pub const google_protobuf_ServiceDescriptorProto_method_tag: u32 = 2;
pub const google_protobuf_ServiceDescriptorProto_options_tag: u32 = 3;
pub const google_protobuf_MethodOptions_deprecated_tag: u32 = 33;
pub const google_protobuf_MethodOptions_idempotency_level_tag: u32 = 34;
pub const google_protobuf_MethodOptions_features_tag: u32 = 35;
pub const google_protobuf_MethodOptions_uninterpreted_option_tag: u32 = 999;
pub const google_protobuf_MethodDescriptorProto_name_tag: u32 = 1;
pub const google_protobuf_MethodDescriptorProto_input_type_tag: u32 = 2;
pub const google_protobuf_MethodDescriptorProto_output_type_tag: u32 = 3;
pub const google_protobuf_MethodDescriptorProto_options_tag: u32 = 4;
pub const google_protobuf_MethodDescriptorProto_client_streaming_tag: u32 = 5;
pub const google_protobuf_MethodDescriptorProto_server_streaming_tag: u32 = 6;
pub const google_protobuf_FeatureSetDefaults_defaults_tag: u32 = 1;
pub const google_protobuf_FeatureSetDefaults_minimum_edition_tag: u32 = 4;
pub const google_protobuf_FeatureSetDefaults_maximum_edition_tag: u32 = 5;
pub const google_protobuf_FeatureSetDefaults_FeatureSetEditionDefault_edition_tag: u32 = 3;
pub const google_protobuf_FeatureSetDefaults_FeatureSetEditionDefault_overridable_features_tag:
    u32 = 4;
pub const google_protobuf_FeatureSetDefaults_FeatureSetEditionDefault_fixed_features_tag: u32 = 5;
pub const google_protobuf_SourceCodeInfo_location_tag: u32 = 1;
pub const google_protobuf_FileDescriptorProto_name_tag: u32 = 1;
pub const google_protobuf_FileDescriptorProto_package_tag: u32 = 2;
pub const google_protobuf_FileDescriptorProto_dependency_tag: u32 = 3;
pub const google_protobuf_FileDescriptorProto_message_type_tag: u32 = 4;
pub const google_protobuf_FileDescriptorProto_enum_type_tag: u32 = 5;
pub const google_protobuf_FileDescriptorProto_service_tag: u32 = 6;
pub const google_protobuf_FileDescriptorProto_extension_tag: u32 = 7;
pub const google_protobuf_FileDescriptorProto_options_tag: u32 = 8;
pub const google_protobuf_FileDescriptorProto_source_code_info_tag: u32 = 9;
pub const google_protobuf_FileDescriptorProto_public_dependency_tag: u32 = 10;
pub const google_protobuf_FileDescriptorProto_weak_dependency_tag: u32 = 11;
pub const google_protobuf_FileDescriptorProto_syntax_tag: u32 = 12;
pub const google_protobuf_FileDescriptorProto_edition_tag: u32 = 14;
pub const google_protobuf_SourceCodeInfo_Location_path_tag: u32 = 1;
pub const google_protobuf_SourceCodeInfo_Location_span_tag: u32 = 2;
pub const google_protobuf_SourceCodeInfo_Location_leading_comments_tag: u32 = 3;
pub const google_protobuf_SourceCodeInfo_Location_trailing_comments_tag: u32 = 4;
pub const google_protobuf_SourceCodeInfo_Location_leading_detached_comments_tag: u32 = 6;
pub const google_protobuf_GeneratedCodeInfo_annotation_tag: u32 = 1;
pub const google_protobuf_GeneratedCodeInfo_Annotation_path_tag: u32 = 1;
pub const google_protobuf_GeneratedCodeInfo_Annotation_source_file_tag: u32 = 2;
pub const google_protobuf_GeneratedCodeInfo_Annotation_begin_tag: u32 = 3;
pub const google_protobuf_GeneratedCodeInfo_Annotation_end_tag: u32 = 4;
pub const google_protobuf_GeneratedCodeInfo_Annotation_semantic_tag: u32 = 5;
pub const google_protobuf_DescriptorProto_ReservedRange_size: u32 = 22;
pub const google_protobuf_EnumDescriptorProto_EnumReservedRange_size: u32 = 22;
pub const google_protobuf_FeatureSetDefaults_FeatureSetEditionDefault_size: u32 = 34;
pub const google_protobuf_FeatureSet_size: u32 = 12;
pub type rsize_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
pub type max_align_t = f64;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__mbstate8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__mbstate8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mbstateL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(_mbstateL)
        )
    );
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_pthread_handler_rec> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_pthread_handler_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__routine) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__arg) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_attr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_cond_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_condattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_condattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_condattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_mutex_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_mutexattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutexattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutexattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_once_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_once_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_once_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_rwlock_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlock_t>(),
        200usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_rwlockattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlockattr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cleanup_stack) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__cleanup_stack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__opaque)
        )
    );
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __b: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strncat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strxfrm(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtok_r(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
        __lasts: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __strerrbuf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strdup(__s1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memccpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn stpcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __s1: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnlen(__s1: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
pub type errno_t = ::std::os::raw::c_int;
extern "C" {
    pub fn memset_s(
        __s: *mut ::std::os::raw::c_void,
        __smax: rsize_t,
        __c: ::std::os::raw::c_int,
        __n: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn memmem(
        __big: *const ::std::os::raw::c_void,
        __big_len: usize,
        __little: *const ::std::os::raw::c_void,
        __little_len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset_pattern4(
        __b: *mut ::std::os::raw::c_void,
        __pattern4: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn memset_pattern8(
        __b: *mut ::std::os::raw::c_void,
        __pattern8: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn memset_pattern16(
        __b: *mut ::std::os::raw::c_void,
        __pattern16: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn strcasestr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlcat(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strlcpy(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strmode(__mode: ::std::os::raw::c_int, __bp: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn swab(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: isize,
    );
}
extern "C" {
    pub fn timingsafe_bcmp(
        __b1: *const ::std::os::raw::c_void,
        __b2: *const ::std::os::raw::c_void,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strsignal_r(
        __sig: ::std::os::raw::c_int,
        __strsignalbuf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcmp(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    );
}
extern "C" {
    pub fn bzero(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fls(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
pub type pb_type_t = uint_least8_t;
pub type pb_size_t = u32;
pub type pb_ssize_t = i32;
pub type pb_byte_t = uint_least8_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pb_istream_s {
    _unused: [u8; 0],
}
pub type pb_istream_t = pb_istream_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pb_ostream_s {
    _unused: [u8; 0],
}
pub type pb_ostream_t = pb_ostream_s;
pub type pb_field_iter_t = pb_field_iter_s;
pub type pb_msgdesc_t = pb_msgdesc_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pb_msgdesc_s {
    pub field_info: *const u32,
    pub submsg_info: *const *const pb_msgdesc_t,
    pub default_value: *const pb_byte_t,
    pub field_callback: ::std::option::Option<
        unsafe extern "C" fn(
            istream: *mut pb_istream_t,
            ostream: *mut pb_ostream_t,
            field: *const pb_field_iter_t,
        ) -> bool,
    >,
    pub field_count: pb_size_t,
    pub required_field_count: pb_size_t,
    pub largest_tag: pb_size_t,
}
#[test]
fn bindgen_test_layout_pb_msgdesc_s() {
    const UNINIT: ::std::mem::MaybeUninit<pb_msgdesc_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pb_msgdesc_s>(),
        48usize,
        concat!("Size of: ", stringify!(pb_msgdesc_s))
    );
    assert_eq!(
        ::std::mem::align_of::<pb_msgdesc_s>(),
        8usize,
        concat!("Alignment of ", stringify!(pb_msgdesc_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field_info) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_msgdesc_s),
            "::",
            stringify!(field_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).submsg_info) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_msgdesc_s),
            "::",
            stringify!(submsg_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).default_value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_msgdesc_s),
            "::",
            stringify!(default_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field_callback) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_msgdesc_s),
            "::",
            stringify!(field_callback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field_count) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_msgdesc_s),
            "::",
            stringify!(field_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).required_field_count) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_msgdesc_s),
            "::",
            stringify!(required_field_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).largest_tag) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_msgdesc_s),
            "::",
            stringify!(largest_tag)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pb_field_iter_s {
    pub descriptor: *const pb_msgdesc_t,
    pub message: *mut ::std::os::raw::c_void,
    pub index: pb_size_t,
    pub field_info_index: pb_size_t,
    pub required_field_index: pb_size_t,
    pub submessage_index: pb_size_t,
    pub tag: pb_size_t,
    pub data_size: pb_size_t,
    pub array_size: pb_size_t,
    pub type_: pb_type_t,
    pub pField: *mut ::std::os::raw::c_void,
    pub pData: *mut ::std::os::raw::c_void,
    pub pSize: *mut ::std::os::raw::c_void,
    pub submsg_desc: *const pb_msgdesc_t,
}
#[test]
fn bindgen_test_layout_pb_field_iter_s() {
    const UNINIT: ::std::mem::MaybeUninit<pb_field_iter_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pb_field_iter_s>(),
        80usize,
        concat!("Size of: ", stringify!(pb_field_iter_s))
    );
    assert_eq!(
        ::std::mem::align_of::<pb_field_iter_s>(),
        8usize,
        concat!("Alignment of ", stringify!(pb_field_iter_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).descriptor) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_field_iter_s),
            "::",
            stringify!(descriptor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).message) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_field_iter_s),
            "::",
            stringify!(message)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_field_iter_s),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field_info_index) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_field_iter_s),
            "::",
            stringify!(field_info_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).required_field_index) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_field_iter_s),
            "::",
            stringify!(required_field_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).submessage_index) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_field_iter_s),
            "::",
            stringify!(submessage_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tag) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_field_iter_s),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_size) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_field_iter_s),
            "::",
            stringify!(data_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).array_size) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_field_iter_s),
            "::",
            stringify!(array_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_field_iter_s),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pField) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_field_iter_s),
            "::",
            stringify!(pField)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pData) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_field_iter_s),
            "::",
            stringify!(pData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSize) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_field_iter_s),
            "::",
            stringify!(pSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).submsg_desc) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_field_iter_s),
            "::",
            stringify!(submsg_desc)
        )
    );
}
pub type pb_field_t = pb_field_iter_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pb_bytes_array_s {
    pub size: pb_size_t,
    pub bytes: [pb_byte_t; 1usize],
}
#[test]
fn bindgen_test_layout_pb_bytes_array_s() {
    const UNINIT: ::std::mem::MaybeUninit<pb_bytes_array_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pb_bytes_array_s>(),
        8usize,
        concat!("Size of: ", stringify!(pb_bytes_array_s))
    );
    assert_eq!(
        ::std::mem::align_of::<pb_bytes_array_s>(),
        4usize,
        concat!("Alignment of ", stringify!(pb_bytes_array_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_bytes_array_s),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytes) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_bytes_array_s),
            "::",
            stringify!(bytes)
        )
    );
}
pub type pb_bytes_array_t = pb_bytes_array_s;
pub type pb_callback_t = pb_callback_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pb_callback_s {
    pub funcs: pb_callback_s__bindgen_ty_1,
    pub arg: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pb_callback_s__bindgen_ty_1 {
    pub decode: ::std::option::Option<
        unsafe extern "C" fn(
            stream: *mut pb_istream_t,
            field: *const pb_field_t,
            arg: *mut *mut ::std::os::raw::c_void,
        ) -> bool,
    >,
    pub encode: ::std::option::Option<
        unsafe extern "C" fn(
            stream: *mut pb_ostream_t,
            field: *const pb_field_t,
            arg: *const *mut ::std::os::raw::c_void,
        ) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_pb_callback_s__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<pb_callback_s__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pb_callback_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(pb_callback_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pb_callback_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(pb_callback_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_callback_s__bindgen_ty_1),
            "::",
            stringify!(decode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_callback_s__bindgen_ty_1),
            "::",
            stringify!(encode)
        )
    );
}
#[test]
fn bindgen_test_layout_pb_callback_s() {
    const UNINIT: ::std::mem::MaybeUninit<pb_callback_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pb_callback_s>(),
        16usize,
        concat!("Size of: ", stringify!(pb_callback_s))
    );
    assert_eq!(
        ::std::mem::align_of::<pb_callback_s>(),
        8usize,
        concat!("Alignment of ", stringify!(pb_callback_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).funcs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_callback_s),
            "::",
            stringify!(funcs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_callback_s),
            "::",
            stringify!(arg)
        )
    );
}
extern "C" {
    pub fn pb_default_field_callback(
        istream: *mut pb_istream_t,
        ostream: *mut pb_ostream_t,
        field: *const pb_field_t,
    ) -> bool;
}
pub const pb_wire_type_t_PB_WT_VARINT: pb_wire_type_t = 0;
pub const pb_wire_type_t_PB_WT_64BIT: pb_wire_type_t = 1;
pub const pb_wire_type_t_PB_WT_STRING: pb_wire_type_t = 2;
pub const pb_wire_type_t_PB_WT_32BIT: pb_wire_type_t = 5;
pub type pb_wire_type_t = ::std::os::raw::c_uint;
pub type pb_extension_type_t = pb_extension_type_s;
pub type pb_extension_t = pb_extension_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pb_extension_type_s {
    pub decode: ::std::option::Option<
        unsafe extern "C" fn(
            stream: *mut pb_istream_t,
            extension: *mut pb_extension_t,
            tag: u32,
            wire_type: pb_wire_type_t,
        ) -> bool,
    >,
    pub encode: ::std::option::Option<
        unsafe extern "C" fn(stream: *mut pb_ostream_t, extension: *const pb_extension_t) -> bool,
    >,
    pub arg: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_pb_extension_type_s() {
    const UNINIT: ::std::mem::MaybeUninit<pb_extension_type_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pb_extension_type_s>(),
        24usize,
        concat!("Size of: ", stringify!(pb_extension_type_s))
    );
    assert_eq!(
        ::std::mem::align_of::<pb_extension_type_s>(),
        8usize,
        concat!("Alignment of ", stringify!(pb_extension_type_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_extension_type_s),
            "::",
            stringify!(decode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_extension_type_s),
            "::",
            stringify!(encode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_extension_type_s),
            "::",
            stringify!(arg)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pb_extension_s {
    pub type_: *const pb_extension_type_t,
    pub dest: *mut ::std::os::raw::c_void,
    pub next: *mut pb_extension_t,
    pub found: bool,
}
#[test]
fn bindgen_test_layout_pb_extension_s() {
    const UNINIT: ::std::mem::MaybeUninit<pb_extension_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pb_extension_s>(),
        32usize,
        concat!("Size of: ", stringify!(pb_extension_s))
    );
    assert_eq!(
        ::std::mem::align_of::<pb_extension_s>(),
        8usize,
        concat!("Alignment of ", stringify!(pb_extension_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_extension_s),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dest) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_extension_s),
            "::",
            stringify!(dest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_extension_s),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).found) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_extension_s),
            "::",
            stringify!(found)
        )
    );
}
pub const _google_protobuf_Edition_google_protobuf_Edition_EDITION_UNKNOWN:
    _google_protobuf_Edition = 0;
pub const _google_protobuf_Edition_google_protobuf_Edition_EDITION_LEGACY:
    _google_protobuf_Edition = 900;
pub const _google_protobuf_Edition_google_protobuf_Edition_EDITION_PROTO2:
    _google_protobuf_Edition = 998;
pub const _google_protobuf_Edition_google_protobuf_Edition_EDITION_PROTO3:
    _google_protobuf_Edition = 999;
pub const _google_protobuf_Edition_google_protobuf_Edition_EDITION_2023: _google_protobuf_Edition =
    1000;
pub const _google_protobuf_Edition_google_protobuf_Edition_EDITION_2024: _google_protobuf_Edition =
    1001;
pub const _google_protobuf_Edition_google_protobuf_Edition_EDITION_1_TEST_ONLY:
    _google_protobuf_Edition = 1;
pub const _google_protobuf_Edition_google_protobuf_Edition_EDITION_2_TEST_ONLY:
    _google_protobuf_Edition = 2;
pub const _google_protobuf_Edition_google_protobuf_Edition_EDITION_99997_TEST_ONLY:
    _google_protobuf_Edition = 99997;
pub const _google_protobuf_Edition_google_protobuf_Edition_EDITION_99998_TEST_ONLY:
    _google_protobuf_Edition = 99998;
pub const _google_protobuf_Edition_google_protobuf_Edition_EDITION_99999_TEST_ONLY:
    _google_protobuf_Edition = 99999;
pub const _google_protobuf_Edition_google_protobuf_Edition_EDITION_MAX: _google_protobuf_Edition =
    2147483647;
pub type _google_protobuf_Edition = ::std::os::raw::c_uint;
pub use self::_google_protobuf_Edition as google_protobuf_Edition;
pub const _google_protobuf_ExtensionRangeOptions_VerificationState_google_protobuf_ExtensionRangeOptions_VerificationState_DECLARATION : _google_protobuf_ExtensionRangeOptions_VerificationState = 0 ;
pub const _google_protobuf_ExtensionRangeOptions_VerificationState_google_protobuf_ExtensionRangeOptions_VerificationState_UNVERIFIED : _google_protobuf_ExtensionRangeOptions_VerificationState = 1 ;
pub type _google_protobuf_ExtensionRangeOptions_VerificationState = ::std::os::raw::c_uint;
pub use self::_google_protobuf_ExtensionRangeOptions_VerificationState as google_protobuf_ExtensionRangeOptions_VerificationState;
pub const _google_protobuf_FieldDescriptorProto_Type_google_protobuf_FieldDescriptorProto_Type_TYPE_DOUBLE : _google_protobuf_FieldDescriptorProto_Type = 1 ;
pub const _google_protobuf_FieldDescriptorProto_Type_google_protobuf_FieldDescriptorProto_Type_TYPE_FLOAT : _google_protobuf_FieldDescriptorProto_Type = 2 ;
pub const _google_protobuf_FieldDescriptorProto_Type_google_protobuf_FieldDescriptorProto_Type_TYPE_INT64 : _google_protobuf_FieldDescriptorProto_Type = 3 ;
pub const _google_protobuf_FieldDescriptorProto_Type_google_protobuf_FieldDescriptorProto_Type_TYPE_UINT64 : _google_protobuf_FieldDescriptorProto_Type = 4 ;
pub const _google_protobuf_FieldDescriptorProto_Type_google_protobuf_FieldDescriptorProto_Type_TYPE_INT32 : _google_protobuf_FieldDescriptorProto_Type = 5 ;
pub const _google_protobuf_FieldDescriptorProto_Type_google_protobuf_FieldDescriptorProto_Type_TYPE_FIXED64 : _google_protobuf_FieldDescriptorProto_Type = 6 ;
pub const _google_protobuf_FieldDescriptorProto_Type_google_protobuf_FieldDescriptorProto_Type_TYPE_FIXED32 : _google_protobuf_FieldDescriptorProto_Type = 7 ;
pub const _google_protobuf_FieldDescriptorProto_Type_google_protobuf_FieldDescriptorProto_Type_TYPE_BOOL : _google_protobuf_FieldDescriptorProto_Type = 8 ;
pub const _google_protobuf_FieldDescriptorProto_Type_google_protobuf_FieldDescriptorProto_Type_TYPE_STRING : _google_protobuf_FieldDescriptorProto_Type = 9 ;
pub const _google_protobuf_FieldDescriptorProto_Type_google_protobuf_FieldDescriptorProto_Type_TYPE_GROUP : _google_protobuf_FieldDescriptorProto_Type = 10 ;
pub const _google_protobuf_FieldDescriptorProto_Type_google_protobuf_FieldDescriptorProto_Type_TYPE_MESSAGE : _google_protobuf_FieldDescriptorProto_Type = 11 ;
pub const _google_protobuf_FieldDescriptorProto_Type_google_protobuf_FieldDescriptorProto_Type_TYPE_BYTES : _google_protobuf_FieldDescriptorProto_Type = 12 ;
pub const _google_protobuf_FieldDescriptorProto_Type_google_protobuf_FieldDescriptorProto_Type_TYPE_UINT32 : _google_protobuf_FieldDescriptorProto_Type = 13 ;
pub const _google_protobuf_FieldDescriptorProto_Type_google_protobuf_FieldDescriptorProto_Type_TYPE_ENUM : _google_protobuf_FieldDescriptorProto_Type = 14 ;
pub const _google_protobuf_FieldDescriptorProto_Type_google_protobuf_FieldDescriptorProto_Type_TYPE_SFIXED32 : _google_protobuf_FieldDescriptorProto_Type = 15 ;
pub const _google_protobuf_FieldDescriptorProto_Type_google_protobuf_FieldDescriptorProto_Type_TYPE_SFIXED64 : _google_protobuf_FieldDescriptorProto_Type = 16 ;
pub const _google_protobuf_FieldDescriptorProto_Type_google_protobuf_FieldDescriptorProto_Type_TYPE_SINT32 : _google_protobuf_FieldDescriptorProto_Type = 17 ;
pub const _google_protobuf_FieldDescriptorProto_Type_google_protobuf_FieldDescriptorProto_Type_TYPE_SINT64 : _google_protobuf_FieldDescriptorProto_Type = 18 ;
pub type _google_protobuf_FieldDescriptorProto_Type = ::std::os::raw::c_uint;
pub use self::_google_protobuf_FieldDescriptorProto_Type as google_protobuf_FieldDescriptorProto_Type;
pub const _google_protobuf_FieldDescriptorProto_Label_google_protobuf_FieldDescriptorProto_Label_LABEL_OPTIONAL : _google_protobuf_FieldDescriptorProto_Label = 1 ;
pub const _google_protobuf_FieldDescriptorProto_Label_google_protobuf_FieldDescriptorProto_Label_LABEL_REPEATED : _google_protobuf_FieldDescriptorProto_Label = 3 ;
pub const _google_protobuf_FieldDescriptorProto_Label_google_protobuf_FieldDescriptorProto_Label_LABEL_REQUIRED : _google_protobuf_FieldDescriptorProto_Label = 2 ;
pub type _google_protobuf_FieldDescriptorProto_Label = ::std::os::raw::c_uint;
pub use self::_google_protobuf_FieldDescriptorProto_Label as google_protobuf_FieldDescriptorProto_Label;
pub const _google_protobuf_FileOptions_OptimizeMode_google_protobuf_FileOptions_OptimizeMode_SPEED : _google_protobuf_FileOptions_OptimizeMode = 1 ;
pub const _google_protobuf_FileOptions_OptimizeMode_google_protobuf_FileOptions_OptimizeMode_CODE_SIZE : _google_protobuf_FileOptions_OptimizeMode = 2 ;
pub const _google_protobuf_FileOptions_OptimizeMode_google_protobuf_FileOptions_OptimizeMode_LITE_RUNTIME : _google_protobuf_FileOptions_OptimizeMode = 3 ;
pub type _google_protobuf_FileOptions_OptimizeMode = ::std::os::raw::c_uint;
pub use self::_google_protobuf_FileOptions_OptimizeMode as google_protobuf_FileOptions_OptimizeMode;
pub const _google_protobuf_FieldOptions_CType_google_protobuf_FieldOptions_CType_STRING:
    _google_protobuf_FieldOptions_CType = 0;
pub const _google_protobuf_FieldOptions_CType_google_protobuf_FieldOptions_CType_CORD:
    _google_protobuf_FieldOptions_CType = 1;
pub const _google_protobuf_FieldOptions_CType_google_protobuf_FieldOptions_CType_STRING_PIECE:
    _google_protobuf_FieldOptions_CType = 2;
pub type _google_protobuf_FieldOptions_CType = ::std::os::raw::c_uint;
pub use self::_google_protobuf_FieldOptions_CType as google_protobuf_FieldOptions_CType;
pub const _google_protobuf_FieldOptions_JSType_google_protobuf_FieldOptions_JSType_JS_NORMAL:
    _google_protobuf_FieldOptions_JSType = 0;
pub const _google_protobuf_FieldOptions_JSType_google_protobuf_FieldOptions_JSType_JS_STRING:
    _google_protobuf_FieldOptions_JSType = 1;
pub const _google_protobuf_FieldOptions_JSType_google_protobuf_FieldOptions_JSType_JS_NUMBER:
    _google_protobuf_FieldOptions_JSType = 2;
pub type _google_protobuf_FieldOptions_JSType = ::std::os::raw::c_uint;
pub use self::_google_protobuf_FieldOptions_JSType as google_protobuf_FieldOptions_JSType;
pub const _google_protobuf_FieldOptions_OptionRetention_google_protobuf_FieldOptions_OptionRetention_RETENTION_UNKNOWN : _google_protobuf_FieldOptions_OptionRetention = 0 ;
pub const _google_protobuf_FieldOptions_OptionRetention_google_protobuf_FieldOptions_OptionRetention_RETENTION_RUNTIME : _google_protobuf_FieldOptions_OptionRetention = 1 ;
pub const _google_protobuf_FieldOptions_OptionRetention_google_protobuf_FieldOptions_OptionRetention_RETENTION_SOURCE : _google_protobuf_FieldOptions_OptionRetention = 2 ;
pub type _google_protobuf_FieldOptions_OptionRetention = ::std::os::raw::c_uint;
pub use self::_google_protobuf_FieldOptions_OptionRetention as google_protobuf_FieldOptions_OptionRetention;
pub const _google_protobuf_FieldOptions_OptionTargetType_google_protobuf_FieldOptions_OptionTargetType_TARGET_TYPE_UNKNOWN : _google_protobuf_FieldOptions_OptionTargetType = 0 ;
pub const _google_protobuf_FieldOptions_OptionTargetType_google_protobuf_FieldOptions_OptionTargetType_TARGET_TYPE_FILE : _google_protobuf_FieldOptions_OptionTargetType = 1 ;
pub const _google_protobuf_FieldOptions_OptionTargetType_google_protobuf_FieldOptions_OptionTargetType_TARGET_TYPE_EXTENSION_RANGE : _google_protobuf_FieldOptions_OptionTargetType = 2 ;
pub const _google_protobuf_FieldOptions_OptionTargetType_google_protobuf_FieldOptions_OptionTargetType_TARGET_TYPE_MESSAGE : _google_protobuf_FieldOptions_OptionTargetType = 3 ;
pub const _google_protobuf_FieldOptions_OptionTargetType_google_protobuf_FieldOptions_OptionTargetType_TARGET_TYPE_FIELD : _google_protobuf_FieldOptions_OptionTargetType = 4 ;
pub const _google_protobuf_FieldOptions_OptionTargetType_google_protobuf_FieldOptions_OptionTargetType_TARGET_TYPE_ONEOF : _google_protobuf_FieldOptions_OptionTargetType = 5 ;
pub const _google_protobuf_FieldOptions_OptionTargetType_google_protobuf_FieldOptions_OptionTargetType_TARGET_TYPE_ENUM : _google_protobuf_FieldOptions_OptionTargetType = 6 ;
pub const _google_protobuf_FieldOptions_OptionTargetType_google_protobuf_FieldOptions_OptionTargetType_TARGET_TYPE_ENUM_ENTRY : _google_protobuf_FieldOptions_OptionTargetType = 7 ;
pub const _google_protobuf_FieldOptions_OptionTargetType_google_protobuf_FieldOptions_OptionTargetType_TARGET_TYPE_SERVICE : _google_protobuf_FieldOptions_OptionTargetType = 8 ;
pub const _google_protobuf_FieldOptions_OptionTargetType_google_protobuf_FieldOptions_OptionTargetType_TARGET_TYPE_METHOD : _google_protobuf_FieldOptions_OptionTargetType = 9 ;
pub type _google_protobuf_FieldOptions_OptionTargetType = ::std::os::raw::c_uint;
pub use self::_google_protobuf_FieldOptions_OptionTargetType as google_protobuf_FieldOptions_OptionTargetType;
pub const _google_protobuf_MethodOptions_IdempotencyLevel_google_protobuf_MethodOptions_IdempotencyLevel_IDEMPOTENCY_UNKNOWN : _google_protobuf_MethodOptions_IdempotencyLevel = 0 ;
pub const _google_protobuf_MethodOptions_IdempotencyLevel_google_protobuf_MethodOptions_IdempotencyLevel_NO_SIDE_EFFECTS : _google_protobuf_MethodOptions_IdempotencyLevel = 1 ;
pub const _google_protobuf_MethodOptions_IdempotencyLevel_google_protobuf_MethodOptions_IdempotencyLevel_IDEMPOTENT : _google_protobuf_MethodOptions_IdempotencyLevel = 2 ;
pub type _google_protobuf_MethodOptions_IdempotencyLevel = ::std::os::raw::c_uint;
pub use self::_google_protobuf_MethodOptions_IdempotencyLevel as google_protobuf_MethodOptions_IdempotencyLevel;
pub const _google_protobuf_FeatureSet_FieldPresence_google_protobuf_FeatureSet_FieldPresence_FIELD_PRESENCE_UNKNOWN : _google_protobuf_FeatureSet_FieldPresence = 0 ;
pub const _google_protobuf_FeatureSet_FieldPresence_google_protobuf_FeatureSet_FieldPresence_EXPLICIT : _google_protobuf_FeatureSet_FieldPresence = 1 ;
pub const _google_protobuf_FeatureSet_FieldPresence_google_protobuf_FeatureSet_FieldPresence_IMPLICIT : _google_protobuf_FeatureSet_FieldPresence = 2 ;
pub const _google_protobuf_FeatureSet_FieldPresence_google_protobuf_FeatureSet_FieldPresence_LEGACY_REQUIRED : _google_protobuf_FeatureSet_FieldPresence = 3 ;
pub type _google_protobuf_FeatureSet_FieldPresence = ::std::os::raw::c_uint;
pub use self::_google_protobuf_FeatureSet_FieldPresence as google_protobuf_FeatureSet_FieldPresence;
pub const _google_protobuf_FeatureSet_EnumType_google_protobuf_FeatureSet_EnumType_ENUM_TYPE_UNKNOWN : _google_protobuf_FeatureSet_EnumType = 0 ;
pub const _google_protobuf_FeatureSet_EnumType_google_protobuf_FeatureSet_EnumType_OPEN:
    _google_protobuf_FeatureSet_EnumType = 1;
pub const _google_protobuf_FeatureSet_EnumType_google_protobuf_FeatureSet_EnumType_CLOSED:
    _google_protobuf_FeatureSet_EnumType = 2;
pub type _google_protobuf_FeatureSet_EnumType = ::std::os::raw::c_uint;
pub use self::_google_protobuf_FeatureSet_EnumType as google_protobuf_FeatureSet_EnumType;
pub const _google_protobuf_FeatureSet_RepeatedFieldEncoding_google_protobuf_FeatureSet_RepeatedFieldEncoding_REPEATED_FIELD_ENCODING_UNKNOWN : _google_protobuf_FeatureSet_RepeatedFieldEncoding = 0 ;
pub const _google_protobuf_FeatureSet_RepeatedFieldEncoding_google_protobuf_FeatureSet_RepeatedFieldEncoding_PACKED : _google_protobuf_FeatureSet_RepeatedFieldEncoding = 1 ;
pub const _google_protobuf_FeatureSet_RepeatedFieldEncoding_google_protobuf_FeatureSet_RepeatedFieldEncoding_EXPANDED : _google_protobuf_FeatureSet_RepeatedFieldEncoding = 2 ;
pub type _google_protobuf_FeatureSet_RepeatedFieldEncoding = ::std::os::raw::c_uint;
pub use self::_google_protobuf_FeatureSet_RepeatedFieldEncoding as google_protobuf_FeatureSet_RepeatedFieldEncoding;
pub const _google_protobuf_FeatureSet_Utf8Validation_google_protobuf_FeatureSet_Utf8Validation_UTF8_VALIDATION_UNKNOWN : _google_protobuf_FeatureSet_Utf8Validation = 0 ;
pub const _google_protobuf_FeatureSet_Utf8Validation_google_protobuf_FeatureSet_Utf8Validation_VERIFY : _google_protobuf_FeatureSet_Utf8Validation = 2 ;
pub const _google_protobuf_FeatureSet_Utf8Validation_google_protobuf_FeatureSet_Utf8Validation_NONE : _google_protobuf_FeatureSet_Utf8Validation = 3 ;
pub type _google_protobuf_FeatureSet_Utf8Validation = ::std::os::raw::c_uint;
pub use self::_google_protobuf_FeatureSet_Utf8Validation as google_protobuf_FeatureSet_Utf8Validation;
pub const _google_protobuf_FeatureSet_MessageEncoding_google_protobuf_FeatureSet_MessageEncoding_MESSAGE_ENCODING_UNKNOWN : _google_protobuf_FeatureSet_MessageEncoding = 0 ;
pub const _google_protobuf_FeatureSet_MessageEncoding_google_protobuf_FeatureSet_MessageEncoding_LENGTH_PREFIXED : _google_protobuf_FeatureSet_MessageEncoding = 1 ;
pub const _google_protobuf_FeatureSet_MessageEncoding_google_protobuf_FeatureSet_MessageEncoding_DELIMITED : _google_protobuf_FeatureSet_MessageEncoding = 2 ;
pub type _google_protobuf_FeatureSet_MessageEncoding = ::std::os::raw::c_uint;
pub use self::_google_protobuf_FeatureSet_MessageEncoding as google_protobuf_FeatureSet_MessageEncoding;
pub const _google_protobuf_FeatureSet_JsonFormat_google_protobuf_FeatureSet_JsonFormat_JSON_FORMAT_UNKNOWN : _google_protobuf_FeatureSet_JsonFormat = 0 ;
pub const _google_protobuf_FeatureSet_JsonFormat_google_protobuf_FeatureSet_JsonFormat_ALLOW:
    _google_protobuf_FeatureSet_JsonFormat = 1;
pub const _google_protobuf_FeatureSet_JsonFormat_google_protobuf_FeatureSet_JsonFormat_LEGACY_BEST_EFFORT : _google_protobuf_FeatureSet_JsonFormat = 2 ;
pub type _google_protobuf_FeatureSet_JsonFormat = ::std::os::raw::c_uint;
pub use self::_google_protobuf_FeatureSet_JsonFormat as google_protobuf_FeatureSet_JsonFormat;
pub const _google_protobuf_GeneratedCodeInfo_Annotation_Semantic_google_protobuf_GeneratedCodeInfo_Annotation_Semantic_NONE : _google_protobuf_GeneratedCodeInfo_Annotation_Semantic = 0 ;
pub const _google_protobuf_GeneratedCodeInfo_Annotation_Semantic_google_protobuf_GeneratedCodeInfo_Annotation_Semantic_SET : _google_protobuf_GeneratedCodeInfo_Annotation_Semantic = 1 ;
pub const _google_protobuf_GeneratedCodeInfo_Annotation_Semantic_google_protobuf_GeneratedCodeInfo_Annotation_Semantic_ALIAS : _google_protobuf_GeneratedCodeInfo_Annotation_Semantic = 2 ;
pub type _google_protobuf_GeneratedCodeInfo_Annotation_Semantic = ::std::os::raw::c_uint;
pub use self::_google_protobuf_GeneratedCodeInfo_Annotation_Semantic as google_protobuf_GeneratedCodeInfo_Annotation_Semantic;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _google_protobuf_FileDescriptorSet {
    pub file: pb_callback_t,
}
#[test]
fn bindgen_test_layout__google_protobuf_FileDescriptorSet() {
    const UNINIT: ::std::mem::MaybeUninit<_google_protobuf_FileDescriptorSet> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_google_protobuf_FileDescriptorSet>(),
        16usize,
        concat!("Size of: ", stringify!(_google_protobuf_FileDescriptorSet))
    );
    assert_eq!(
        ::std::mem::align_of::<_google_protobuf_FileDescriptorSet>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_google_protobuf_FileDescriptorSet)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FileDescriptorSet),
            "::",
            stringify!(file)
        )
    );
}
pub type google_protobuf_FileDescriptorSet = _google_protobuf_FileDescriptorSet;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _google_protobuf_DescriptorProto_ReservedRange {
    pub has_start: bool,
    pub start: i32,
    pub has_end: bool,
    pub end: i32,
}
#[test]
fn bindgen_test_layout__google_protobuf_DescriptorProto_ReservedRange() {
    const UNINIT: ::std::mem::MaybeUninit<_google_protobuf_DescriptorProto_ReservedRange> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_google_protobuf_DescriptorProto_ReservedRange>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_google_protobuf_DescriptorProto_ReservedRange)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_google_protobuf_DescriptorProto_ReservedRange>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_google_protobuf_DescriptorProto_ReservedRange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_DescriptorProto_ReservedRange),
            "::",
            stringify!(has_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_DescriptorProto_ReservedRange),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_end) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_DescriptorProto_ReservedRange),
            "::",
            stringify!(has_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_DescriptorProto_ReservedRange),
            "::",
            stringify!(end)
        )
    );
}
pub type google_protobuf_DescriptorProto_ReservedRange =
    _google_protobuf_DescriptorProto_ReservedRange;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _google_protobuf_ExtensionRangeOptions_Declaration {
    pub has_number: bool,
    pub number: i32,
    pub full_name: pb_callback_t,
    pub type_: pb_callback_t,
    pub has_reserved: bool,
    pub reserved: bool,
    pub has_repeated: bool,
    pub repeated: bool,
}
#[test]
fn bindgen_test_layout__google_protobuf_ExtensionRangeOptions_Declaration() {
    const UNINIT: ::std::mem::MaybeUninit<_google_protobuf_ExtensionRangeOptions_Declaration> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_google_protobuf_ExtensionRangeOptions_Declaration>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(_google_protobuf_ExtensionRangeOptions_Declaration)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_google_protobuf_ExtensionRangeOptions_Declaration>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_google_protobuf_ExtensionRangeOptions_Declaration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_number) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_ExtensionRangeOptions_Declaration),
            "::",
            stringify!(has_number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).number) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_ExtensionRangeOptions_Declaration),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).full_name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_ExtensionRangeOptions_Declaration),
            "::",
            stringify!(full_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_ExtensionRangeOptions_Declaration),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_reserved) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_ExtensionRangeOptions_Declaration),
            "::",
            stringify!(has_reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_ExtensionRangeOptions_Declaration),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_repeated) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_ExtensionRangeOptions_Declaration),
            "::",
            stringify!(has_repeated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).repeated) as usize - ptr as usize },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_ExtensionRangeOptions_Declaration),
            "::",
            stringify!(repeated)
        )
    );
}
pub type google_protobuf_ExtensionRangeOptions_Declaration =
    _google_protobuf_ExtensionRangeOptions_Declaration;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _google_protobuf_EnumDescriptorProto_EnumReservedRange {
    pub has_start: bool,
    pub start: i32,
    pub has_end: bool,
    pub end: i32,
}
#[test]
fn bindgen_test_layout__google_protobuf_EnumDescriptorProto_EnumReservedRange() {
    const UNINIT: ::std::mem::MaybeUninit<_google_protobuf_EnumDescriptorProto_EnumReservedRange> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_google_protobuf_EnumDescriptorProto_EnumReservedRange>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_google_protobuf_EnumDescriptorProto_EnumReservedRange)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_google_protobuf_EnumDescriptorProto_EnumReservedRange>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_google_protobuf_EnumDescriptorProto_EnumReservedRange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_EnumDescriptorProto_EnumReservedRange),
            "::",
            stringify!(has_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_EnumDescriptorProto_EnumReservedRange),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_end) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_EnumDescriptorProto_EnumReservedRange),
            "::",
            stringify!(has_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_EnumDescriptorProto_EnumReservedRange),
            "::",
            stringify!(end)
        )
    );
}
pub type google_protobuf_EnumDescriptorProto_EnumReservedRange =
    _google_protobuf_EnumDescriptorProto_EnumReservedRange;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _google_protobuf_FieldOptions_EditionDefault {
    pub value: pb_callback_t,
    pub has_edition: bool,
    pub edition: google_protobuf_Edition,
}
#[test]
fn bindgen_test_layout__google_protobuf_FieldOptions_EditionDefault() {
    const UNINIT: ::std::mem::MaybeUninit<_google_protobuf_FieldOptions_EditionDefault> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_google_protobuf_FieldOptions_EditionDefault>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_google_protobuf_FieldOptions_EditionDefault)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_google_protobuf_FieldOptions_EditionDefault>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_google_protobuf_FieldOptions_EditionDefault)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldOptions_EditionDefault),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_edition) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldOptions_EditionDefault),
            "::",
            stringify!(has_edition)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edition) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldOptions_EditionDefault),
            "::",
            stringify!(edition)
        )
    );
}
pub type google_protobuf_FieldOptions_EditionDefault = _google_protobuf_FieldOptions_EditionDefault;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _google_protobuf_FieldOptions_FeatureSupport {
    pub has_edition_introduced: bool,
    pub edition_introduced: google_protobuf_Edition,
    pub has_edition_deprecated: bool,
    pub edition_deprecated: google_protobuf_Edition,
    pub deprecation_warning: pb_callback_t,
    pub has_edition_removed: bool,
    pub edition_removed: google_protobuf_Edition,
}
#[test]
fn bindgen_test_layout__google_protobuf_FieldOptions_FeatureSupport() {
    const UNINIT: ::std::mem::MaybeUninit<_google_protobuf_FieldOptions_FeatureSupport> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_google_protobuf_FieldOptions_FeatureSupport>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(_google_protobuf_FieldOptions_FeatureSupport)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_google_protobuf_FieldOptions_FeatureSupport>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_google_protobuf_FieldOptions_FeatureSupport)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_edition_introduced) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldOptions_FeatureSupport),
            "::",
            stringify!(has_edition_introduced)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edition_introduced) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldOptions_FeatureSupport),
            "::",
            stringify!(edition_introduced)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_edition_deprecated) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldOptions_FeatureSupport),
            "::",
            stringify!(has_edition_deprecated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edition_deprecated) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldOptions_FeatureSupport),
            "::",
            stringify!(edition_deprecated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deprecation_warning) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldOptions_FeatureSupport),
            "::",
            stringify!(deprecation_warning)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_edition_removed) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldOptions_FeatureSupport),
            "::",
            stringify!(has_edition_removed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edition_removed) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldOptions_FeatureSupport),
            "::",
            stringify!(edition_removed)
        )
    );
}
pub type google_protobuf_FieldOptions_FeatureSupport = _google_protobuf_FieldOptions_FeatureSupport;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _google_protobuf_UninterpretedOption {
    pub name: pb_callback_t,
    pub identifier_value: pb_callback_t,
    pub has_positive_int_value: bool,
    pub positive_int_value: u64,
    pub has_negative_int_value: bool,
    pub negative_int_value: i64,
    pub has_double_value: bool,
    pub double_value: f64,
    pub string_value: pb_callback_t,
    pub aggregate_value: pb_callback_t,
}
#[test]
fn bindgen_test_layout__google_protobuf_UninterpretedOption() {
    const UNINIT: ::std::mem::MaybeUninit<_google_protobuf_UninterpretedOption> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_google_protobuf_UninterpretedOption>(),
        112usize,
        concat!(
            "Size of: ",
            stringify!(_google_protobuf_UninterpretedOption)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_google_protobuf_UninterpretedOption>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_google_protobuf_UninterpretedOption)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_UninterpretedOption),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identifier_value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_UninterpretedOption),
            "::",
            stringify!(identifier_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_positive_int_value) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_UninterpretedOption),
            "::",
            stringify!(has_positive_int_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).positive_int_value) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_UninterpretedOption),
            "::",
            stringify!(positive_int_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_negative_int_value) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_UninterpretedOption),
            "::",
            stringify!(has_negative_int_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).negative_int_value) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_UninterpretedOption),
            "::",
            stringify!(negative_int_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_double_value) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_UninterpretedOption),
            "::",
            stringify!(has_double_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).double_value) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_UninterpretedOption),
            "::",
            stringify!(double_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string_value) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_UninterpretedOption),
            "::",
            stringify!(string_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aggregate_value) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_UninterpretedOption),
            "::",
            stringify!(aggregate_value)
        )
    );
}
pub type google_protobuf_UninterpretedOption = _google_protobuf_UninterpretedOption;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _google_protobuf_UninterpretedOption_NamePart {
    pub name_part: pb_callback_t,
    pub is_extension: bool,
}
#[test]
fn bindgen_test_layout__google_protobuf_UninterpretedOption_NamePart() {
    const UNINIT: ::std::mem::MaybeUninit<_google_protobuf_UninterpretedOption_NamePart> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_google_protobuf_UninterpretedOption_NamePart>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_google_protobuf_UninterpretedOption_NamePart)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_google_protobuf_UninterpretedOption_NamePart>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_google_protobuf_UninterpretedOption_NamePart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name_part) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_UninterpretedOption_NamePart),
            "::",
            stringify!(name_part)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_extension) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_UninterpretedOption_NamePart),
            "::",
            stringify!(is_extension)
        )
    );
}
pub type google_protobuf_UninterpretedOption_NamePart =
    _google_protobuf_UninterpretedOption_NamePart;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _google_protobuf_FeatureSet {
    pub has_field_presence: bool,
    pub field_presence: google_protobuf_FeatureSet_FieldPresence,
    pub has_enum_type: bool,
    pub enum_type: google_protobuf_FeatureSet_EnumType,
    pub has_repeated_field_encoding: bool,
    pub repeated_field_encoding: google_protobuf_FeatureSet_RepeatedFieldEncoding,
    pub has_utf8_validation: bool,
    pub utf8_validation: google_protobuf_FeatureSet_Utf8Validation,
    pub has_message_encoding: bool,
    pub message_encoding: google_protobuf_FeatureSet_MessageEncoding,
    pub has_json_format: bool,
    pub json_format: google_protobuf_FeatureSet_JsonFormat,
    pub extensions: *mut pb_extension_t,
}
#[test]
fn bindgen_test_layout__google_protobuf_FeatureSet() {
    const UNINIT: ::std::mem::MaybeUninit<_google_protobuf_FeatureSet> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_google_protobuf_FeatureSet>(),
        56usize,
        concat!("Size of: ", stringify!(_google_protobuf_FeatureSet))
    );
    assert_eq!(
        ::std::mem::align_of::<_google_protobuf_FeatureSet>(),
        8usize,
        concat!("Alignment of ", stringify!(_google_protobuf_FeatureSet))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_field_presence) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FeatureSet),
            "::",
            stringify!(has_field_presence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field_presence) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FeatureSet),
            "::",
            stringify!(field_presence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_enum_type) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FeatureSet),
            "::",
            stringify!(has_enum_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enum_type) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FeatureSet),
            "::",
            stringify!(enum_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_repeated_field_encoding) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FeatureSet),
            "::",
            stringify!(has_repeated_field_encoding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).repeated_field_encoding) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FeatureSet),
            "::",
            stringify!(repeated_field_encoding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_utf8_validation) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FeatureSet),
            "::",
            stringify!(has_utf8_validation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).utf8_validation) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FeatureSet),
            "::",
            stringify!(utf8_validation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_message_encoding) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FeatureSet),
            "::",
            stringify!(has_message_encoding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).message_encoding) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FeatureSet),
            "::",
            stringify!(message_encoding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_json_format) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FeatureSet),
            "::",
            stringify!(has_json_format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).json_format) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FeatureSet),
            "::",
            stringify!(json_format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extensions) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FeatureSet),
            "::",
            stringify!(extensions)
        )
    );
}
pub type google_protobuf_FeatureSet = _google_protobuf_FeatureSet;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _google_protobuf_ExtensionRangeOptions {
    pub declaration: pb_callback_t,
    pub has_verification: bool,
    pub verification: google_protobuf_ExtensionRangeOptions_VerificationState,
    pub has_features: bool,
    pub features: google_protobuf_FeatureSet,
    pub uninterpreted_option: pb_callback_t,
    pub extensions: *mut pb_extension_t,
}
#[test]
fn bindgen_test_layout__google_protobuf_ExtensionRangeOptions() {
    const UNINIT: ::std::mem::MaybeUninit<_google_protobuf_ExtensionRangeOptions> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_google_protobuf_ExtensionRangeOptions>(),
        112usize,
        concat!(
            "Size of: ",
            stringify!(_google_protobuf_ExtensionRangeOptions)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_google_protobuf_ExtensionRangeOptions>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_google_protobuf_ExtensionRangeOptions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).declaration) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_ExtensionRangeOptions),
            "::",
            stringify!(declaration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_verification) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_ExtensionRangeOptions),
            "::",
            stringify!(has_verification)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).verification) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_ExtensionRangeOptions),
            "::",
            stringify!(verification)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_features) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_ExtensionRangeOptions),
            "::",
            stringify!(has_features)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).features) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_ExtensionRangeOptions),
            "::",
            stringify!(features)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uninterpreted_option) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_ExtensionRangeOptions),
            "::",
            stringify!(uninterpreted_option)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extensions) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_ExtensionRangeOptions),
            "::",
            stringify!(extensions)
        )
    );
}
pub type google_protobuf_ExtensionRangeOptions = _google_protobuf_ExtensionRangeOptions;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _google_protobuf_DescriptorProto_ExtensionRange {
    pub has_start: bool,
    pub start: i32,
    pub has_end: bool,
    pub end: i32,
    pub has_options: bool,
    pub options: google_protobuf_ExtensionRangeOptions,
}
#[test]
fn bindgen_test_layout__google_protobuf_DescriptorProto_ExtensionRange() {
    const UNINIT: ::std::mem::MaybeUninit<_google_protobuf_DescriptorProto_ExtensionRange> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_google_protobuf_DescriptorProto_ExtensionRange>(),
        136usize,
        concat!(
            "Size of: ",
            stringify!(_google_protobuf_DescriptorProto_ExtensionRange)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_google_protobuf_DescriptorProto_ExtensionRange>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_google_protobuf_DescriptorProto_ExtensionRange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_DescriptorProto_ExtensionRange),
            "::",
            stringify!(has_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_DescriptorProto_ExtensionRange),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_end) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_DescriptorProto_ExtensionRange),
            "::",
            stringify!(has_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_DescriptorProto_ExtensionRange),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_options) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_DescriptorProto_ExtensionRange),
            "::",
            stringify!(has_options)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).options) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_DescriptorProto_ExtensionRange),
            "::",
            stringify!(options)
        )
    );
}
pub type google_protobuf_DescriptorProto_ExtensionRange =
    _google_protobuf_DescriptorProto_ExtensionRange;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _google_protobuf_FileOptions {
    pub java_package: pb_callback_t,
    pub java_outer_classname: pb_callback_t,
    pub has_optimize_for: bool,
    pub optimize_for: google_protobuf_FileOptions_OptimizeMode,
    pub has_java_multiple_files: bool,
    pub java_multiple_files: bool,
    pub go_package: pb_callback_t,
    pub has_cc_generic_services: bool,
    pub cc_generic_services: bool,
    pub has_java_generic_services: bool,
    pub java_generic_services: bool,
    pub has_py_generic_services: bool,
    pub py_generic_services: bool,
    pub has_java_generate_equals_and_hash: bool,
    pub java_generate_equals_and_hash: bool,
    pub has_deprecated: bool,
    pub deprecated: bool,
    pub has_java_string_check_utf8: bool,
    pub java_string_check_utf8: bool,
    pub has_cc_enable_arenas: bool,
    pub cc_enable_arenas: bool,
    pub objc_class_prefix: pb_callback_t,
    pub csharp_namespace: pb_callback_t,
    pub swift_prefix: pb_callback_t,
    pub php_class_prefix: pb_callback_t,
    pub php_namespace: pb_callback_t,
    pub php_metadata_namespace: pb_callback_t,
    pub ruby_package: pb_callback_t,
    pub has_features: bool,
    pub features: google_protobuf_FeatureSet,
    pub uninterpreted_option: pb_callback_t,
    pub extensions: *mut pb_extension_t,
}
#[test]
fn bindgen_test_layout__google_protobuf_FileOptions() {
    const UNINIT: ::std::mem::MaybeUninit<_google_protobuf_FileOptions> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_google_protobuf_FileOptions>(),
        280usize,
        concat!("Size of: ", stringify!(_google_protobuf_FileOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<_google_protobuf_FileOptions>(),
        8usize,
        concat!("Alignment of ", stringify!(_google_protobuf_FileOptions))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).java_package) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FileOptions),
            "::",
            stringify!(java_package)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).java_outer_classname) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FileOptions),
            "::",
            stringify!(java_outer_classname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_optimize_for) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FileOptions),
            "::",
            stringify!(has_optimize_for)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).optimize_for) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FileOptions),
            "::",
            stringify!(optimize_for)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_java_multiple_files) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FileOptions),
            "::",
            stringify!(has_java_multiple_files)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).java_multiple_files) as usize - ptr as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FileOptions),
            "::",
            stringify!(java_multiple_files)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).go_package) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FileOptions),
            "::",
            stringify!(go_package)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_cc_generic_services) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FileOptions),
            "::",
            stringify!(has_cc_generic_services)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cc_generic_services) as usize - ptr as usize },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FileOptions),
            "::",
            stringify!(cc_generic_services)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_java_generic_services) as usize - ptr as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FileOptions),
            "::",
            stringify!(has_java_generic_services)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).java_generic_services) as usize - ptr as usize },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FileOptions),
            "::",
            stringify!(java_generic_services)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_py_generic_services) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FileOptions),
            "::",
            stringify!(has_py_generic_services)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).py_generic_services) as usize - ptr as usize },
        69usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FileOptions),
            "::",
            stringify!(py_generic_services)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).has_java_generate_equals_and_hash) as usize - ptr as usize
        },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FileOptions),
            "::",
            stringify!(has_java_generate_equals_and_hash)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).java_generate_equals_and_hash) as usize - ptr as usize
        },
        71usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FileOptions),
            "::",
            stringify!(java_generate_equals_and_hash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_deprecated) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FileOptions),
            "::",
            stringify!(has_deprecated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deprecated) as usize - ptr as usize },
        73usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FileOptions),
            "::",
            stringify!(deprecated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_java_string_check_utf8) as usize - ptr as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FileOptions),
            "::",
            stringify!(has_java_string_check_utf8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).java_string_check_utf8) as usize - ptr as usize },
        75usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FileOptions),
            "::",
            stringify!(java_string_check_utf8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_cc_enable_arenas) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FileOptions),
            "::",
            stringify!(has_cc_enable_arenas)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cc_enable_arenas) as usize - ptr as usize },
        77usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FileOptions),
            "::",
            stringify!(cc_enable_arenas)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objc_class_prefix) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FileOptions),
            "::",
            stringify!(objc_class_prefix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).csharp_namespace) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FileOptions),
            "::",
            stringify!(csharp_namespace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).swift_prefix) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FileOptions),
            "::",
            stringify!(swift_prefix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).php_class_prefix) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FileOptions),
            "::",
            stringify!(php_class_prefix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).php_namespace) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FileOptions),
            "::",
            stringify!(php_namespace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).php_metadata_namespace) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FileOptions),
            "::",
            stringify!(php_metadata_namespace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ruby_package) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FileOptions),
            "::",
            stringify!(ruby_package)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_features) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FileOptions),
            "::",
            stringify!(has_features)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).features) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FileOptions),
            "::",
            stringify!(features)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uninterpreted_option) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FileOptions),
            "::",
            stringify!(uninterpreted_option)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extensions) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FileOptions),
            "::",
            stringify!(extensions)
        )
    );
}
pub type google_protobuf_FileOptions = _google_protobuf_FileOptions;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _google_protobuf_MessageOptions {
    pub has_message_set_wire_format: bool,
    pub message_set_wire_format: bool,
    pub has_no_standard_descriptor_accessor: bool,
    pub no_standard_descriptor_accessor: bool,
    pub has_deprecated: bool,
    pub deprecated: bool,
    pub has_map_entry: bool,
    pub map_entry: bool,
    pub has_deprecated_legacy_json_field_conflicts: bool,
    pub deprecated_legacy_json_field_conflicts: bool,
    pub has_features: bool,
    pub features: google_protobuf_FeatureSet,
    pub uninterpreted_option: pb_callback_t,
    pub extensions: *mut pb_extension_t,
}
#[test]
fn bindgen_test_layout__google_protobuf_MessageOptions() {
    const UNINIT: ::std::mem::MaybeUninit<_google_protobuf_MessageOptions> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_google_protobuf_MessageOptions>(),
        96usize,
        concat!("Size of: ", stringify!(_google_protobuf_MessageOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<_google_protobuf_MessageOptions>(),
        8usize,
        concat!("Alignment of ", stringify!(_google_protobuf_MessageOptions))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_message_set_wire_format) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_MessageOptions),
            "::",
            stringify!(has_message_set_wire_format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).message_set_wire_format) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_MessageOptions),
            "::",
            stringify!(message_set_wire_format)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).has_no_standard_descriptor_accessor) as usize - ptr as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_MessageOptions),
            "::",
            stringify!(has_no_standard_descriptor_accessor)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).no_standard_descriptor_accessor) as usize - ptr as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_MessageOptions),
            "::",
            stringify!(no_standard_descriptor_accessor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_deprecated) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_MessageOptions),
            "::",
            stringify!(has_deprecated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deprecated) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_MessageOptions),
            "::",
            stringify!(deprecated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_map_entry) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_MessageOptions),
            "::",
            stringify!(has_map_entry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).map_entry) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_MessageOptions),
            "::",
            stringify!(map_entry)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).has_deprecated_legacy_json_field_conflicts) as usize
                - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_MessageOptions),
            "::",
            stringify!(has_deprecated_legacy_json_field_conflicts)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).deprecated_legacy_json_field_conflicts) as usize
                - ptr as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_MessageOptions),
            "::",
            stringify!(deprecated_legacy_json_field_conflicts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_features) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_MessageOptions),
            "::",
            stringify!(has_features)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).features) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_MessageOptions),
            "::",
            stringify!(features)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uninterpreted_option) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_MessageOptions),
            "::",
            stringify!(uninterpreted_option)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extensions) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_MessageOptions),
            "::",
            stringify!(extensions)
        )
    );
}
pub type google_protobuf_MessageOptions = _google_protobuf_MessageOptions;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _google_protobuf_DescriptorProto {
    pub name: pb_callback_t,
    pub field: pb_callback_t,
    pub nested_type: pb_callback_t,
    pub enum_type: pb_callback_t,
    pub extension_range: pb_callback_t,
    pub extension: pb_callback_t,
    pub has_options: bool,
    pub options: google_protobuf_MessageOptions,
    pub oneof_decl: pb_callback_t,
    pub reserved_range: pb_callback_t,
    pub reserved_name: pb_callback_t,
}
#[test]
fn bindgen_test_layout__google_protobuf_DescriptorProto() {
    const UNINIT: ::std::mem::MaybeUninit<_google_protobuf_DescriptorProto> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_google_protobuf_DescriptorProto>(),
        248usize,
        concat!("Size of: ", stringify!(_google_protobuf_DescriptorProto))
    );
    assert_eq!(
        ::std::mem::align_of::<_google_protobuf_DescriptorProto>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_google_protobuf_DescriptorProto)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_DescriptorProto),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_DescriptorProto),
            "::",
            stringify!(field)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nested_type) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_DescriptorProto),
            "::",
            stringify!(nested_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enum_type) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_DescriptorProto),
            "::",
            stringify!(enum_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extension_range) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_DescriptorProto),
            "::",
            stringify!(extension_range)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extension) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_DescriptorProto),
            "::",
            stringify!(extension)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_options) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_DescriptorProto),
            "::",
            stringify!(has_options)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).options) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_DescriptorProto),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oneof_decl) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_DescriptorProto),
            "::",
            stringify!(oneof_decl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved_range) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_DescriptorProto),
            "::",
            stringify!(reserved_range)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved_name) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_DescriptorProto),
            "::",
            stringify!(reserved_name)
        )
    );
}
pub type google_protobuf_DescriptorProto = _google_protobuf_DescriptorProto;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _google_protobuf_FieldOptions {
    pub has_ctype: bool,
    pub ctype: google_protobuf_FieldOptions_CType,
    pub has_packed: bool,
    pub packed: bool,
    pub has_deprecated: bool,
    pub deprecated: bool,
    pub has_lazy: bool,
    pub lazy: bool,
    pub has_jstype: bool,
    pub jstype: google_protobuf_FieldOptions_JSType,
    pub has_weak: bool,
    pub weak: bool,
    pub has_unverified_lazy: bool,
    pub unverified_lazy: bool,
    pub has_debug_redact: bool,
    pub debug_redact: bool,
    pub has_retention: bool,
    pub retention: google_protobuf_FieldOptions_OptionRetention,
    pub targets: pb_callback_t,
    pub edition_defaults: pb_callback_t,
    pub has_features: bool,
    pub features: google_protobuf_FeatureSet,
    pub has_feature_support: bool,
    pub feature_support: google_protobuf_FieldOptions_FeatureSupport,
    pub uninterpreted_option: pb_callback_t,
    pub extensions: *mut pb_extension_t,
}
#[test]
fn bindgen_test_layout__google_protobuf_FieldOptions() {
    const UNINIT: ::std::mem::MaybeUninit<_google_protobuf_FieldOptions> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_google_protobuf_FieldOptions>(),
        200usize,
        concat!("Size of: ", stringify!(_google_protobuf_FieldOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<_google_protobuf_FieldOptions>(),
        8usize,
        concat!("Alignment of ", stringify!(_google_protobuf_FieldOptions))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_ctype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldOptions),
            "::",
            stringify!(has_ctype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctype) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldOptions),
            "::",
            stringify!(ctype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_packed) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldOptions),
            "::",
            stringify!(has_packed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).packed) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldOptions),
            "::",
            stringify!(packed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_deprecated) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldOptions),
            "::",
            stringify!(has_deprecated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deprecated) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldOptions),
            "::",
            stringify!(deprecated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_lazy) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldOptions),
            "::",
            stringify!(has_lazy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lazy) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldOptions),
            "::",
            stringify!(lazy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_jstype) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldOptions),
            "::",
            stringify!(has_jstype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jstype) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldOptions),
            "::",
            stringify!(jstype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_weak) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldOptions),
            "::",
            stringify!(has_weak)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).weak) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldOptions),
            "::",
            stringify!(weak)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_unverified_lazy) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldOptions),
            "::",
            stringify!(has_unverified_lazy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unverified_lazy) as usize - ptr as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldOptions),
            "::",
            stringify!(unverified_lazy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_debug_redact) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldOptions),
            "::",
            stringify!(has_debug_redact)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).debug_redact) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldOptions),
            "::",
            stringify!(debug_redact)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_retention) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldOptions),
            "::",
            stringify!(has_retention)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retention) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldOptions),
            "::",
            stringify!(retention)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).targets) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldOptions),
            "::",
            stringify!(targets)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edition_defaults) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldOptions),
            "::",
            stringify!(edition_defaults)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_features) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldOptions),
            "::",
            stringify!(has_features)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).features) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldOptions),
            "::",
            stringify!(features)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_feature_support) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldOptions),
            "::",
            stringify!(has_feature_support)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).feature_support) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldOptions),
            "::",
            stringify!(feature_support)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uninterpreted_option) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldOptions),
            "::",
            stringify!(uninterpreted_option)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extensions) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldOptions),
            "::",
            stringify!(extensions)
        )
    );
}
pub type google_protobuf_FieldOptions = _google_protobuf_FieldOptions;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _google_protobuf_FieldDescriptorProto {
    pub name: pb_callback_t,
    pub extendee: pb_callback_t,
    pub has_number: bool,
    pub number: i32,
    pub has_label: bool,
    pub label: google_protobuf_FieldDescriptorProto_Label,
    pub has_type: bool,
    pub type_: google_protobuf_FieldDescriptorProto_Type,
    pub type_name: pb_callback_t,
    pub default_value: pb_callback_t,
    pub has_options: bool,
    pub options: google_protobuf_FieldOptions,
    pub has_oneof_index: bool,
    pub oneof_index: i32,
    pub json_name: pb_callback_t,
    pub has_proto3_optional: bool,
    pub proto3_optional: bool,
}
#[test]
fn bindgen_test_layout__google_protobuf_FieldDescriptorProto() {
    const UNINIT: ::std::mem::MaybeUninit<_google_protobuf_FieldDescriptorProto> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_google_protobuf_FieldDescriptorProto>(),
        328usize,
        concat!(
            "Size of: ",
            stringify!(_google_protobuf_FieldDescriptorProto)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_google_protobuf_FieldDescriptorProto>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_google_protobuf_FieldDescriptorProto)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldDescriptorProto),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extendee) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldDescriptorProto),
            "::",
            stringify!(extendee)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_number) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldDescriptorProto),
            "::",
            stringify!(has_number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).number) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldDescriptorProto),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_label) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldDescriptorProto),
            "::",
            stringify!(has_label)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).label) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldDescriptorProto),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_type) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldDescriptorProto),
            "::",
            stringify!(has_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldDescriptorProto),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldDescriptorProto),
            "::",
            stringify!(type_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).default_value) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldDescriptorProto),
            "::",
            stringify!(default_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_options) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldDescriptorProto),
            "::",
            stringify!(has_options)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).options) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldDescriptorProto),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_oneof_index) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldDescriptorProto),
            "::",
            stringify!(has_oneof_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oneof_index) as usize - ptr as usize },
        300usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldDescriptorProto),
            "::",
            stringify!(oneof_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).json_name) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldDescriptorProto),
            "::",
            stringify!(json_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_proto3_optional) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldDescriptorProto),
            "::",
            stringify!(has_proto3_optional)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).proto3_optional) as usize - ptr as usize },
        321usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FieldDescriptorProto),
            "::",
            stringify!(proto3_optional)
        )
    );
}
pub type google_protobuf_FieldDescriptorProto = _google_protobuf_FieldDescriptorProto;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _google_protobuf_OneofOptions {
    pub has_features: bool,
    pub features: google_protobuf_FeatureSet,
    pub uninterpreted_option: pb_callback_t,
    pub extensions: *mut pb_extension_t,
}
#[test]
fn bindgen_test_layout__google_protobuf_OneofOptions() {
    const UNINIT: ::std::mem::MaybeUninit<_google_protobuf_OneofOptions> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_google_protobuf_OneofOptions>(),
        88usize,
        concat!("Size of: ", stringify!(_google_protobuf_OneofOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<_google_protobuf_OneofOptions>(),
        8usize,
        concat!("Alignment of ", stringify!(_google_protobuf_OneofOptions))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_features) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_OneofOptions),
            "::",
            stringify!(has_features)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).features) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_OneofOptions),
            "::",
            stringify!(features)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uninterpreted_option) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_OneofOptions),
            "::",
            stringify!(uninterpreted_option)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extensions) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_OneofOptions),
            "::",
            stringify!(extensions)
        )
    );
}
pub type google_protobuf_OneofOptions = _google_protobuf_OneofOptions;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _google_protobuf_OneofDescriptorProto {
    pub name: pb_callback_t,
    pub has_options: bool,
    pub options: google_protobuf_OneofOptions,
}
#[test]
fn bindgen_test_layout__google_protobuf_OneofDescriptorProto() {
    const UNINIT: ::std::mem::MaybeUninit<_google_protobuf_OneofDescriptorProto> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_google_protobuf_OneofDescriptorProto>(),
        112usize,
        concat!(
            "Size of: ",
            stringify!(_google_protobuf_OneofDescriptorProto)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_google_protobuf_OneofDescriptorProto>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_google_protobuf_OneofDescriptorProto)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_OneofDescriptorProto),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_options) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_OneofDescriptorProto),
            "::",
            stringify!(has_options)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).options) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_OneofDescriptorProto),
            "::",
            stringify!(options)
        )
    );
}
pub type google_protobuf_OneofDescriptorProto = _google_protobuf_OneofDescriptorProto;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _google_protobuf_EnumOptions {
    pub has_allow_alias: bool,
    pub allow_alias: bool,
    pub has_deprecated: bool,
    pub deprecated: bool,
    pub has_deprecated_legacy_json_field_conflicts: bool,
    pub deprecated_legacy_json_field_conflicts: bool,
    pub has_features: bool,
    pub features: google_protobuf_FeatureSet,
    pub uninterpreted_option: pb_callback_t,
    pub extensions: *mut pb_extension_t,
}
#[test]
fn bindgen_test_layout__google_protobuf_EnumOptions() {
    const UNINIT: ::std::mem::MaybeUninit<_google_protobuf_EnumOptions> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_google_protobuf_EnumOptions>(),
        88usize,
        concat!("Size of: ", stringify!(_google_protobuf_EnumOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<_google_protobuf_EnumOptions>(),
        8usize,
        concat!("Alignment of ", stringify!(_google_protobuf_EnumOptions))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_allow_alias) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_EnumOptions),
            "::",
            stringify!(has_allow_alias)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allow_alias) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_EnumOptions),
            "::",
            stringify!(allow_alias)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_deprecated) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_EnumOptions),
            "::",
            stringify!(has_deprecated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deprecated) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_EnumOptions),
            "::",
            stringify!(deprecated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).has_deprecated_legacy_json_field_conflicts) as usize
                - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_EnumOptions),
            "::",
            stringify!(has_deprecated_legacy_json_field_conflicts)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).deprecated_legacy_json_field_conflicts) as usize
                - ptr as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_EnumOptions),
            "::",
            stringify!(deprecated_legacy_json_field_conflicts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_features) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_EnumOptions),
            "::",
            stringify!(has_features)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).features) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_EnumOptions),
            "::",
            stringify!(features)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uninterpreted_option) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_EnumOptions),
            "::",
            stringify!(uninterpreted_option)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extensions) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_EnumOptions),
            "::",
            stringify!(extensions)
        )
    );
}
pub type google_protobuf_EnumOptions = _google_protobuf_EnumOptions;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _google_protobuf_EnumDescriptorProto {
    pub name: pb_callback_t,
    pub value: pb_callback_t,
    pub has_options: bool,
    pub options: google_protobuf_EnumOptions,
    pub reserved_range: pb_callback_t,
    pub reserved_name: pb_callback_t,
}
#[test]
fn bindgen_test_layout__google_protobuf_EnumDescriptorProto() {
    const UNINIT: ::std::mem::MaybeUninit<_google_protobuf_EnumDescriptorProto> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_google_protobuf_EnumDescriptorProto>(),
        160usize,
        concat!(
            "Size of: ",
            stringify!(_google_protobuf_EnumDescriptorProto)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_google_protobuf_EnumDescriptorProto>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_google_protobuf_EnumDescriptorProto)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_EnumDescriptorProto),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_EnumDescriptorProto),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_options) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_EnumDescriptorProto),
            "::",
            stringify!(has_options)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).options) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_EnumDescriptorProto),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved_range) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_EnumDescriptorProto),
            "::",
            stringify!(reserved_range)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved_name) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_EnumDescriptorProto),
            "::",
            stringify!(reserved_name)
        )
    );
}
pub type google_protobuf_EnumDescriptorProto = _google_protobuf_EnumDescriptorProto;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _google_protobuf_EnumValueOptions {
    pub has_deprecated: bool,
    pub deprecated: bool,
    pub has_features: bool,
    pub features: google_protobuf_FeatureSet,
    pub has_debug_redact: bool,
    pub debug_redact: bool,
    pub has_feature_support: bool,
    pub feature_support: google_protobuf_FieldOptions_FeatureSupport,
    pub uninterpreted_option: pb_callback_t,
    pub extensions: *mut pb_extension_t,
}
#[test]
fn bindgen_test_layout__google_protobuf_EnumValueOptions() {
    const UNINIT: ::std::mem::MaybeUninit<_google_protobuf_EnumValueOptions> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_google_protobuf_EnumValueOptions>(),
        136usize,
        concat!("Size of: ", stringify!(_google_protobuf_EnumValueOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<_google_protobuf_EnumValueOptions>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_google_protobuf_EnumValueOptions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_deprecated) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_EnumValueOptions),
            "::",
            stringify!(has_deprecated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deprecated) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_EnumValueOptions),
            "::",
            stringify!(deprecated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_features) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_EnumValueOptions),
            "::",
            stringify!(has_features)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).features) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_EnumValueOptions),
            "::",
            stringify!(features)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_debug_redact) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_EnumValueOptions),
            "::",
            stringify!(has_debug_redact)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).debug_redact) as usize - ptr as usize },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_EnumValueOptions),
            "::",
            stringify!(debug_redact)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_feature_support) as usize - ptr as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_EnumValueOptions),
            "::",
            stringify!(has_feature_support)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).feature_support) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_EnumValueOptions),
            "::",
            stringify!(feature_support)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uninterpreted_option) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_EnumValueOptions),
            "::",
            stringify!(uninterpreted_option)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extensions) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_EnumValueOptions),
            "::",
            stringify!(extensions)
        )
    );
}
pub type google_protobuf_EnumValueOptions = _google_protobuf_EnumValueOptions;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _google_protobuf_EnumValueDescriptorProto {
    pub name: pb_callback_t,
    pub has_number: bool,
    pub number: i32,
    pub has_options: bool,
    pub options: google_protobuf_EnumValueOptions,
}
#[test]
fn bindgen_test_layout__google_protobuf_EnumValueDescriptorProto() {
    const UNINIT: ::std::mem::MaybeUninit<_google_protobuf_EnumValueDescriptorProto> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_google_protobuf_EnumValueDescriptorProto>(),
        168usize,
        concat!(
            "Size of: ",
            stringify!(_google_protobuf_EnumValueDescriptorProto)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_google_protobuf_EnumValueDescriptorProto>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_google_protobuf_EnumValueDescriptorProto)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_EnumValueDescriptorProto),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_number) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_EnumValueDescriptorProto),
            "::",
            stringify!(has_number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).number) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_EnumValueDescriptorProto),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_options) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_EnumValueDescriptorProto),
            "::",
            stringify!(has_options)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).options) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_EnumValueDescriptorProto),
            "::",
            stringify!(options)
        )
    );
}
pub type google_protobuf_EnumValueDescriptorProto = _google_protobuf_EnumValueDescriptorProto;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _google_protobuf_ServiceOptions {
    pub has_deprecated: bool,
    pub deprecated: bool,
    pub has_features: bool,
    pub features: google_protobuf_FeatureSet,
    pub uninterpreted_option: pb_callback_t,
    pub extensions: *mut pb_extension_t,
}
#[test]
fn bindgen_test_layout__google_protobuf_ServiceOptions() {
    const UNINIT: ::std::mem::MaybeUninit<_google_protobuf_ServiceOptions> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_google_protobuf_ServiceOptions>(),
        88usize,
        concat!("Size of: ", stringify!(_google_protobuf_ServiceOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<_google_protobuf_ServiceOptions>(),
        8usize,
        concat!("Alignment of ", stringify!(_google_protobuf_ServiceOptions))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_deprecated) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_ServiceOptions),
            "::",
            stringify!(has_deprecated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deprecated) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_ServiceOptions),
            "::",
            stringify!(deprecated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_features) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_ServiceOptions),
            "::",
            stringify!(has_features)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).features) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_ServiceOptions),
            "::",
            stringify!(features)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uninterpreted_option) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_ServiceOptions),
            "::",
            stringify!(uninterpreted_option)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extensions) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_ServiceOptions),
            "::",
            stringify!(extensions)
        )
    );
}
pub type google_protobuf_ServiceOptions = _google_protobuf_ServiceOptions;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _google_protobuf_ServiceDescriptorProto {
    pub name: pb_callback_t,
    pub method: pb_callback_t,
    pub has_options: bool,
    pub options: google_protobuf_ServiceOptions,
}
#[test]
fn bindgen_test_layout__google_protobuf_ServiceDescriptorProto() {
    const UNINIT: ::std::mem::MaybeUninit<_google_protobuf_ServiceDescriptorProto> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_google_protobuf_ServiceDescriptorProto>(),
        128usize,
        concat!(
            "Size of: ",
            stringify!(_google_protobuf_ServiceDescriptorProto)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_google_protobuf_ServiceDescriptorProto>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_google_protobuf_ServiceDescriptorProto)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_ServiceDescriptorProto),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).method) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_ServiceDescriptorProto),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_options) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_ServiceDescriptorProto),
            "::",
            stringify!(has_options)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).options) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_ServiceDescriptorProto),
            "::",
            stringify!(options)
        )
    );
}
pub type google_protobuf_ServiceDescriptorProto = _google_protobuf_ServiceDescriptorProto;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _google_protobuf_MethodOptions {
    pub has_deprecated: bool,
    pub deprecated: bool,
    pub has_idempotency_level: bool,
    pub idempotency_level: google_protobuf_MethodOptions_IdempotencyLevel,
    pub has_features: bool,
    pub features: google_protobuf_FeatureSet,
    pub uninterpreted_option: pb_callback_t,
    pub extensions: *mut pb_extension_t,
}
#[test]
fn bindgen_test_layout__google_protobuf_MethodOptions() {
    const UNINIT: ::std::mem::MaybeUninit<_google_protobuf_MethodOptions> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_google_protobuf_MethodOptions>(),
        96usize,
        concat!("Size of: ", stringify!(_google_protobuf_MethodOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<_google_protobuf_MethodOptions>(),
        8usize,
        concat!("Alignment of ", stringify!(_google_protobuf_MethodOptions))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_deprecated) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_MethodOptions),
            "::",
            stringify!(has_deprecated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deprecated) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_MethodOptions),
            "::",
            stringify!(deprecated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_idempotency_level) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_MethodOptions),
            "::",
            stringify!(has_idempotency_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idempotency_level) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_MethodOptions),
            "::",
            stringify!(idempotency_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_features) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_MethodOptions),
            "::",
            stringify!(has_features)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).features) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_MethodOptions),
            "::",
            stringify!(features)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uninterpreted_option) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_MethodOptions),
            "::",
            stringify!(uninterpreted_option)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extensions) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_MethodOptions),
            "::",
            stringify!(extensions)
        )
    );
}
pub type google_protobuf_MethodOptions = _google_protobuf_MethodOptions;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _google_protobuf_MethodDescriptorProto {
    pub name: pb_callback_t,
    pub input_type: pb_callback_t,
    pub output_type: pb_callback_t,
    pub has_options: bool,
    pub options: google_protobuf_MethodOptions,
    pub has_client_streaming: bool,
    pub client_streaming: bool,
    pub has_server_streaming: bool,
    pub server_streaming: bool,
}
#[test]
fn bindgen_test_layout__google_protobuf_MethodDescriptorProto() {
    const UNINIT: ::std::mem::MaybeUninit<_google_protobuf_MethodDescriptorProto> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_google_protobuf_MethodDescriptorProto>(),
        160usize,
        concat!(
            "Size of: ",
            stringify!(_google_protobuf_MethodDescriptorProto)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_google_protobuf_MethodDescriptorProto>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_google_protobuf_MethodDescriptorProto)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_MethodDescriptorProto),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).input_type) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_MethodDescriptorProto),
            "::",
            stringify!(input_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).output_type) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_MethodDescriptorProto),
            "::",
            stringify!(output_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_options) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_MethodDescriptorProto),
            "::",
            stringify!(has_options)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).options) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_MethodDescriptorProto),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_client_streaming) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_MethodDescriptorProto),
            "::",
            stringify!(has_client_streaming)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).client_streaming) as usize - ptr as usize },
        153usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_MethodDescriptorProto),
            "::",
            stringify!(client_streaming)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_server_streaming) as usize - ptr as usize },
        154usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_MethodDescriptorProto),
            "::",
            stringify!(has_server_streaming)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).server_streaming) as usize - ptr as usize },
        155usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_MethodDescriptorProto),
            "::",
            stringify!(server_streaming)
        )
    );
}
pub type google_protobuf_MethodDescriptorProto = _google_protobuf_MethodDescriptorProto;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _google_protobuf_FeatureSetDefaults {
    pub defaults: pb_callback_t,
    pub has_minimum_edition: bool,
    pub minimum_edition: google_protobuf_Edition,
    pub has_maximum_edition: bool,
    pub maximum_edition: google_protobuf_Edition,
}
#[test]
fn bindgen_test_layout__google_protobuf_FeatureSetDefaults() {
    const UNINIT: ::std::mem::MaybeUninit<_google_protobuf_FeatureSetDefaults> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_google_protobuf_FeatureSetDefaults>(),
        32usize,
        concat!("Size of: ", stringify!(_google_protobuf_FeatureSetDefaults))
    );
    assert_eq!(
        ::std::mem::align_of::<_google_protobuf_FeatureSetDefaults>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_google_protobuf_FeatureSetDefaults)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).defaults) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FeatureSetDefaults),
            "::",
            stringify!(defaults)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_minimum_edition) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FeatureSetDefaults),
            "::",
            stringify!(has_minimum_edition)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minimum_edition) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FeatureSetDefaults),
            "::",
            stringify!(minimum_edition)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_maximum_edition) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FeatureSetDefaults),
            "::",
            stringify!(has_maximum_edition)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maximum_edition) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FeatureSetDefaults),
            "::",
            stringify!(maximum_edition)
        )
    );
}
pub type google_protobuf_FeatureSetDefaults = _google_protobuf_FeatureSetDefaults;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _google_protobuf_FeatureSetDefaults_FeatureSetEditionDefault {
    pub has_edition: bool,
    pub edition: google_protobuf_Edition,
    pub has_overridable_features: bool,
    pub overridable_features: google_protobuf_FeatureSet,
    pub has_fixed_features: bool,
    pub fixed_features: google_protobuf_FeatureSet,
}
#[test]
fn bindgen_test_layout__google_protobuf_FeatureSetDefaults_FeatureSetEditionDefault() {
    const UNINIT: ::std::mem::MaybeUninit<
        _google_protobuf_FeatureSetDefaults_FeatureSetEditionDefault,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_google_protobuf_FeatureSetDefaults_FeatureSetEditionDefault>(),
        136usize,
        concat!(
            "Size of: ",
            stringify!(_google_protobuf_FeatureSetDefaults_FeatureSetEditionDefault)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_google_protobuf_FeatureSetDefaults_FeatureSetEditionDefault>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_google_protobuf_FeatureSetDefaults_FeatureSetEditionDefault)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_edition) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FeatureSetDefaults_FeatureSetEditionDefault),
            "::",
            stringify!(has_edition)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edition) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FeatureSetDefaults_FeatureSetEditionDefault),
            "::",
            stringify!(edition)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_overridable_features) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FeatureSetDefaults_FeatureSetEditionDefault),
            "::",
            stringify!(has_overridable_features)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overridable_features) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FeatureSetDefaults_FeatureSetEditionDefault),
            "::",
            stringify!(overridable_features)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_fixed_features) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FeatureSetDefaults_FeatureSetEditionDefault),
            "::",
            stringify!(has_fixed_features)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fixed_features) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FeatureSetDefaults_FeatureSetEditionDefault),
            "::",
            stringify!(fixed_features)
        )
    );
}
pub type google_protobuf_FeatureSetDefaults_FeatureSetEditionDefault =
    _google_protobuf_FeatureSetDefaults_FeatureSetEditionDefault;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _google_protobuf_SourceCodeInfo {
    pub location: pb_callback_t,
}
#[test]
fn bindgen_test_layout__google_protobuf_SourceCodeInfo() {
    const UNINIT: ::std::mem::MaybeUninit<_google_protobuf_SourceCodeInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_google_protobuf_SourceCodeInfo>(),
        16usize,
        concat!("Size of: ", stringify!(_google_protobuf_SourceCodeInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_google_protobuf_SourceCodeInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_google_protobuf_SourceCodeInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).location) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_SourceCodeInfo),
            "::",
            stringify!(location)
        )
    );
}
pub type google_protobuf_SourceCodeInfo = _google_protobuf_SourceCodeInfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _google_protobuf_FileDescriptorProto {
    pub name: pb_callback_t,
    pub package: pb_callback_t,
    pub dependency: pb_callback_t,
    pub message_type: pb_callback_t,
    pub enum_type: pb_callback_t,
    pub service: pb_callback_t,
    pub extension: pb_callback_t,
    pub has_options: bool,
    pub options: google_protobuf_FileOptions,
    pub has_source_code_info: bool,
    pub source_code_info: google_protobuf_SourceCodeInfo,
    pub public_dependency: pb_callback_t,
    pub weak_dependency: pb_callback_t,
    pub syntax: pb_callback_t,
    pub has_edition: bool,
    pub edition: google_protobuf_Edition,
}
#[test]
fn bindgen_test_layout__google_protobuf_FileDescriptorProto() {
    const UNINIT: ::std::mem::MaybeUninit<_google_protobuf_FileDescriptorProto> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_google_protobuf_FileDescriptorProto>(),
        480usize,
        concat!(
            "Size of: ",
            stringify!(_google_protobuf_FileDescriptorProto)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_google_protobuf_FileDescriptorProto>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_google_protobuf_FileDescriptorProto)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FileDescriptorProto),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).package) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FileDescriptorProto),
            "::",
            stringify!(package)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dependency) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FileDescriptorProto),
            "::",
            stringify!(dependency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).message_type) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FileDescriptorProto),
            "::",
            stringify!(message_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enum_type) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FileDescriptorProto),
            "::",
            stringify!(enum_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FileDescriptorProto),
            "::",
            stringify!(service)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extension) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FileDescriptorProto),
            "::",
            stringify!(extension)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_options) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FileDescriptorProto),
            "::",
            stringify!(has_options)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).options) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FileDescriptorProto),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_source_code_info) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FileDescriptorProto),
            "::",
            stringify!(has_source_code_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).source_code_info) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FileDescriptorProto),
            "::",
            stringify!(source_code_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).public_dependency) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FileDescriptorProto),
            "::",
            stringify!(public_dependency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).weak_dependency) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FileDescriptorProto),
            "::",
            stringify!(weak_dependency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).syntax) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FileDescriptorProto),
            "::",
            stringify!(syntax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_edition) as usize - ptr as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FileDescriptorProto),
            "::",
            stringify!(has_edition)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edition) as usize - ptr as usize },
        476usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_FileDescriptorProto),
            "::",
            stringify!(edition)
        )
    );
}
pub type google_protobuf_FileDescriptorProto = _google_protobuf_FileDescriptorProto;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _google_protobuf_SourceCodeInfo_Location {
    pub path: pb_callback_t,
    pub span: pb_callback_t,
    pub leading_comments: pb_callback_t,
    pub trailing_comments: pb_callback_t,
    pub leading_detached_comments: pb_callback_t,
}
#[test]
fn bindgen_test_layout__google_protobuf_SourceCodeInfo_Location() {
    const UNINIT: ::std::mem::MaybeUninit<_google_protobuf_SourceCodeInfo_Location> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_google_protobuf_SourceCodeInfo_Location>(),
        80usize,
        concat!(
            "Size of: ",
            stringify!(_google_protobuf_SourceCodeInfo_Location)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_google_protobuf_SourceCodeInfo_Location>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_google_protobuf_SourceCodeInfo_Location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_SourceCodeInfo_Location),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).span) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_SourceCodeInfo_Location),
            "::",
            stringify!(span)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).leading_comments) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_SourceCodeInfo_Location),
            "::",
            stringify!(leading_comments)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trailing_comments) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_SourceCodeInfo_Location),
            "::",
            stringify!(trailing_comments)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).leading_detached_comments) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_SourceCodeInfo_Location),
            "::",
            stringify!(leading_detached_comments)
        )
    );
}
pub type google_protobuf_SourceCodeInfo_Location = _google_protobuf_SourceCodeInfo_Location;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _google_protobuf_GeneratedCodeInfo {
    pub annotation: pb_callback_t,
}
#[test]
fn bindgen_test_layout__google_protobuf_GeneratedCodeInfo() {
    const UNINIT: ::std::mem::MaybeUninit<_google_protobuf_GeneratedCodeInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_google_protobuf_GeneratedCodeInfo>(),
        16usize,
        concat!("Size of: ", stringify!(_google_protobuf_GeneratedCodeInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_google_protobuf_GeneratedCodeInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_google_protobuf_GeneratedCodeInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).annotation) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_GeneratedCodeInfo),
            "::",
            stringify!(annotation)
        )
    );
}
pub type google_protobuf_GeneratedCodeInfo = _google_protobuf_GeneratedCodeInfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _google_protobuf_GeneratedCodeInfo_Annotation {
    pub path: pb_callback_t,
    pub source_file: pb_callback_t,
    pub has_begin: bool,
    pub begin: i32,
    pub has_end: bool,
    pub end: i32,
    pub has_semantic: bool,
    pub semantic: google_protobuf_GeneratedCodeInfo_Annotation_Semantic,
}
#[test]
fn bindgen_test_layout__google_protobuf_GeneratedCodeInfo_Annotation() {
    const UNINIT: ::std::mem::MaybeUninit<_google_protobuf_GeneratedCodeInfo_Annotation> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_google_protobuf_GeneratedCodeInfo_Annotation>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(_google_protobuf_GeneratedCodeInfo_Annotation)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_google_protobuf_GeneratedCodeInfo_Annotation>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_google_protobuf_GeneratedCodeInfo_Annotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_GeneratedCodeInfo_Annotation),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).source_file) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_GeneratedCodeInfo_Annotation),
            "::",
            stringify!(source_file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_begin) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_GeneratedCodeInfo_Annotation),
            "::",
            stringify!(has_begin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).begin) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_GeneratedCodeInfo_Annotation),
            "::",
            stringify!(begin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_end) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_GeneratedCodeInfo_Annotation),
            "::",
            stringify!(has_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_GeneratedCodeInfo_Annotation),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_semantic) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_GeneratedCodeInfo_Annotation),
            "::",
            stringify!(has_semantic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).semantic) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_GeneratedCodeInfo_Annotation),
            "::",
            stringify!(semantic)
        )
    );
}
pub type google_protobuf_GeneratedCodeInfo_Annotation =
    _google_protobuf_GeneratedCodeInfo_Annotation;
extern "C" {
    pub static google_protobuf_FileDescriptorSet_msg: pb_msgdesc_t;
}
extern "C" {
    pub static google_protobuf_FileDescriptorProto_msg: pb_msgdesc_t;
}
extern "C" {
    pub static google_protobuf_DescriptorProto_msg: pb_msgdesc_t;
}
extern "C" {
    pub static google_protobuf_DescriptorProto_ExtensionRange_msg: pb_msgdesc_t;
}
extern "C" {
    pub static google_protobuf_DescriptorProto_ReservedRange_msg: pb_msgdesc_t;
}
extern "C" {
    pub static google_protobuf_ExtensionRangeOptions_msg: pb_msgdesc_t;
}
extern "C" {
    pub static google_protobuf_ExtensionRangeOptions_Declaration_msg: pb_msgdesc_t;
}
extern "C" {
    pub static google_protobuf_FieldDescriptorProto_msg: pb_msgdesc_t;
}
extern "C" {
    pub static google_protobuf_OneofDescriptorProto_msg: pb_msgdesc_t;
}
extern "C" {
    pub static google_protobuf_EnumDescriptorProto_msg: pb_msgdesc_t;
}
extern "C" {
    pub static google_protobuf_EnumDescriptorProto_EnumReservedRange_msg: pb_msgdesc_t;
}
extern "C" {
    pub static google_protobuf_EnumValueDescriptorProto_msg: pb_msgdesc_t;
}
extern "C" {
    pub static google_protobuf_ServiceDescriptorProto_msg: pb_msgdesc_t;
}
extern "C" {
    pub static google_protobuf_MethodDescriptorProto_msg: pb_msgdesc_t;
}
extern "C" {
    pub static google_protobuf_FileOptions_msg: pb_msgdesc_t;
}
extern "C" {
    pub static google_protobuf_MessageOptions_msg: pb_msgdesc_t;
}
extern "C" {
    pub static google_protobuf_FieldOptions_msg: pb_msgdesc_t;
}
extern "C" {
    pub static google_protobuf_FieldOptions_EditionDefault_msg: pb_msgdesc_t;
}
extern "C" {
    pub static google_protobuf_FieldOptions_FeatureSupport_msg: pb_msgdesc_t;
}
extern "C" {
    pub static google_protobuf_OneofOptions_msg: pb_msgdesc_t;
}
extern "C" {
    pub static google_protobuf_EnumOptions_msg: pb_msgdesc_t;
}
extern "C" {
    pub static google_protobuf_EnumValueOptions_msg: pb_msgdesc_t;
}
extern "C" {
    pub static google_protobuf_ServiceOptions_msg: pb_msgdesc_t;
}
extern "C" {
    pub static google_protobuf_MethodOptions_msg: pb_msgdesc_t;
}
extern "C" {
    pub static google_protobuf_UninterpretedOption_msg: pb_msgdesc_t;
}
extern "C" {
    pub static google_protobuf_UninterpretedOption_NamePart_msg: pb_msgdesc_t;
}
extern "C" {
    pub static google_protobuf_FeatureSet_msg: pb_msgdesc_t;
}
extern "C" {
    pub static google_protobuf_FeatureSetDefaults_msg: pb_msgdesc_t;
}
extern "C" {
    pub static google_protobuf_FeatureSetDefaults_FeatureSetEditionDefault_msg: pb_msgdesc_t;
}
extern "C" {
    pub static google_protobuf_SourceCodeInfo_msg: pb_msgdesc_t;
}
extern "C" {
    pub static google_protobuf_SourceCodeInfo_Location_msg: pb_msgdesc_t;
}
extern "C" {
    pub static google_protobuf_GeneratedCodeInfo_msg: pb_msgdesc_t;
}
extern "C" {
    pub static google_protobuf_GeneratedCodeInfo_Annotation_msg: pb_msgdesc_t;
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
