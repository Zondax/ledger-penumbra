/* automatically generated by rust-bindgen 0.69.5 */

pub const PB_FIELD_32BIT: u32 = 1;
pub const __has_safe_buffers: u32 = 0;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_EXTSN: &[u8; 14] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_VERS_1050: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __has_ptrcheck: u32 = 0;
pub const __DARWIN_CLK_TCK: u32 = 100;
pub const MB_LEN_MAX: u32 = 6;
pub const CLK_TCK: u32 = 100;
pub const CHAR_BIT: u32 = 8;
pub const SCHAR_MAX: u32 = 127;
pub const SCHAR_MIN: i32 = -128;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MAX: u32 = 127;
pub const CHAR_MIN: i32 = -128;
pub const USHRT_MAX: u32 = 65535;
pub const SHRT_MAX: u32 = 32767;
pub const SHRT_MIN: i32 = -32768;
pub const UINT_MAX: u32 = 4294967295;
pub const INT_MAX: u32 = 2147483647;
pub const INT_MIN: i32 = -2147483648;
pub const ULONG_MAX: i32 = -1;
pub const LONG_MAX: u64 = 9223372036854775807;
pub const LONG_MIN: i64 = -9223372036854775808;
pub const ULLONG_MAX: i32 = -1;
pub const LLONG_MAX: u64 = 9223372036854775807;
pub const LLONG_MIN: i64 = -9223372036854775808;
pub const LONG_BIT: u32 = 64;
pub const SSIZE_MAX: u64 = 9223372036854775807;
pub const WORD_BIT: u32 = 32;
pub const SIZE_T_MAX: i32 = -1;
pub const UQUAD_MAX: i32 = -1;
pub const QUAD_MAX: u64 = 9223372036854775807;
pub const QUAD_MIN: i64 = -9223372036854775808;
pub const ARG_MAX: u32 = 1048576;
pub const CHILD_MAX: u32 = 266;
pub const GID_MAX: u32 = 2147483647;
pub const LINK_MAX: u32 = 32767;
pub const MAX_CANON: u32 = 1024;
pub const MAX_INPUT: u32 = 1024;
pub const NAME_MAX: u32 = 255;
pub const NGROUPS_MAX: u32 = 16;
pub const UID_MAX: u32 = 2147483647;
pub const OPEN_MAX: u32 = 10240;
pub const PATH_MAX: u32 = 1024;
pub const PIPE_BUF: u32 = 512;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const CHARCLASS_NAME_MAX: u32 = 14;
pub const COLL_WEIGHTS_MAX: u32 = 2;
pub const EQUIV_CLASS_MAX: u32 = 2;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 255;
pub const NZERO: u32 = 20;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_EQUIV_CLASS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_KEYS_MAX: u32 = 512;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_SS_REPL_MAX: u32 = 4;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TRACE_EVENT_NAME_MAX: u32 = 30;
pub const _POSIX_TRACE_NAME_MAX: u32 = 8;
pub const _POSIX_TRACE_SYS_MAX: u32 = 8;
pub const _POSIX_TRACE_USER_EVENT_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const OFF_MIN: i64 = -9223372036854775808;
pub const OFF_MAX: u64 = 9223372036854775807;
pub const PASS_MAX: u32 = 128;
pub const NL_ARGMAX: u32 = 9;
pub const NL_LANGMAX: u32 = 14;
pub const NL_MSGMAX: u32 = 32767;
pub const NL_NMAX: u32 = 1;
pub const NL_SETMAX: u32 = 255;
pub const NL_TEXTMAX: u32 = 2048;
pub const _XOPEN_IOV_MAX: u32 = 16;
pub const IOV_MAX: u32 = 1024;
pub const _XOPEN_NAME_MAX: u32 = 255;
pub const _XOPEN_PATH_MAX: u32 = 1024;
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __WORDSIZE: u32 = 64;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_IOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACCATALYST: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_WATCHOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_TVOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_DRIVERKIT: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_VISIONOS: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_14_5: u32 = 101405;
pub const __MAC_10_14_6: u32 = 101406;
pub const __MAC_10_15: u32 = 101500;
pub const __MAC_10_15_1: u32 = 101501;
pub const __MAC_10_15_4: u32 = 101504;
pub const __MAC_10_16: u32 = 101600;
pub const __MAC_11_0: u32 = 110000;
pub const __MAC_11_1: u32 = 110100;
pub const __MAC_11_3: u32 = 110300;
pub const __MAC_11_4: u32 = 110400;
pub const __MAC_11_5: u32 = 110500;
pub const __MAC_11_6: u32 = 110600;
pub const __MAC_12_0: u32 = 120000;
pub const __MAC_12_1: u32 = 120100;
pub const __MAC_12_2: u32 = 120200;
pub const __MAC_12_3: u32 = 120300;
pub const __MAC_12_4: u32 = 120400;
pub const __MAC_12_5: u32 = 120500;
pub const __MAC_12_6: u32 = 120600;
pub const __MAC_12_7: u32 = 120700;
pub const __MAC_13_0: u32 = 130000;
pub const __MAC_13_1: u32 = 130100;
pub const __MAC_13_2: u32 = 130200;
pub const __MAC_13_3: u32 = 130300;
pub const __MAC_13_4: u32 = 130400;
pub const __MAC_13_5: u32 = 130500;
pub const __MAC_13_6: u32 = 130600;
pub const __MAC_14_0: u32 = 140000;
pub const __MAC_14_1: u32 = 140100;
pub const __MAC_14_2: u32 = 140200;
pub const __MAC_14_3: u32 = 140300;
pub const __MAC_14_4: u32 = 140400;
pub const __MAC_14_5: u32 = 140500;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_12_4: u32 = 120400;
pub const __IPHONE_13_0: u32 = 130000;
pub const __IPHONE_13_1: u32 = 130100;
pub const __IPHONE_13_2: u32 = 130200;
pub const __IPHONE_13_3: u32 = 130300;
pub const __IPHONE_13_4: u32 = 130400;
pub const __IPHONE_13_5: u32 = 130500;
pub const __IPHONE_13_6: u32 = 130600;
pub const __IPHONE_13_7: u32 = 130700;
pub const __IPHONE_14_0: u32 = 140000;
pub const __IPHONE_14_1: u32 = 140100;
pub const __IPHONE_14_2: u32 = 140200;
pub const __IPHONE_14_3: u32 = 140300;
pub const __IPHONE_14_5: u32 = 140500;
pub const __IPHONE_14_4: u32 = 140400;
pub const __IPHONE_14_6: u32 = 140600;
pub const __IPHONE_14_7: u32 = 140700;
pub const __IPHONE_14_8: u32 = 140800;
pub const __IPHONE_15_0: u32 = 150000;
pub const __IPHONE_15_1: u32 = 150100;
pub const __IPHONE_15_2: u32 = 150200;
pub const __IPHONE_15_3: u32 = 150300;
pub const __IPHONE_15_4: u32 = 150400;
pub const __IPHONE_15_5: u32 = 150500;
pub const __IPHONE_15_6: u32 = 150600;
pub const __IPHONE_15_7: u32 = 150700;
pub const __IPHONE_15_8: u32 = 150800;
pub const __IPHONE_16_0: u32 = 160000;
pub const __IPHONE_16_1: u32 = 160100;
pub const __IPHONE_16_2: u32 = 160200;
pub const __IPHONE_16_3: u32 = 160300;
pub const __IPHONE_16_4: u32 = 160400;
pub const __IPHONE_16_5: u32 = 160500;
pub const __IPHONE_16_6: u32 = 160600;
pub const __IPHONE_16_7: u32 = 160700;
pub const __IPHONE_17_0: u32 = 170000;
pub const __IPHONE_17_1: u32 = 170100;
pub const __IPHONE_17_2: u32 = 170200;
pub const __IPHONE_17_3: u32 = 170300;
pub const __IPHONE_17_4: u32 = 170400;
pub const __IPHONE_17_5: u32 = 170500;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_5_3: u32 = 50300;
pub const __WATCHOS_6_0: u32 = 60000;
pub const __WATCHOS_6_1: u32 = 60100;
pub const __WATCHOS_6_2: u32 = 60200;
pub const __WATCHOS_7_0: u32 = 70000;
pub const __WATCHOS_7_1: u32 = 70100;
pub const __WATCHOS_7_2: u32 = 70200;
pub const __WATCHOS_7_3: u32 = 70300;
pub const __WATCHOS_7_4: u32 = 70400;
pub const __WATCHOS_7_5: u32 = 70500;
pub const __WATCHOS_7_6: u32 = 70600;
pub const __WATCHOS_8_0: u32 = 80000;
pub const __WATCHOS_8_1: u32 = 80100;
pub const __WATCHOS_8_3: u32 = 80300;
pub const __WATCHOS_8_4: u32 = 80400;
pub const __WATCHOS_8_5: u32 = 80500;
pub const __WATCHOS_8_6: u32 = 80600;
pub const __WATCHOS_8_7: u32 = 80700;
pub const __WATCHOS_8_8: u32 = 80800;
pub const __WATCHOS_9_0: u32 = 90000;
pub const __WATCHOS_9_1: u32 = 90100;
pub const __WATCHOS_9_2: u32 = 90200;
pub const __WATCHOS_9_3: u32 = 90300;
pub const __WATCHOS_9_4: u32 = 90400;
pub const __WATCHOS_9_5: u32 = 90500;
pub const __WATCHOS_9_6: u32 = 90600;
pub const __WATCHOS_10_0: u32 = 100000;
pub const __WATCHOS_10_1: u32 = 100100;
pub const __WATCHOS_10_2: u32 = 100200;
pub const __WATCHOS_10_3: u32 = 100300;
pub const __WATCHOS_10_4: u32 = 100400;
pub const __WATCHOS_10_5: u32 = 100500;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_12_4: u32 = 120400;
pub const __TVOS_13_0: u32 = 130000;
pub const __TVOS_13_2: u32 = 130200;
pub const __TVOS_13_3: u32 = 130300;
pub const __TVOS_13_4: u32 = 130400;
pub const __TVOS_14_0: u32 = 140000;
pub const __TVOS_14_1: u32 = 140100;
pub const __TVOS_14_2: u32 = 140200;
pub const __TVOS_14_3: u32 = 140300;
pub const __TVOS_14_5: u32 = 140500;
pub const __TVOS_14_6: u32 = 140600;
pub const __TVOS_14_7: u32 = 140700;
pub const __TVOS_15_0: u32 = 150000;
pub const __TVOS_15_1: u32 = 150100;
pub const __TVOS_15_2: u32 = 150200;
pub const __TVOS_15_3: u32 = 150300;
pub const __TVOS_15_4: u32 = 150400;
pub const __TVOS_15_5: u32 = 150500;
pub const __TVOS_15_6: u32 = 150600;
pub const __TVOS_16_0: u32 = 160000;
pub const __TVOS_16_1: u32 = 160100;
pub const __TVOS_16_2: u32 = 160200;
pub const __TVOS_16_3: u32 = 160300;
pub const __TVOS_16_4: u32 = 160400;
pub const __TVOS_16_5: u32 = 160500;
pub const __TVOS_16_6: u32 = 160600;
pub const __TVOS_17_0: u32 = 170000;
pub const __TVOS_17_1: u32 = 170100;
pub const __TVOS_17_2: u32 = 170200;
pub const __TVOS_17_3: u32 = 170300;
pub const __TVOS_17_4: u32 = 170400;
pub const __TVOS_17_5: u32 = 170500;
pub const __BRIDGEOS_2_0: u32 = 20000;
pub const __BRIDGEOS_3_0: u32 = 30000;
pub const __BRIDGEOS_3_1: u32 = 30100;
pub const __BRIDGEOS_3_4: u32 = 30400;
pub const __BRIDGEOS_4_0: u32 = 40000;
pub const __BRIDGEOS_4_1: u32 = 40100;
pub const __BRIDGEOS_5_0: u32 = 50000;
pub const __BRIDGEOS_5_1: u32 = 50100;
pub const __BRIDGEOS_5_3: u32 = 50300;
pub const __BRIDGEOS_6_0: u32 = 60000;
pub const __BRIDGEOS_6_2: u32 = 60200;
pub const __BRIDGEOS_6_4: u32 = 60400;
pub const __BRIDGEOS_6_5: u32 = 60500;
pub const __BRIDGEOS_6_6: u32 = 60600;
pub const __BRIDGEOS_7_0: u32 = 70000;
pub const __BRIDGEOS_7_1: u32 = 70100;
pub const __BRIDGEOS_7_2: u32 = 70200;
pub const __BRIDGEOS_7_3: u32 = 70300;
pub const __BRIDGEOS_7_4: u32 = 70400;
pub const __BRIDGEOS_7_6: u32 = 70600;
pub const __BRIDGEOS_8_0: u32 = 80000;
pub const __BRIDGEOS_8_1: u32 = 80100;
pub const __BRIDGEOS_8_2: u32 = 80200;
pub const __BRIDGEOS_8_3: u32 = 80300;
pub const __BRIDGEOS_8_4: u32 = 80400;
pub const __BRIDGEOS_8_5: u32 = 80500;
pub const __DRIVERKIT_19_0: u32 = 190000;
pub const __DRIVERKIT_20_0: u32 = 200000;
pub const __DRIVERKIT_21_0: u32 = 210000;
pub const __DRIVERKIT_22_0: u32 = 220000;
pub const __DRIVERKIT_22_4: u32 = 220400;
pub const __DRIVERKIT_22_5: u32 = 220500;
pub const __DRIVERKIT_22_6: u32 = 220600;
pub const __DRIVERKIT_23_0: u32 = 230000;
pub const __DRIVERKIT_23_1: u32 = 230100;
pub const __DRIVERKIT_23_2: u32 = 230200;
pub const __DRIVERKIT_23_3: u32 = 230300;
pub const __DRIVERKIT_23_4: u32 = 230400;
pub const __DRIVERKIT_23_5: u32 = 230500;
pub const __VISIONOS_1_0: u32 = 10000;
pub const __VISIONOS_1_1: u32 = 10100;
pub const __VISIONOS_1_2: u32 = 10200;
pub const MAC_OS_X_VERSION_10_0: u32 = 1000;
pub const MAC_OS_X_VERSION_10_1: u32 = 1010;
pub const MAC_OS_X_VERSION_10_2: u32 = 1020;
pub const MAC_OS_X_VERSION_10_3: u32 = 1030;
pub const MAC_OS_X_VERSION_10_4: u32 = 1040;
pub const MAC_OS_X_VERSION_10_5: u32 = 1050;
pub const MAC_OS_X_VERSION_10_6: u32 = 1060;
pub const MAC_OS_X_VERSION_10_7: u32 = 1070;
pub const MAC_OS_X_VERSION_10_8: u32 = 1080;
pub const MAC_OS_X_VERSION_10_9: u32 = 1090;
pub const MAC_OS_X_VERSION_10_10: u32 = 101000;
pub const MAC_OS_X_VERSION_10_10_2: u32 = 101002;
pub const MAC_OS_X_VERSION_10_10_3: u32 = 101003;
pub const MAC_OS_X_VERSION_10_11: u32 = 101100;
pub const MAC_OS_X_VERSION_10_11_2: u32 = 101102;
pub const MAC_OS_X_VERSION_10_11_3: u32 = 101103;
pub const MAC_OS_X_VERSION_10_11_4: u32 = 101104;
pub const MAC_OS_X_VERSION_10_12: u32 = 101200;
pub const MAC_OS_X_VERSION_10_12_1: u32 = 101201;
pub const MAC_OS_X_VERSION_10_12_2: u32 = 101202;
pub const MAC_OS_X_VERSION_10_12_4: u32 = 101204;
pub const MAC_OS_X_VERSION_10_13: u32 = 101300;
pub const MAC_OS_X_VERSION_10_13_1: u32 = 101301;
pub const MAC_OS_X_VERSION_10_13_2: u32 = 101302;
pub const MAC_OS_X_VERSION_10_13_4: u32 = 101304;
pub const MAC_OS_X_VERSION_10_14: u32 = 101400;
pub const MAC_OS_X_VERSION_10_14_1: u32 = 101401;
pub const MAC_OS_X_VERSION_10_14_4: u32 = 101404;
pub const MAC_OS_X_VERSION_10_14_5: u32 = 101405;
pub const MAC_OS_X_VERSION_10_14_6: u32 = 101406;
pub const MAC_OS_X_VERSION_10_15: u32 = 101500;
pub const MAC_OS_X_VERSION_10_15_1: u32 = 101501;
pub const MAC_OS_X_VERSION_10_15_4: u32 = 101504;
pub const MAC_OS_X_VERSION_10_16: u32 = 101600;
pub const MAC_OS_VERSION_11_0: u32 = 110000;
pub const MAC_OS_VERSION_11_1: u32 = 110100;
pub const MAC_OS_VERSION_11_3: u32 = 110300;
pub const MAC_OS_VERSION_11_4: u32 = 110400;
pub const MAC_OS_VERSION_11_5: u32 = 110500;
pub const MAC_OS_VERSION_11_6: u32 = 110600;
pub const MAC_OS_VERSION_12_0: u32 = 120000;
pub const MAC_OS_VERSION_12_1: u32 = 120100;
pub const MAC_OS_VERSION_12_2: u32 = 120200;
pub const MAC_OS_VERSION_12_3: u32 = 120300;
pub const MAC_OS_VERSION_12_4: u32 = 120400;
pub const MAC_OS_VERSION_12_5: u32 = 120500;
pub const MAC_OS_VERSION_12_6: u32 = 120600;
pub const MAC_OS_VERSION_12_7: u32 = 120700;
pub const MAC_OS_VERSION_13_0: u32 = 130000;
pub const MAC_OS_VERSION_13_1: u32 = 130100;
pub const MAC_OS_VERSION_13_2: u32 = 130200;
pub const MAC_OS_VERSION_13_3: u32 = 130300;
pub const MAC_OS_VERSION_13_4: u32 = 130400;
pub const MAC_OS_VERSION_13_5: u32 = 130500;
pub const MAC_OS_VERSION_13_6: u32 = 130600;
pub const MAC_OS_VERSION_14_0: u32 = 140000;
pub const MAC_OS_VERSION_14_1: u32 = 140100;
pub const MAC_OS_VERSION_14_2: u32 = 140200;
pub const MAC_OS_VERSION_14_3: u32 = 140300;
pub const MAC_OS_VERSION_14_4: u32 = 140400;
pub const MAC_OS_VERSION_14_5: u32 = 140500;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 140500;
pub const __ENABLE_LEGACY_MAC_AVAILABILITY: u32 = 1;
pub const _USE_FORTIFY_LEVEL: u32 = 2;
pub const __HAS_FIXED_CHK_PROTOTYPES: u32 = 1;
pub const PB_MAX_REQUIRED_FIELDS: u32 = 64;
pub const PB_LTYPE_BOOL: u32 = 0;
pub const PB_LTYPE_VARINT: u32 = 1;
pub const PB_LTYPE_UVARINT: u32 = 2;
pub const PB_LTYPE_SVARINT: u32 = 3;
pub const PB_LTYPE_FIXED32: u32 = 4;
pub const PB_LTYPE_FIXED64: u32 = 5;
pub const PB_LTYPE_LAST_PACKABLE: u32 = 5;
pub const PB_LTYPE_BYTES: u32 = 6;
pub const PB_LTYPE_STRING: u32 = 7;
pub const PB_LTYPE_SUBMESSAGE: u32 = 8;
pub const PB_LTYPE_SUBMSG_W_CB: u32 = 9;
pub const PB_LTYPE_EXTENSION: u32 = 10;
pub const PB_LTYPE_FIXED_LENGTH_BYTES: u32 = 11;
pub const PB_LTYPES_COUNT: u32 = 12;
pub const PB_LTYPE_MASK: u32 = 15;
pub const PB_HTYPE_REQUIRED: u32 = 0;
pub const PB_HTYPE_OPTIONAL: u32 = 16;
pub const PB_HTYPE_SINGULAR: u32 = 16;
pub const PB_HTYPE_REPEATED: u32 = 32;
pub const PB_HTYPE_FIXARRAY: u32 = 32;
pub const PB_HTYPE_ONEOF: u32 = 48;
pub const PB_HTYPE_MASK: u32 = 48;
pub const PB_ATYPE_STATIC: u32 = 0;
pub const PB_ATYPE_POINTER: u32 = 128;
pub const PB_ATYPE_CALLBACK: u32 = 64;
pub const PB_ATYPE_MASK: u32 = 192;
pub const PB_PROTO_HEADER_VERSION: u32 = 40;
pub const PB_FI_WIDTH_PB_LTYPE_BOOL: u32 = 1;
pub const PB_FI_WIDTH_PB_LTYPE_BYTES: u32 = 2;
pub const PB_FI_WIDTH_PB_LTYPE_DOUBLE: u32 = 1;
pub const PB_FI_WIDTH_PB_LTYPE_ENUM: u32 = 1;
pub const PB_FI_WIDTH_PB_LTYPE_UENUM: u32 = 1;
pub const PB_FI_WIDTH_PB_LTYPE_FIXED32: u32 = 1;
pub const PB_FI_WIDTH_PB_LTYPE_FIXED64: u32 = 1;
pub const PB_FI_WIDTH_PB_LTYPE_FLOAT: u32 = 1;
pub const PB_FI_WIDTH_PB_LTYPE_INT32: u32 = 1;
pub const PB_FI_WIDTH_PB_LTYPE_INT64: u32 = 1;
pub const PB_FI_WIDTH_PB_LTYPE_MESSAGE: u32 = 2;
pub const PB_FI_WIDTH_PB_LTYPE_MSG_W_CB: u32 = 2;
pub const PB_FI_WIDTH_PB_LTYPE_SFIXED32: u32 = 1;
pub const PB_FI_WIDTH_PB_LTYPE_SFIXED64: u32 = 1;
pub const PB_FI_WIDTH_PB_LTYPE_SINT32: u32 = 1;
pub const PB_FI_WIDTH_PB_LTYPE_SINT64: u32 = 1;
pub const PB_FI_WIDTH_PB_LTYPE_STRING: u32 = 2;
pub const PB_FI_WIDTH_PB_LTYPE_UINT32: u32 = 1;
pub const PB_FI_WIDTH_PB_LTYPE_UINT64: u32 = 1;
pub const PB_FI_WIDTH_PB_LTYPE_EXTENSION: u32 = 1;
pub const PB_FI_WIDTH_PB_LTYPE_FIXED_LENGTH_BYTES: u32 = 2;
pub const PB_LTYPE_MAP_BOOL: u32 = 0;
pub const PB_LTYPE_MAP_BYTES: u32 = 6;
pub const PB_LTYPE_MAP_DOUBLE: u32 = 5;
pub const PB_LTYPE_MAP_ENUM: u32 = 1;
pub const PB_LTYPE_MAP_UENUM: u32 = 2;
pub const PB_LTYPE_MAP_FIXED32: u32 = 4;
pub const PB_LTYPE_MAP_FIXED64: u32 = 5;
pub const PB_LTYPE_MAP_FLOAT: u32 = 4;
pub const PB_LTYPE_MAP_INT32: u32 = 1;
pub const PB_LTYPE_MAP_INT64: u32 = 1;
pub const PB_LTYPE_MAP_MESSAGE: u32 = 8;
pub const PB_LTYPE_MAP_MSG_W_CB: u32 = 9;
pub const PB_LTYPE_MAP_SFIXED32: u32 = 4;
pub const PB_LTYPE_MAP_SFIXED64: u32 = 5;
pub const PB_LTYPE_MAP_SINT32: u32 = 3;
pub const PB_LTYPE_MAP_SINT64: u32 = 3;
pub const PB_LTYPE_MAP_STRING: u32 = 7;
pub const PB_LTYPE_MAP_UINT32: u32 = 2;
pub const PB_LTYPE_MAP_UINT64: u32 = 2;
pub const PB_LTYPE_MAP_EXTENSION: u32 = 10;
pub const PB_LTYPE_MAP_FIXED_LENGTH_BYTES: u32 = 11;
pub const google_protobuf_Any_type_url_tag: u32 = 1;
pub const google_protobuf_Any_value_tag: u32 = 2;
pub const penumbra_core_num_v1_Amount_lo_tag: u32 = 1;
pub const penumbra_core_num_v1_Amount_hi_tag: u32 = 2;
pub const penumbra_core_num_v1_Amount_size: u32 = 22;
pub const penumbra_core_asset_v1_BalanceCommitment_inner_tag: u32 = 1;
pub const penumbra_core_asset_v1_AssetId_inner_tag: u32 = 1;
pub const penumbra_core_asset_v1_AssetId_alt_bech32m_tag: u32 = 2;
pub const penumbra_core_asset_v1_AssetId_alt_base_denom_tag: u32 = 3;
pub const penumbra_core_asset_v1_Denom_denom_tag: u32 = 1;
pub const penumbra_core_asset_v1_Metadata_description_tag: u32 = 1;
pub const penumbra_core_asset_v1_Metadata_denom_units_tag: u32 = 2;
pub const penumbra_core_asset_v1_Metadata_base_tag: u32 = 3;
pub const penumbra_core_asset_v1_Metadata_display_tag: u32 = 4;
pub const penumbra_core_asset_v1_Metadata_name_tag: u32 = 5;
pub const penumbra_core_asset_v1_Metadata_symbol_tag: u32 = 6;
pub const penumbra_core_asset_v1_Metadata_penumbra_asset_id_tag: u32 = 1984;
pub const penumbra_core_asset_v1_Metadata_images_tag: u32 = 1985;
pub const penumbra_core_asset_v1_Metadata_priority_score_tag: u32 = 1986;
pub const penumbra_core_asset_v1_DenomUnit_denom_tag: u32 = 1;
pub const penumbra_core_asset_v1_DenomUnit_exponent_tag: u32 = 2;
pub const penumbra_core_asset_v1_DenomUnit_aliases_tag: u32 = 3;
pub const penumbra_core_asset_v1_Value_amount_tag: u32 = 1;
pub const penumbra_core_asset_v1_Value_asset_id_tag: u32 = 2;
pub const penumbra_core_asset_v1_ValueView_KnownAssetId_amount_tag: u32 = 1;
pub const penumbra_core_asset_v1_ValueView_KnownAssetId_metadata_tag: u32 = 2;
pub const penumbra_core_asset_v1_ValueView_KnownAssetId_equivalent_values_tag: u32 = 3;
pub const penumbra_core_asset_v1_ValueView_KnownAssetId_extended_metadata_tag: u32 = 4;
pub const penumbra_core_asset_v1_ValueView_UnknownAssetId_amount_tag: u32 = 1;
pub const penumbra_core_asset_v1_ValueView_UnknownAssetId_asset_id_tag: u32 = 2;
pub const penumbra_core_asset_v1_ValueView_known_asset_id_tag: u32 = 1;
pub const penumbra_core_asset_v1_ValueView_unknown_asset_id_tag: u32 = 2;
pub const penumbra_core_asset_v1_AssetImage_Theme_primary_color_hex_tag: u32 = 1;
pub const penumbra_core_asset_v1_AssetImage_Theme_circle_tag: u32 = 2;
pub const penumbra_core_asset_v1_AssetImage_Theme_dark_mode_tag: u32 = 3;
pub const penumbra_core_asset_v1_AssetImage_png_tag: u32 = 1;
pub const penumbra_core_asset_v1_AssetImage_svg_tag: u32 = 2;
pub const penumbra_core_asset_v1_AssetImage_theme_tag: u32 = 3;
pub const penumbra_core_asset_v1_EstimatedPrice_priced_asset_tag: u32 = 1;
pub const penumbra_core_asset_v1_EstimatedPrice_numeraire_tag: u32 = 2;
pub const penumbra_core_asset_v1_EstimatedPrice_numeraire_per_unit_tag: u32 = 3;
pub const penumbra_core_asset_v1_EstimatedPrice_as_of_height_tag: u32 = 4;
pub const penumbra_core_asset_v1_EquivalentValue_equivalent_amount_tag: u32 = 1;
pub const penumbra_core_asset_v1_EquivalentValue_numeraire_tag: u32 = 2;
pub const penumbra_core_asset_v1_EquivalentValue_as_of_height_tag: u32 = 3;
pub const google_protobuf_Timestamp_seconds_tag: u32 = 1;
pub const google_protobuf_Timestamp_nanos_tag: u32 = 2;
pub const google_protobuf_Timestamp_size: u32 = 22;
pub const penumbra_crypto_tct_v1_StateCommitment_inner_tag: u32 = 1;
pub const penumbra_crypto_tct_v1_MerkleRoot_inner_tag: u32 = 1;
pub const penumbra_crypto_tct_v1_StateCommitmentProof_note_commitment_tag: u32 = 1;
pub const penumbra_crypto_tct_v1_StateCommitmentProof_position_tag: u32 = 2;
pub const penumbra_crypto_tct_v1_StateCommitmentProof_auth_path_tag: u32 = 3;
pub const penumbra_crypto_tct_v1_MerklePathChunk_sibling_1_tag: u32 = 1;
pub const penumbra_crypto_tct_v1_MerklePathChunk_sibling_2_tag: u32 = 2;
pub const penumbra_crypto_tct_v1_MerklePathChunk_sibling_3_tag: u32 = 3;
pub const penumbra_core_component_sct_v1_SctParameters_epoch_duration_tag: u32 = 1;
pub const penumbra_core_component_sct_v1_GenesisContent_sct_params_tag: u32 = 1;
pub const penumbra_core_component_sct_v1_Epoch_index_tag: u32 = 1;
pub const penumbra_core_component_sct_v1_Epoch_start_height_tag: u32 = 2;
pub const penumbra_core_component_sct_v1_CommitmentSource_Transaction_id_tag: u32 = 1;
pub const penumbra_core_component_sct_v1_CommitmentSource_FundingStreamReward_epoch_index_tag: u32 =
    1;
pub const penumbra_core_component_sct_v1_CommitmentSource_Ics20Transfer_packet_seq_tag: u32 = 1;
pub const penumbra_core_component_sct_v1_CommitmentSource_Ics20Transfer_channel_id_tag: u32 = 2;
pub const penumbra_core_component_sct_v1_CommitmentSource_Ics20Transfer_sender_tag: u32 = 3;
pub const penumbra_core_component_sct_v1_CommitmentSource_transaction_tag: u32 = 1;
pub const penumbra_core_component_sct_v1_CommitmentSource_ics_20_transfer_tag: u32 = 2;
pub const penumbra_core_component_sct_v1_CommitmentSource_funding_stream_reward_tag: u32 = 20;
pub const penumbra_core_component_sct_v1_CommitmentSource_community_pool_output_tag: u32 = 30;
pub const penumbra_core_component_sct_v1_CommitmentSource_genesis_tag: u32 = 40;
pub const penumbra_core_component_sct_v1_Nullifier_inner_tag: u32 = 1;
pub const penumbra_core_component_sct_v1_NullificationInfo_id_tag: u32 = 1;
pub const penumbra_core_component_sct_v1_NullificationInfo_spend_height_tag: u32 = 2;
pub const penumbra_core_component_sct_v1_EventCommitment_commitment_tag: u32 = 1;
pub const penumbra_core_component_sct_v1_EventCommitment_position_tag: u32 = 2;
pub const penumbra_core_component_sct_v1_EventCommitment_source_tag: u32 = 3;
pub const penumbra_core_component_sct_v1_EventAnchor_anchor_tag: u32 = 1;
pub const penumbra_core_component_sct_v1_EventAnchor_height_tag: u32 = 2;
pub const penumbra_core_component_sct_v1_EventAnchor_timestamp_tag: u32 = 3;
pub const penumbra_core_component_sct_v1_EventEpochRoot_root_tag: u32 = 1;
pub const penumbra_core_component_sct_v1_EventEpochRoot_index_tag: u32 = 2;
pub const penumbra_core_component_sct_v1_EventEpochRoot_timestamp_tag: u32 = 3;
pub const penumbra_core_component_sct_v1_EventBlockRoot_root_tag: u32 = 1;
pub const penumbra_core_component_sct_v1_EventBlockRoot_height_tag: u32 = 2;
pub const penumbra_core_component_sct_v1_EventBlockRoot_timestamp_tag: u32 = 3;
pub const penumbra_core_component_sct_v1_EpochByHeightRequest_height_tag: u32 = 1;
pub const penumbra_core_component_sct_v1_EpochByHeightResponse_epoch_tag: u32 = 1;
pub const penumbra_core_component_sct_v1_AnchorByHeightRequest_height_tag: u32 = 1;
pub const penumbra_core_component_sct_v1_AnchorByHeightResponse_anchor_tag: u32 = 1;
pub const penumbra_core_component_sct_v1_TimestampByHeightRequest_height_tag: u32 = 1;
pub const penumbra_core_component_sct_v1_TimestampByHeightResponse_timestamp_tag: u32 = 1;
pub const penumbra_core_component_sct_v1_AnchorByHeightRequest_size: u32 = 11;
pub const penumbra_core_component_sct_v1_CommitmentSource_CommunityPoolOutput_size: u32 = 0;
pub const penumbra_core_component_sct_v1_CommitmentSource_FundingStreamReward_size: u32 = 11;
pub const penumbra_core_component_sct_v1_CommitmentSource_Genesis_size: u32 = 0;
pub const penumbra_core_component_sct_v1_EpochByHeightRequest_size: u32 = 11;
pub const penumbra_core_component_sct_v1_EpochByHeightResponse_size: u32 = 24;
pub const penumbra_core_component_sct_v1_Epoch_size: u32 = 22;
pub const penumbra_core_component_sct_v1_GenesisContent_size: u32 = 13;
pub const penumbra_core_component_sct_v1_SctParameters_size: u32 = 11;
pub const penumbra_core_component_sct_v1_TimestampByHeightRequest_size: u32 = 11;
pub const penumbra_core_component_sct_v1_TimestampByHeightResponse_size: u32 = 24;
pub const penumbra_core_keys_v1_Address_inner_tag: u32 = 1;
pub const penumbra_core_keys_v1_Address_alt_bech32m_tag: u32 = 2;
pub const penumbra_core_keys_v1_AddressView_Opaque_address_tag: u32 = 1;
pub const penumbra_core_keys_v1_PayloadKey_inner_tag: u32 = 1;
pub const penumbra_core_keys_v1_SpendKey_inner_tag: u32 = 1;
pub const penumbra_core_keys_v1_FullViewingKey_inner_tag: u32 = 1;
pub const penumbra_core_keys_v1_WalletId_inner_tag: u32 = 1;
pub const penumbra_core_keys_v1_Diversifier_inner_tag: u32 = 1;
pub const penumbra_core_keys_v1_AddressIndex_account_tag: u32 = 2;
pub const penumbra_core_keys_v1_AddressIndex_randomizer_tag: u32 = 3;
pub const penumbra_core_keys_v1_AddressView_Decoded_address_tag: u32 = 1;
pub const penumbra_core_keys_v1_AddressView_Decoded_index_tag: u32 = 2;
pub const penumbra_core_keys_v1_AddressView_Decoded_wallet_id_tag: u32 = 3;
pub const penumbra_core_keys_v1_AddressView_decoded_tag: u32 = 1;
pub const penumbra_core_keys_v1_AddressView_opaque_tag: u32 = 2;
pub const penumbra_core_keys_v1_IdentityKey_ik_tag: u32 = 1;
pub const penumbra_core_keys_v1_GovernanceKey_gk_tag: u32 = 1;
pub const penumbra_core_keys_v1_ConsensusKey_inner_tag: u32 = 1;
pub const penumbra_core_component_stake_v1_ZKUndelegateClaimProof_inner_tag: u32 = 1;
pub const penumbra_core_component_stake_v1_Validator_identity_key_tag: u32 = 1;
pub const penumbra_core_component_stake_v1_Validator_consensus_key_tag: u32 = 2;
pub const penumbra_core_component_stake_v1_Validator_name_tag: u32 = 3;
pub const penumbra_core_component_stake_v1_Validator_website_tag: u32 = 4;
pub const penumbra_core_component_stake_v1_Validator_description_tag: u32 = 5;
pub const penumbra_core_component_stake_v1_Validator_funding_streams_tag: u32 = 6;
pub const penumbra_core_component_stake_v1_Validator_sequence_number_tag: u32 = 7;
pub const penumbra_core_component_stake_v1_Validator_enabled_tag: u32 = 8;
pub const penumbra_core_component_stake_v1_Validator_governance_key_tag: u32 = 9;
pub const penumbra_core_component_stake_v1_ValidatorList_validator_keys_tag: u32 = 1;
pub const penumbra_core_component_stake_v1_FundingStream_ToAddress_address_tag: u32 = 1;
pub const penumbra_core_component_stake_v1_FundingStream_ToAddress_rate_bps_tag: u32 = 2;
pub const penumbra_core_component_stake_v1_FundingStream_ToCommunityPool_rate_bps_tag: u32 = 2;
pub const penumbra_core_component_stake_v1_FundingStream_to_address_tag: u32 = 1;
pub const penumbra_core_component_stake_v1_FundingStream_to_community_pool_tag: u32 = 2;
pub const penumbra_core_component_stake_v1_RateData_identity_key_tag: u32 = 1;
pub const penumbra_core_component_stake_v1_RateData_epoch_index_tag: u32 = 2;
pub const penumbra_core_component_stake_v1_RateData_validator_reward_rate_tag: u32 = 4;
pub const penumbra_core_component_stake_v1_RateData_validator_exchange_rate_tag: u32 = 5;
pub const penumbra_core_component_stake_v1_BaseRateData_epoch_index_tag: u32 = 1;
pub const penumbra_core_component_stake_v1_BaseRateData_base_reward_rate_tag: u32 = 2;
pub const penumbra_core_component_stake_v1_BaseRateData_base_exchange_rate_tag: u32 = 3;
pub const penumbra_core_component_stake_v1_BondingState_state_tag: u32 = 1;
pub const penumbra_core_component_stake_v1_BondingState_unbonds_at_epoch_tag: u32 = 2;
pub const penumbra_core_component_stake_v1_BondingState_unbonds_at_height_tag: u32 = 3;
pub const penumbra_core_component_stake_v1_ValidatorState_state_tag: u32 = 1;
pub const penumbra_core_component_stake_v1_ValidatorStatus_identity_key_tag: u32 = 1;
pub const penumbra_core_component_stake_v1_ValidatorStatus_state_tag: u32 = 2;
pub const penumbra_core_component_stake_v1_ValidatorStatus_voting_power_tag: u32 = 3;
pub const penumbra_core_component_stake_v1_ValidatorStatus_bonding_state_tag: u32 = 4;
pub const penumbra_core_component_stake_v1_ValidatorInfo_validator_tag: u32 = 1;
pub const penumbra_core_component_stake_v1_ValidatorInfo_status_tag: u32 = 2;
pub const penumbra_core_component_stake_v1_ValidatorInfo_rate_data_tag: u32 = 3;
pub const penumbra_core_component_stake_v1_ValidatorDefinition_validator_tag: u32 = 1;
pub const penumbra_core_component_stake_v1_ValidatorDefinition_auth_sig_tag: u32 = 2;
pub const penumbra_core_component_stake_v1_Delegate_validator_identity_tag: u32 = 1;
pub const penumbra_core_component_stake_v1_Delegate_epoch_index_tag: u32 = 2;
pub const penumbra_core_component_stake_v1_Delegate_unbonded_amount_tag: u32 = 3;
pub const penumbra_core_component_stake_v1_Delegate_delegation_amount_tag: u32 = 4;
pub const penumbra_core_component_stake_v1_Undelegate_validator_identity_tag: u32 = 1;
pub const penumbra_core_component_stake_v1_Undelegate_start_epoch_index_tag: u32 = 2;
pub const penumbra_core_component_stake_v1_Undelegate_unbonded_amount_tag: u32 = 3;
pub const penumbra_core_component_stake_v1_Undelegate_delegation_amount_tag: u32 = 4;
pub const penumbra_core_component_stake_v1_Undelegate_from_epoch_tag: u32 = 5;
pub const penumbra_core_component_stake_v1_DelegationChanges_delegations_tag: u32 = 1;
pub const penumbra_core_component_stake_v1_DelegationChanges_undelegations_tag: u32 = 2;
pub const penumbra_core_component_stake_v1_Uptime_as_of_block_height_tag: u32 = 1;
pub const penumbra_core_component_stake_v1_Uptime_window_len_tag: u32 = 2;
pub const penumbra_core_component_stake_v1_Uptime_bitvec_tag: u32 = 3;
pub const penumbra_core_component_stake_v1_CurrentConsensusKeys_consensus_keys_tag: u32 = 1;
pub const penumbra_core_component_stake_v1_Penalty_inner_tag: u32 = 1;
pub const penumbra_core_component_stake_v1_UndelegateClaimBody_validator_identity_tag: u32 = 1;
pub const penumbra_core_component_stake_v1_UndelegateClaimBody_start_epoch_index_tag: u32 = 2;
pub const penumbra_core_component_stake_v1_UndelegateClaimBody_penalty_tag: u32 = 3;
pub const penumbra_core_component_stake_v1_UndelegateClaimBody_balance_commitment_tag: u32 = 4;
pub const penumbra_core_component_stake_v1_UndelegateClaimBody_unbonding_start_height_tag: u32 = 5;
pub const penumbra_core_component_stake_v1_UndelegateClaim_body_tag: u32 = 1;
pub const penumbra_core_component_stake_v1_UndelegateClaim_proof_tag: u32 = 2;
pub const penumbra_core_component_stake_v1_UndelegateClaimPlan_validator_identity_tag: u32 = 1;
pub const penumbra_core_component_stake_v1_UndelegateClaimPlan_start_epoch_index_tag: u32 = 2;
pub const penumbra_core_component_stake_v1_UndelegateClaimPlan_penalty_tag: u32 = 4;
pub const penumbra_core_component_stake_v1_UndelegateClaimPlan_unbonding_amount_tag: u32 = 5;
pub const penumbra_core_component_stake_v1_UndelegateClaimPlan_balance_blinding_tag: u32 = 6;
pub const penumbra_core_component_stake_v1_UndelegateClaimPlan_proof_blinding_r_tag: u32 = 7;
pub const penumbra_core_component_stake_v1_UndelegateClaimPlan_proof_blinding_s_tag: u32 = 8;
pub const penumbra_core_component_stake_v1_UndelegateClaimPlan_unbonding_start_height_tag: u32 = 9;
pub const penumbra_core_component_stake_v1_GetValidatorInfoRequest_identity_key_tag: u32 = 2;
pub const penumbra_core_component_stake_v1_GetValidatorInfoResponse_validator_info_tag: u32 = 1;
pub const penumbra_core_component_stake_v1_ValidatorInfoRequest_show_inactive_tag: u32 = 2;
pub const penumbra_core_component_stake_v1_ValidatorInfoResponse_validator_info_tag: u32 = 1;
pub const penumbra_core_component_stake_v1_ValidatorStatusRequest_identity_key_tag: u32 = 2;
pub const penumbra_core_component_stake_v1_ValidatorStatusResponse_status_tag: u32 = 1;
pub const penumbra_core_component_stake_v1_ValidatorPenaltyRequest_identity_key_tag: u32 = 2;
pub const penumbra_core_component_stake_v1_ValidatorPenaltyRequest_start_epoch_index_tag: u32 = 3;
pub const penumbra_core_component_stake_v1_ValidatorPenaltyRequest_end_epoch_index_tag: u32 = 4;
pub const penumbra_core_component_stake_v1_ValidatorPenaltyResponse_penalty_tag: u32 = 1;
pub const penumbra_core_component_stake_v1_CurrentValidatorRateRequest_identity_key_tag: u32 = 2;
pub const penumbra_core_component_stake_v1_CurrentValidatorRateResponse_data_tag: u32 = 1;
pub const penumbra_core_component_stake_v1_ValidatorUptimeRequest_identity_key_tag: u32 = 2;
pub const penumbra_core_component_stake_v1_ValidatorUptimeResponse_uptime_tag: u32 = 1;
pub const penumbra_core_component_stake_v1_StakeParameters_unbonding_epochs_tag: u32 = 1;
pub const penumbra_core_component_stake_v1_StakeParameters_active_validator_limit_tag: u32 = 2;
pub const penumbra_core_component_stake_v1_StakeParameters_base_reward_rate_tag: u32 = 3;
pub const penumbra_core_component_stake_v1_StakeParameters_slashing_penalty_misbehavior_tag: u32 =
    4;
pub const penumbra_core_component_stake_v1_StakeParameters_slashing_penalty_downtime_tag: u32 = 5;
pub const penumbra_core_component_stake_v1_StakeParameters_signed_blocks_window_len_tag: u32 = 6;
pub const penumbra_core_component_stake_v1_StakeParameters_missed_blocks_maximum_tag: u32 = 7;
pub const penumbra_core_component_stake_v1_StakeParameters_min_validator_stake_tag: u32 = 8;
pub const penumbra_core_component_stake_v1_StakeParameters_unbonding_delay_tag: u32 = 9;
pub const penumbra_core_component_stake_v1_GenesisContent_stake_params_tag: u32 = 1;
pub const penumbra_core_component_stake_v1_GenesisContent_validators_tag: u32 = 2;
pub const penumbra_core_component_stake_v1_EventTombstoneValidator_evidence_height_tag: u32 = 1;
pub const penumbra_core_component_stake_v1_EventTombstoneValidator_current_height_tag: u32 = 2;
pub const penumbra_core_component_stake_v1_EventTombstoneValidator_identity_key_tag: u32 = 4;
pub const penumbra_core_component_stake_v1_EventTombstoneValidator_address_tag: u32 = 5;
pub const penumbra_core_component_stake_v1_EventTombstoneValidator_voting_power_tag: u32 = 6;
pub const penumbra_core_component_stake_v1_EventValidatorStateChange_identity_key_tag: u32 = 1;
pub const penumbra_core_component_stake_v1_EventValidatorStateChange_state_tag: u32 = 2;
pub const penumbra_core_component_stake_v1_EventValidatorVotingPowerChange_identity_key_tag: u32 =
    1;
pub const penumbra_core_component_stake_v1_EventValidatorVotingPowerChange_voting_power_tag: u32 =
    2;
pub const penumbra_core_component_stake_v1_EventValidatorBondingStateChange_identity_key_tag: u32 =
    1;
pub const penumbra_core_component_stake_v1_EventValidatorBondingStateChange_bonding_state_tag: u32 =
    2;
pub const penumbra_core_component_stake_v1_EventRateDataChange_identity_key_tag: u32 = 1;
pub const penumbra_core_component_stake_v1_EventRateDataChange_rate_data_tag: u32 = 2;
pub const penumbra_core_component_stake_v1_EventValidatorDefinitionUpload_validator_tag: u32 = 1;
pub const penumbra_core_component_stake_v1_EventValidatorMissedBlock_identity_key_tag: u32 = 1;
pub const penumbra_core_component_stake_v1_EventDelegate_identity_key_tag: u32 = 1;
pub const penumbra_core_component_stake_v1_EventDelegate_amount_tag: u32 = 3;
pub const penumbra_core_component_stake_v1_EventUndelegate_identity_key_tag: u32 = 1;
pub const penumbra_core_component_stake_v1_EventUndelegate_amount_tag: u32 = 3;
pub const penumbra_core_component_stake_v1_EventSlashingPenaltyApplied_identity_key_tag: u32 = 1;
pub const penumbra_core_component_stake_v1_EventSlashingPenaltyApplied_epoch_index_tag: u32 = 2;
pub const penumbra_core_component_stake_v1_EventSlashingPenaltyApplied_new_penalty_tag: u32 = 3;
pub const penumbra_core_component_stake_v1_BaseRateData_size: u32 = 59;
pub const penumbra_core_component_stake_v1_BondingState_size: u32 = 24;
pub const penumbra_core_component_stake_v1_FundingStream_ToCommunityPool_size: u32 = 6;
pub const penumbra_core_component_stake_v1_StakeParameters_size: u32 = 112;
pub const penumbra_core_component_stake_v1_ValidatorInfoRequest_size: u32 = 2;
pub const penumbra_core_component_stake_v1_ValidatorState_size: u32 = 2;
pub type rsize_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
pub type max_align_t = f64;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__mbstate8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__mbstate8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mbstateL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(_mbstateL)
        )
    );
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_pthread_handler_rec> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_pthread_handler_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__routine) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__arg) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_attr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_cond_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_condattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_condattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_condattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_mutex_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_mutexattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutexattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutexattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_once_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_once_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_once_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_rwlock_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlock_t>(),
        200usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_rwlockattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlockattr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cleanup_stack) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__cleanup_stack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__opaque)
        )
    );
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __b: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strncat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strxfrm(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtok_r(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
        __lasts: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __strerrbuf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strdup(__s1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memccpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn stpcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __s1: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnlen(__s1: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
pub type errno_t = ::std::os::raw::c_int;
extern "C" {
    pub fn memset_s(
        __s: *mut ::std::os::raw::c_void,
        __smax: rsize_t,
        __c: ::std::os::raw::c_int,
        __n: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn memmem(
        __big: *const ::std::os::raw::c_void,
        __big_len: usize,
        __little: *const ::std::os::raw::c_void,
        __little_len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset_pattern4(
        __b: *mut ::std::os::raw::c_void,
        __pattern4: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn memset_pattern8(
        __b: *mut ::std::os::raw::c_void,
        __pattern8: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn memset_pattern16(
        __b: *mut ::std::os::raw::c_void,
        __pattern16: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn strcasestr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlcat(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strlcpy(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strmode(__mode: ::std::os::raw::c_int, __bp: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn swab(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: isize,
    );
}
extern "C" {
    pub fn timingsafe_bcmp(
        __b1: *const ::std::os::raw::c_void,
        __b2: *const ::std::os::raw::c_void,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strsignal_r(
        __sig: ::std::os::raw::c_int,
        __strsignalbuf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcmp(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    );
}
extern "C" {
    pub fn bzero(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fls(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
pub type pb_type_t = uint_least8_t;
pub type pb_size_t = u32;
pub type pb_ssize_t = i32;
pub type pb_byte_t = uint_least8_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pb_istream_s {
    _unused: [u8; 0],
}
pub type pb_istream_t = pb_istream_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pb_ostream_s {
    _unused: [u8; 0],
}
pub type pb_ostream_t = pb_ostream_s;
pub type pb_field_iter_t = pb_field_iter_s;
pub type pb_msgdesc_t = pb_msgdesc_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pb_msgdesc_s {
    pub field_info: *const u32,
    pub submsg_info: *const *const pb_msgdesc_t,
    pub default_value: *const pb_byte_t,
    pub field_callback: ::std::option::Option<
        unsafe extern "C" fn(
            istream: *mut pb_istream_t,
            ostream: *mut pb_ostream_t,
            field: *const pb_field_iter_t,
        ) -> bool,
    >,
    pub field_count: pb_size_t,
    pub required_field_count: pb_size_t,
    pub largest_tag: pb_size_t,
}
#[test]
fn bindgen_test_layout_pb_msgdesc_s() {
    const UNINIT: ::std::mem::MaybeUninit<pb_msgdesc_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pb_msgdesc_s>(),
        48usize,
        concat!("Size of: ", stringify!(pb_msgdesc_s))
    );
    assert_eq!(
        ::std::mem::align_of::<pb_msgdesc_s>(),
        8usize,
        concat!("Alignment of ", stringify!(pb_msgdesc_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field_info) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_msgdesc_s),
            "::",
            stringify!(field_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).submsg_info) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_msgdesc_s),
            "::",
            stringify!(submsg_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).default_value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_msgdesc_s),
            "::",
            stringify!(default_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field_callback) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_msgdesc_s),
            "::",
            stringify!(field_callback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field_count) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_msgdesc_s),
            "::",
            stringify!(field_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).required_field_count) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_msgdesc_s),
            "::",
            stringify!(required_field_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).largest_tag) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_msgdesc_s),
            "::",
            stringify!(largest_tag)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pb_field_iter_s {
    pub descriptor: *const pb_msgdesc_t,
    pub message: *mut ::std::os::raw::c_void,
    pub index: pb_size_t,
    pub field_info_index: pb_size_t,
    pub required_field_index: pb_size_t,
    pub submessage_index: pb_size_t,
    pub tag: pb_size_t,
    pub data_size: pb_size_t,
    pub array_size: pb_size_t,
    pub type_: pb_type_t,
    pub pField: *mut ::std::os::raw::c_void,
    pub pData: *mut ::std::os::raw::c_void,
    pub pSize: *mut ::std::os::raw::c_void,
    pub submsg_desc: *const pb_msgdesc_t,
}
#[test]
fn bindgen_test_layout_pb_field_iter_s() {
    const UNINIT: ::std::mem::MaybeUninit<pb_field_iter_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pb_field_iter_s>(),
        80usize,
        concat!("Size of: ", stringify!(pb_field_iter_s))
    );
    assert_eq!(
        ::std::mem::align_of::<pb_field_iter_s>(),
        8usize,
        concat!("Alignment of ", stringify!(pb_field_iter_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).descriptor) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_field_iter_s),
            "::",
            stringify!(descriptor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).message) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_field_iter_s),
            "::",
            stringify!(message)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_field_iter_s),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field_info_index) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_field_iter_s),
            "::",
            stringify!(field_info_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).required_field_index) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_field_iter_s),
            "::",
            stringify!(required_field_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).submessage_index) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_field_iter_s),
            "::",
            stringify!(submessage_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tag) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_field_iter_s),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_size) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_field_iter_s),
            "::",
            stringify!(data_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).array_size) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_field_iter_s),
            "::",
            stringify!(array_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_field_iter_s),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pField) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_field_iter_s),
            "::",
            stringify!(pField)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pData) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_field_iter_s),
            "::",
            stringify!(pData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSize) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_field_iter_s),
            "::",
            stringify!(pSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).submsg_desc) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_field_iter_s),
            "::",
            stringify!(submsg_desc)
        )
    );
}
pub type pb_field_t = pb_field_iter_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pb_bytes_array_s {
    pub size: pb_size_t,
    pub bytes: [pb_byte_t; 1usize],
}
#[test]
fn bindgen_test_layout_pb_bytes_array_s() {
    const UNINIT: ::std::mem::MaybeUninit<pb_bytes_array_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pb_bytes_array_s>(),
        8usize,
        concat!("Size of: ", stringify!(pb_bytes_array_s))
    );
    assert_eq!(
        ::std::mem::align_of::<pb_bytes_array_s>(),
        4usize,
        concat!("Alignment of ", stringify!(pb_bytes_array_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_bytes_array_s),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytes) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_bytes_array_s),
            "::",
            stringify!(bytes)
        )
    );
}
pub type pb_bytes_array_t = pb_bytes_array_s;
pub type pb_callback_t = pb_callback_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pb_callback_s {
    pub funcs: pb_callback_s__bindgen_ty_1,
    pub arg: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pb_callback_s__bindgen_ty_1 {
    pub decode: ::std::option::Option<
        unsafe extern "C" fn(
            stream: *mut pb_istream_t,
            field: *const pb_field_t,
            arg: *mut *mut ::std::os::raw::c_void,
        ) -> bool,
    >,
    pub encode: ::std::option::Option<
        unsafe extern "C" fn(
            stream: *mut pb_ostream_t,
            field: *const pb_field_t,
            arg: *const *mut ::std::os::raw::c_void,
        ) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_pb_callback_s__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<pb_callback_s__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pb_callback_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(pb_callback_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pb_callback_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(pb_callback_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_callback_s__bindgen_ty_1),
            "::",
            stringify!(decode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_callback_s__bindgen_ty_1),
            "::",
            stringify!(encode)
        )
    );
}
#[test]
fn bindgen_test_layout_pb_callback_s() {
    const UNINIT: ::std::mem::MaybeUninit<pb_callback_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pb_callback_s>(),
        16usize,
        concat!("Size of: ", stringify!(pb_callback_s))
    );
    assert_eq!(
        ::std::mem::align_of::<pb_callback_s>(),
        8usize,
        concat!("Alignment of ", stringify!(pb_callback_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).funcs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_callback_s),
            "::",
            stringify!(funcs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_callback_s),
            "::",
            stringify!(arg)
        )
    );
}
extern "C" {
    pub fn pb_default_field_callback(
        istream: *mut pb_istream_t,
        ostream: *mut pb_ostream_t,
        field: *const pb_field_t,
    ) -> bool;
}
pub const pb_wire_type_t_PB_WT_VARINT: pb_wire_type_t = 0;
pub const pb_wire_type_t_PB_WT_64BIT: pb_wire_type_t = 1;
pub const pb_wire_type_t_PB_WT_STRING: pb_wire_type_t = 2;
pub const pb_wire_type_t_PB_WT_32BIT: pb_wire_type_t = 5;
pub type pb_wire_type_t = ::std::os::raw::c_uint;
pub type pb_extension_type_t = pb_extension_type_s;
pub type pb_extension_t = pb_extension_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pb_extension_type_s {
    pub decode: ::std::option::Option<
        unsafe extern "C" fn(
            stream: *mut pb_istream_t,
            extension: *mut pb_extension_t,
            tag: u32,
            wire_type: pb_wire_type_t,
        ) -> bool,
    >,
    pub encode: ::std::option::Option<
        unsafe extern "C" fn(stream: *mut pb_ostream_t, extension: *const pb_extension_t) -> bool,
    >,
    pub arg: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_pb_extension_type_s() {
    const UNINIT: ::std::mem::MaybeUninit<pb_extension_type_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pb_extension_type_s>(),
        24usize,
        concat!("Size of: ", stringify!(pb_extension_type_s))
    );
    assert_eq!(
        ::std::mem::align_of::<pb_extension_type_s>(),
        8usize,
        concat!("Alignment of ", stringify!(pb_extension_type_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_extension_type_s),
            "::",
            stringify!(decode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_extension_type_s),
            "::",
            stringify!(encode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_extension_type_s),
            "::",
            stringify!(arg)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pb_extension_s {
    pub type_: *const pb_extension_type_t,
    pub dest: *mut ::std::os::raw::c_void,
    pub next: *mut pb_extension_t,
    pub found: bool,
}
#[test]
fn bindgen_test_layout_pb_extension_s() {
    const UNINIT: ::std::mem::MaybeUninit<pb_extension_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pb_extension_s>(),
        32usize,
        concat!("Size of: ", stringify!(pb_extension_s))
    );
    assert_eq!(
        ::std::mem::align_of::<pb_extension_s>(),
        8usize,
        concat!("Alignment of ", stringify!(pb_extension_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_extension_s),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dest) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_extension_s),
            "::",
            stringify!(dest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_extension_s),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).found) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pb_extension_s),
            "::",
            stringify!(found)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _google_protobuf_Any {
    pub type_url: pb_callback_t,
    pub value: pb_callback_t,
}
#[test]
fn bindgen_test_layout__google_protobuf_Any() {
    const UNINIT: ::std::mem::MaybeUninit<_google_protobuf_Any> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_google_protobuf_Any>(),
        32usize,
        concat!("Size of: ", stringify!(_google_protobuf_Any))
    );
    assert_eq!(
        ::std::mem::align_of::<_google_protobuf_Any>(),
        8usize,
        concat!("Alignment of ", stringify!(_google_protobuf_Any))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_url) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_Any),
            "::",
            stringify!(type_url)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_Any),
            "::",
            stringify!(value)
        )
    );
}
pub type google_protobuf_Any = _google_protobuf_Any;
extern "C" {
    pub static google_protobuf_Any_msg: pb_msgdesc_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _penumbra_core_num_v1_Amount {
    pub lo: u64,
    pub hi: u64,
}
#[test]
fn bindgen_test_layout__penumbra_core_num_v1_Amount() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_num_v1_Amount> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_num_v1_Amount>(),
        16usize,
        concat!("Size of: ", stringify!(_penumbra_core_num_v1_Amount))
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_num_v1_Amount>(),
        8usize,
        concat!("Alignment of ", stringify!(_penumbra_core_num_v1_Amount))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_num_v1_Amount),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_num_v1_Amount),
            "::",
            stringify!(hi)
        )
    );
}
pub type penumbra_core_num_v1_Amount = _penumbra_core_num_v1_Amount;
extern "C" {
    pub static penumbra_core_num_v1_Amount_msg: pb_msgdesc_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_asset_v1_BalanceCommitment {
    pub inner: pb_callback_t,
}
#[test]
fn bindgen_test_layout__penumbra_core_asset_v1_BalanceCommitment() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_asset_v1_BalanceCommitment> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_asset_v1_BalanceCommitment>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_asset_v1_BalanceCommitment)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_asset_v1_BalanceCommitment>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_asset_v1_BalanceCommitment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inner) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_BalanceCommitment),
            "::",
            stringify!(inner)
        )
    );
}
pub type penumbra_core_asset_v1_BalanceCommitment = _penumbra_core_asset_v1_BalanceCommitment;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_asset_v1_AssetId {
    pub inner: pb_callback_t,
    pub alt_bech32m: pb_callback_t,
    pub alt_base_denom: pb_callback_t,
}
#[test]
fn bindgen_test_layout__penumbra_core_asset_v1_AssetId() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_asset_v1_AssetId> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_asset_v1_AssetId>(),
        48usize,
        concat!("Size of: ", stringify!(_penumbra_core_asset_v1_AssetId))
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_asset_v1_AssetId>(),
        8usize,
        concat!("Alignment of ", stringify!(_penumbra_core_asset_v1_AssetId))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inner) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_AssetId),
            "::",
            stringify!(inner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt_bech32m) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_AssetId),
            "::",
            stringify!(alt_bech32m)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt_base_denom) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_AssetId),
            "::",
            stringify!(alt_base_denom)
        )
    );
}
pub type penumbra_core_asset_v1_AssetId = _penumbra_core_asset_v1_AssetId;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_asset_v1_Denom {
    pub denom: pb_callback_t,
}
#[test]
fn bindgen_test_layout__penumbra_core_asset_v1_Denom() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_asset_v1_Denom> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_asset_v1_Denom>(),
        16usize,
        concat!("Size of: ", stringify!(_penumbra_core_asset_v1_Denom))
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_asset_v1_Denom>(),
        8usize,
        concat!("Alignment of ", stringify!(_penumbra_core_asset_v1_Denom))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).denom) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_Denom),
            "::",
            stringify!(denom)
        )
    );
}
pub type penumbra_core_asset_v1_Denom = _penumbra_core_asset_v1_Denom;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_asset_v1_Metadata {
    pub description: pb_callback_t,
    pub denom_units: pb_callback_t,
    pub base: pb_callback_t,
    pub display: pb_callback_t,
    pub name: pb_callback_t,
    pub symbol: pb_callback_t,
    pub has_penumbra_asset_id: bool,
    pub penumbra_asset_id: penumbra_core_asset_v1_AssetId,
    pub images: pb_callback_t,
    pub priority_score: u64,
}
#[test]
fn bindgen_test_layout__penumbra_core_asset_v1_Metadata() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_asset_v1_Metadata> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_asset_v1_Metadata>(),
        176usize,
        concat!("Size of: ", stringify!(_penumbra_core_asset_v1_Metadata))
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_asset_v1_Metadata>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_asset_v1_Metadata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).description) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_Metadata),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).denom_units) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_Metadata),
            "::",
            stringify!(denom_units)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_Metadata),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).display) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_Metadata),
            "::",
            stringify!(display)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_Metadata),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).symbol) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_Metadata),
            "::",
            stringify!(symbol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_penumbra_asset_id) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_Metadata),
            "::",
            stringify!(has_penumbra_asset_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).penumbra_asset_id) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_Metadata),
            "::",
            stringify!(penumbra_asset_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).images) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_Metadata),
            "::",
            stringify!(images)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priority_score) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_Metadata),
            "::",
            stringify!(priority_score)
        )
    );
}
pub type penumbra_core_asset_v1_Metadata = _penumbra_core_asset_v1_Metadata;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_asset_v1_DenomUnit {
    pub denom: pb_callback_t,
    pub exponent: u32,
    pub aliases: pb_callback_t,
}
#[test]
fn bindgen_test_layout__penumbra_core_asset_v1_DenomUnit() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_asset_v1_DenomUnit> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_asset_v1_DenomUnit>(),
        40usize,
        concat!("Size of: ", stringify!(_penumbra_core_asset_v1_DenomUnit))
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_asset_v1_DenomUnit>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_asset_v1_DenomUnit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).denom) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_DenomUnit),
            "::",
            stringify!(denom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exponent) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_DenomUnit),
            "::",
            stringify!(exponent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aliases) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_DenomUnit),
            "::",
            stringify!(aliases)
        )
    );
}
pub type penumbra_core_asset_v1_DenomUnit = _penumbra_core_asset_v1_DenomUnit;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_asset_v1_Value {
    pub has_amount: bool,
    pub amount: penumbra_core_num_v1_Amount,
    pub has_asset_id: bool,
    pub asset_id: penumbra_core_asset_v1_AssetId,
}
#[test]
fn bindgen_test_layout__penumbra_core_asset_v1_Value() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_asset_v1_Value> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_asset_v1_Value>(),
        80usize,
        concat!("Size of: ", stringify!(_penumbra_core_asset_v1_Value))
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_asset_v1_Value>(),
        8usize,
        concat!("Alignment of ", stringify!(_penumbra_core_asset_v1_Value))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_amount) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_Value),
            "::",
            stringify!(has_amount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_Value),
            "::",
            stringify!(amount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_asset_id) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_Value),
            "::",
            stringify!(has_asset_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).asset_id) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_Value),
            "::",
            stringify!(asset_id)
        )
    );
}
pub type penumbra_core_asset_v1_Value = _penumbra_core_asset_v1_Value;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_asset_v1_ValueView_KnownAssetId {
    pub has_amount: bool,
    pub amount: penumbra_core_num_v1_Amount,
    pub has_metadata: bool,
    pub metadata: penumbra_core_asset_v1_Metadata,
    pub equivalent_values: pb_callback_t,
    pub has_extended_metadata: bool,
    pub extended_metadata: google_protobuf_Any,
}
#[test]
fn bindgen_test_layout__penumbra_core_asset_v1_ValueView_KnownAssetId() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_asset_v1_ValueView_KnownAssetId> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_asset_v1_ValueView_KnownAssetId>(),
        264usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_asset_v1_ValueView_KnownAssetId)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_asset_v1_ValueView_KnownAssetId>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_asset_v1_ValueView_KnownAssetId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_amount) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_ValueView_KnownAssetId),
            "::",
            stringify!(has_amount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_ValueView_KnownAssetId),
            "::",
            stringify!(amount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_metadata) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_ValueView_KnownAssetId),
            "::",
            stringify!(has_metadata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).metadata) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_ValueView_KnownAssetId),
            "::",
            stringify!(metadata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).equivalent_values) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_ValueView_KnownAssetId),
            "::",
            stringify!(equivalent_values)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_extended_metadata) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_ValueView_KnownAssetId),
            "::",
            stringify!(has_extended_metadata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extended_metadata) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_ValueView_KnownAssetId),
            "::",
            stringify!(extended_metadata)
        )
    );
}
pub type penumbra_core_asset_v1_ValueView_KnownAssetId =
    _penumbra_core_asset_v1_ValueView_KnownAssetId;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_asset_v1_ValueView_UnknownAssetId {
    pub has_amount: bool,
    pub amount: penumbra_core_num_v1_Amount,
    pub has_asset_id: bool,
    pub asset_id: penumbra_core_asset_v1_AssetId,
}
#[test]
fn bindgen_test_layout__penumbra_core_asset_v1_ValueView_UnknownAssetId() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_asset_v1_ValueView_UnknownAssetId> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_asset_v1_ValueView_UnknownAssetId>(),
        80usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_asset_v1_ValueView_UnknownAssetId)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_asset_v1_ValueView_UnknownAssetId>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_asset_v1_ValueView_UnknownAssetId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_amount) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_ValueView_UnknownAssetId),
            "::",
            stringify!(has_amount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_ValueView_UnknownAssetId),
            "::",
            stringify!(amount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_asset_id) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_ValueView_UnknownAssetId),
            "::",
            stringify!(has_asset_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).asset_id) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_ValueView_UnknownAssetId),
            "::",
            stringify!(asset_id)
        )
    );
}
pub type penumbra_core_asset_v1_ValueView_UnknownAssetId =
    _penumbra_core_asset_v1_ValueView_UnknownAssetId;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_asset_v1_ValueView {
    pub which_value_view: pb_size_t,
    pub value_view: _penumbra_core_asset_v1_ValueView__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _penumbra_core_asset_v1_ValueView__bindgen_ty_1 {
    pub known_asset_id: penumbra_core_asset_v1_ValueView_KnownAssetId,
    pub unknown_asset_id: penumbra_core_asset_v1_ValueView_UnknownAssetId,
}
#[test]
fn bindgen_test_layout__penumbra_core_asset_v1_ValueView__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_asset_v1_ValueView__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_asset_v1_ValueView__bindgen_ty_1>(),
        264usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_asset_v1_ValueView__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_asset_v1_ValueView__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_asset_v1_ValueView__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).known_asset_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_ValueView__bindgen_ty_1),
            "::",
            stringify!(known_asset_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_asset_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_ValueView__bindgen_ty_1),
            "::",
            stringify!(unknown_asset_id)
        )
    );
}
#[test]
fn bindgen_test_layout__penumbra_core_asset_v1_ValueView() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_asset_v1_ValueView> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_asset_v1_ValueView>(),
        272usize,
        concat!("Size of: ", stringify!(_penumbra_core_asset_v1_ValueView))
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_asset_v1_ValueView>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_asset_v1_ValueView)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).which_value_view) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_ValueView),
            "::",
            stringify!(which_value_view)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value_view) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_ValueView),
            "::",
            stringify!(value_view)
        )
    );
}
pub type penumbra_core_asset_v1_ValueView = _penumbra_core_asset_v1_ValueView;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_asset_v1_AssetImage_Theme {
    pub primary_color_hex: pb_callback_t,
    pub circle: bool,
    pub dark_mode: bool,
}
#[test]
fn bindgen_test_layout__penumbra_core_asset_v1_AssetImage_Theme() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_asset_v1_AssetImage_Theme> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_asset_v1_AssetImage_Theme>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_asset_v1_AssetImage_Theme)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_asset_v1_AssetImage_Theme>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_asset_v1_AssetImage_Theme)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).primary_color_hex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_AssetImage_Theme),
            "::",
            stringify!(primary_color_hex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).circle) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_AssetImage_Theme),
            "::",
            stringify!(circle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dark_mode) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_AssetImage_Theme),
            "::",
            stringify!(dark_mode)
        )
    );
}
pub type penumbra_core_asset_v1_AssetImage_Theme = _penumbra_core_asset_v1_AssetImage_Theme;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_asset_v1_AssetImage {
    pub png: pb_callback_t,
    pub svg: pb_callback_t,
    pub has_theme: bool,
    pub theme: penumbra_core_asset_v1_AssetImage_Theme,
}
#[test]
fn bindgen_test_layout__penumbra_core_asset_v1_AssetImage() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_asset_v1_AssetImage> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_asset_v1_AssetImage>(),
        64usize,
        concat!("Size of: ", stringify!(_penumbra_core_asset_v1_AssetImage))
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_asset_v1_AssetImage>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_asset_v1_AssetImage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).png) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_AssetImage),
            "::",
            stringify!(png)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).svg) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_AssetImage),
            "::",
            stringify!(svg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_theme) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_AssetImage),
            "::",
            stringify!(has_theme)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).theme) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_AssetImage),
            "::",
            stringify!(theme)
        )
    );
}
pub type penumbra_core_asset_v1_AssetImage = _penumbra_core_asset_v1_AssetImage;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_asset_v1_EstimatedPrice {
    pub has_priced_asset: bool,
    pub priced_asset: penumbra_core_asset_v1_AssetId,
    pub has_numeraire: bool,
    pub numeraire: penumbra_core_asset_v1_AssetId,
    pub numeraire_per_unit: f64,
    pub as_of_height: u64,
}
#[test]
fn bindgen_test_layout__penumbra_core_asset_v1_EstimatedPrice() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_asset_v1_EstimatedPrice> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_asset_v1_EstimatedPrice>(),
        128usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_asset_v1_EstimatedPrice)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_asset_v1_EstimatedPrice>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_asset_v1_EstimatedPrice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_priced_asset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_EstimatedPrice),
            "::",
            stringify!(has_priced_asset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priced_asset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_EstimatedPrice),
            "::",
            stringify!(priced_asset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_numeraire) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_EstimatedPrice),
            "::",
            stringify!(has_numeraire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numeraire) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_EstimatedPrice),
            "::",
            stringify!(numeraire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numeraire_per_unit) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_EstimatedPrice),
            "::",
            stringify!(numeraire_per_unit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).as_of_height) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_EstimatedPrice),
            "::",
            stringify!(as_of_height)
        )
    );
}
pub type penumbra_core_asset_v1_EstimatedPrice = _penumbra_core_asset_v1_EstimatedPrice;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_asset_v1_EquivalentValue {
    pub has_equivalent_amount: bool,
    pub equivalent_amount: penumbra_core_num_v1_Amount,
    pub has_numeraire: bool,
    pub numeraire: penumbra_core_asset_v1_Metadata,
    pub as_of_height: u64,
}
#[test]
fn bindgen_test_layout__penumbra_core_asset_v1_EquivalentValue() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_asset_v1_EquivalentValue> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_asset_v1_EquivalentValue>(),
        216usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_asset_v1_EquivalentValue)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_asset_v1_EquivalentValue>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_asset_v1_EquivalentValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_equivalent_amount) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_EquivalentValue),
            "::",
            stringify!(has_equivalent_amount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).equivalent_amount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_EquivalentValue),
            "::",
            stringify!(equivalent_amount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_numeraire) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_EquivalentValue),
            "::",
            stringify!(has_numeraire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numeraire) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_EquivalentValue),
            "::",
            stringify!(numeraire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).as_of_height) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_asset_v1_EquivalentValue),
            "::",
            stringify!(as_of_height)
        )
    );
}
pub type penumbra_core_asset_v1_EquivalentValue = _penumbra_core_asset_v1_EquivalentValue;
extern "C" {
    pub static penumbra_core_asset_v1_BalanceCommitment_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_asset_v1_AssetId_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_asset_v1_Denom_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_asset_v1_Metadata_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_asset_v1_DenomUnit_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_asset_v1_Value_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_asset_v1_ValueView_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_asset_v1_ValueView_KnownAssetId_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_asset_v1_ValueView_UnknownAssetId_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_asset_v1_AssetImage_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_asset_v1_AssetImage_Theme_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_asset_v1_EstimatedPrice_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_asset_v1_EquivalentValue_msg: pb_msgdesc_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _google_protobuf_Timestamp {
    pub seconds: i64,
    pub nanos: i32,
}
#[test]
fn bindgen_test_layout__google_protobuf_Timestamp() {
    const UNINIT: ::std::mem::MaybeUninit<_google_protobuf_Timestamp> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_google_protobuf_Timestamp>(),
        16usize,
        concat!("Size of: ", stringify!(_google_protobuf_Timestamp))
    );
    assert_eq!(
        ::std::mem::align_of::<_google_protobuf_Timestamp>(),
        8usize,
        concat!("Alignment of ", stringify!(_google_protobuf_Timestamp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seconds) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_Timestamp),
            "::",
            stringify!(seconds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nanos) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_google_protobuf_Timestamp),
            "::",
            stringify!(nanos)
        )
    );
}
pub type google_protobuf_Timestamp = _google_protobuf_Timestamp;
extern "C" {
    pub static google_protobuf_Timestamp_msg: pb_msgdesc_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_crypto_tct_v1_StateCommitment {
    pub inner: pb_callback_t,
}
#[test]
fn bindgen_test_layout__penumbra_crypto_tct_v1_StateCommitment() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_crypto_tct_v1_StateCommitment> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_crypto_tct_v1_StateCommitment>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_crypto_tct_v1_StateCommitment)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_crypto_tct_v1_StateCommitment>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_crypto_tct_v1_StateCommitment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inner) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_crypto_tct_v1_StateCommitment),
            "::",
            stringify!(inner)
        )
    );
}
pub type penumbra_crypto_tct_v1_StateCommitment = _penumbra_crypto_tct_v1_StateCommitment;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_crypto_tct_v1_MerkleRoot {
    pub inner: pb_callback_t,
}
#[test]
fn bindgen_test_layout__penumbra_crypto_tct_v1_MerkleRoot() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_crypto_tct_v1_MerkleRoot> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_crypto_tct_v1_MerkleRoot>(),
        16usize,
        concat!("Size of: ", stringify!(_penumbra_crypto_tct_v1_MerkleRoot))
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_crypto_tct_v1_MerkleRoot>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_crypto_tct_v1_MerkleRoot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inner) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_crypto_tct_v1_MerkleRoot),
            "::",
            stringify!(inner)
        )
    );
}
pub type penumbra_crypto_tct_v1_MerkleRoot = _penumbra_crypto_tct_v1_MerkleRoot;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_crypto_tct_v1_StateCommitmentProof {
    pub has_note_commitment: bool,
    pub note_commitment: penumbra_crypto_tct_v1_StateCommitment,
    pub position: u64,
    pub auth_path: pb_callback_t,
}
#[test]
fn bindgen_test_layout__penumbra_crypto_tct_v1_StateCommitmentProof() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_crypto_tct_v1_StateCommitmentProof> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_crypto_tct_v1_StateCommitmentProof>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_crypto_tct_v1_StateCommitmentProof)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_crypto_tct_v1_StateCommitmentProof>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_crypto_tct_v1_StateCommitmentProof)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_note_commitment) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_crypto_tct_v1_StateCommitmentProof),
            "::",
            stringify!(has_note_commitment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).note_commitment) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_crypto_tct_v1_StateCommitmentProof),
            "::",
            stringify!(note_commitment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).position) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_crypto_tct_v1_StateCommitmentProof),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).auth_path) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_crypto_tct_v1_StateCommitmentProof),
            "::",
            stringify!(auth_path)
        )
    );
}
pub type penumbra_crypto_tct_v1_StateCommitmentProof = _penumbra_crypto_tct_v1_StateCommitmentProof;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_crypto_tct_v1_MerklePathChunk {
    pub sibling_1: pb_callback_t,
    pub sibling_2: pb_callback_t,
    pub sibling_3: pb_callback_t,
}
#[test]
fn bindgen_test_layout__penumbra_crypto_tct_v1_MerklePathChunk() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_crypto_tct_v1_MerklePathChunk> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_crypto_tct_v1_MerklePathChunk>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_crypto_tct_v1_MerklePathChunk)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_crypto_tct_v1_MerklePathChunk>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_crypto_tct_v1_MerklePathChunk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sibling_1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_crypto_tct_v1_MerklePathChunk),
            "::",
            stringify!(sibling_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sibling_2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_crypto_tct_v1_MerklePathChunk),
            "::",
            stringify!(sibling_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sibling_3) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_crypto_tct_v1_MerklePathChunk),
            "::",
            stringify!(sibling_3)
        )
    );
}
pub type penumbra_crypto_tct_v1_MerklePathChunk = _penumbra_crypto_tct_v1_MerklePathChunk;
extern "C" {
    pub static penumbra_crypto_tct_v1_StateCommitment_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_crypto_tct_v1_MerkleRoot_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_crypto_tct_v1_StateCommitmentProof_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_crypto_tct_v1_MerklePathChunk_msg: pb_msgdesc_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _penumbra_core_component_sct_v1_SctParameters {
    pub epoch_duration: u64,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_sct_v1_SctParameters() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_component_sct_v1_SctParameters> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_sct_v1_SctParameters>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_sct_v1_SctParameters)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_sct_v1_SctParameters>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_sct_v1_SctParameters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).epoch_duration) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_SctParameters),
            "::",
            stringify!(epoch_duration)
        )
    );
}
pub type penumbra_core_component_sct_v1_SctParameters =
    _penumbra_core_component_sct_v1_SctParameters;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _penumbra_core_component_sct_v1_GenesisContent {
    pub has_sct_params: bool,
    pub sct_params: penumbra_core_component_sct_v1_SctParameters,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_sct_v1_GenesisContent() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_component_sct_v1_GenesisContent> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_sct_v1_GenesisContent>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_sct_v1_GenesisContent)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_sct_v1_GenesisContent>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_sct_v1_GenesisContent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_sct_params) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_GenesisContent),
            "::",
            stringify!(has_sct_params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sct_params) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_GenesisContent),
            "::",
            stringify!(sct_params)
        )
    );
}
pub type penumbra_core_component_sct_v1_GenesisContent =
    _penumbra_core_component_sct_v1_GenesisContent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _penumbra_core_component_sct_v1_Epoch {
    pub index: u64,
    pub start_height: u64,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_sct_v1_Epoch() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_component_sct_v1_Epoch> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_sct_v1_Epoch>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_sct_v1_Epoch)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_sct_v1_Epoch>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_sct_v1_Epoch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_Epoch),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_height) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_Epoch),
            "::",
            stringify!(start_height)
        )
    );
}
pub type penumbra_core_component_sct_v1_Epoch = _penumbra_core_component_sct_v1_Epoch;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _penumbra_core_component_sct_v1_CommitmentSource_Genesis {
    pub dummy_field: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_sct_v1_CommitmentSource_Genesis() {
    const UNINIT: ::std::mem::MaybeUninit<
        _penumbra_core_component_sct_v1_CommitmentSource_Genesis,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_sct_v1_CommitmentSource_Genesis>(),
        1usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_sct_v1_CommitmentSource_Genesis)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_sct_v1_CommitmentSource_Genesis>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_sct_v1_CommitmentSource_Genesis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy_field) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_CommitmentSource_Genesis),
            "::",
            stringify!(dummy_field)
        )
    );
}
pub type penumbra_core_component_sct_v1_CommitmentSource_Genesis =
    _penumbra_core_component_sct_v1_CommitmentSource_Genesis;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_sct_v1_CommitmentSource_Transaction {
    pub id: pb_callback_t,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_sct_v1_CommitmentSource_Transaction() {
    const UNINIT: ::std::mem::MaybeUninit<
        _penumbra_core_component_sct_v1_CommitmentSource_Transaction,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_sct_v1_CommitmentSource_Transaction>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_sct_v1_CommitmentSource_Transaction)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_sct_v1_CommitmentSource_Transaction>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_sct_v1_CommitmentSource_Transaction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_CommitmentSource_Transaction),
            "::",
            stringify!(id)
        )
    );
}
pub type penumbra_core_component_sct_v1_CommitmentSource_Transaction =
    _penumbra_core_component_sct_v1_CommitmentSource_Transaction;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _penumbra_core_component_sct_v1_CommitmentSource_FundingStreamReward {
    pub epoch_index: u64,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_sct_v1_CommitmentSource_FundingStreamReward() {
    const UNINIT: ::std::mem::MaybeUninit<
        _penumbra_core_component_sct_v1_CommitmentSource_FundingStreamReward,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_sct_v1_CommitmentSource_FundingStreamReward>(
        ),
        8usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_sct_v1_CommitmentSource_FundingStreamReward)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_sct_v1_CommitmentSource_FundingStreamReward>(
        ),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_sct_v1_CommitmentSource_FundingStreamReward)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).epoch_index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_CommitmentSource_FundingStreamReward),
            "::",
            stringify!(epoch_index)
        )
    );
}
pub type penumbra_core_component_sct_v1_CommitmentSource_FundingStreamReward =
    _penumbra_core_component_sct_v1_CommitmentSource_FundingStreamReward;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _penumbra_core_component_sct_v1_CommitmentSource_CommunityPoolOutput {
    pub dummy_field: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_sct_v1_CommitmentSource_CommunityPoolOutput() {
    const UNINIT: ::std::mem::MaybeUninit<
        _penumbra_core_component_sct_v1_CommitmentSource_CommunityPoolOutput,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_sct_v1_CommitmentSource_CommunityPoolOutput>(
        ),
        1usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_sct_v1_CommitmentSource_CommunityPoolOutput)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_sct_v1_CommitmentSource_CommunityPoolOutput>(
        ),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_sct_v1_CommitmentSource_CommunityPoolOutput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy_field) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_CommitmentSource_CommunityPoolOutput),
            "::",
            stringify!(dummy_field)
        )
    );
}
pub type penumbra_core_component_sct_v1_CommitmentSource_CommunityPoolOutput =
    _penumbra_core_component_sct_v1_CommitmentSource_CommunityPoolOutput;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_sct_v1_CommitmentSource_Ics20Transfer {
    pub packet_seq: u64,
    pub channel_id: pb_callback_t,
    pub sender: pb_callback_t,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_sct_v1_CommitmentSource_Ics20Transfer() {
    const UNINIT: ::std::mem::MaybeUninit<
        _penumbra_core_component_sct_v1_CommitmentSource_Ics20Transfer,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_sct_v1_CommitmentSource_Ics20Transfer>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_sct_v1_CommitmentSource_Ics20Transfer)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_sct_v1_CommitmentSource_Ics20Transfer>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_sct_v1_CommitmentSource_Ics20Transfer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).packet_seq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_CommitmentSource_Ics20Transfer),
            "::",
            stringify!(packet_seq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channel_id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_CommitmentSource_Ics20Transfer),
            "::",
            stringify!(channel_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sender) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_CommitmentSource_Ics20Transfer),
            "::",
            stringify!(sender)
        )
    );
}
pub type penumbra_core_component_sct_v1_CommitmentSource_Ics20Transfer =
    _penumbra_core_component_sct_v1_CommitmentSource_Ics20Transfer;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_sct_v1_CommitmentSource {
    pub which_source: pb_size_t,
    pub source: _penumbra_core_component_sct_v1_CommitmentSource__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _penumbra_core_component_sct_v1_CommitmentSource__bindgen_ty_1 {
    pub transaction: penumbra_core_component_sct_v1_CommitmentSource_Transaction,
    pub ics_20_transfer: penumbra_core_component_sct_v1_CommitmentSource_Ics20Transfer,
    pub funding_stream_reward: penumbra_core_component_sct_v1_CommitmentSource_FundingStreamReward,
    pub community_pool_output: penumbra_core_component_sct_v1_CommitmentSource_CommunityPoolOutput,
    pub genesis: penumbra_core_component_sct_v1_CommitmentSource_Genesis,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_sct_v1_CommitmentSource__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        _penumbra_core_component_sct_v1_CommitmentSource__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_sct_v1_CommitmentSource__bindgen_ty_1>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_sct_v1_CommitmentSource__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_sct_v1_CommitmentSource__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_sct_v1_CommitmentSource__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transaction) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_CommitmentSource__bindgen_ty_1),
            "::",
            stringify!(transaction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ics_20_transfer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_CommitmentSource__bindgen_ty_1),
            "::",
            stringify!(ics_20_transfer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).funding_stream_reward) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_CommitmentSource__bindgen_ty_1),
            "::",
            stringify!(funding_stream_reward)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).community_pool_output) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_CommitmentSource__bindgen_ty_1),
            "::",
            stringify!(community_pool_output)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).genesis) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_CommitmentSource__bindgen_ty_1),
            "::",
            stringify!(genesis)
        )
    );
}
#[test]
fn bindgen_test_layout__penumbra_core_component_sct_v1_CommitmentSource() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_component_sct_v1_CommitmentSource> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_sct_v1_CommitmentSource>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_sct_v1_CommitmentSource)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_sct_v1_CommitmentSource>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_sct_v1_CommitmentSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).which_source) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_CommitmentSource),
            "::",
            stringify!(which_source)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).source) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_CommitmentSource),
            "::",
            stringify!(source)
        )
    );
}
pub type penumbra_core_component_sct_v1_CommitmentSource =
    _penumbra_core_component_sct_v1_CommitmentSource;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_sct_v1_Nullifier {
    pub inner: pb_callback_t,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_sct_v1_Nullifier() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_component_sct_v1_Nullifier> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_sct_v1_Nullifier>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_sct_v1_Nullifier)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_sct_v1_Nullifier>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_sct_v1_Nullifier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inner) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_Nullifier),
            "::",
            stringify!(inner)
        )
    );
}
pub type penumbra_core_component_sct_v1_Nullifier = _penumbra_core_component_sct_v1_Nullifier;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_sct_v1_NullificationInfo {
    pub id: pb_callback_t,
    pub spend_height: u64,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_sct_v1_NullificationInfo() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_component_sct_v1_NullificationInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_sct_v1_NullificationInfo>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_sct_v1_NullificationInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_sct_v1_NullificationInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_sct_v1_NullificationInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_NullificationInfo),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spend_height) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_NullificationInfo),
            "::",
            stringify!(spend_height)
        )
    );
}
pub type penumbra_core_component_sct_v1_NullificationInfo =
    _penumbra_core_component_sct_v1_NullificationInfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_sct_v1_EventCommitment {
    pub has_commitment: bool,
    pub commitment: penumbra_crypto_tct_v1_StateCommitment,
    pub position: u64,
    pub has_source: bool,
    pub source: penumbra_core_component_sct_v1_CommitmentSource,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_sct_v1_EventCommitment() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_component_sct_v1_EventCommitment> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_sct_v1_EventCommitment>(),
        88usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_sct_v1_EventCommitment)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_sct_v1_EventCommitment>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_sct_v1_EventCommitment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_commitment) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_EventCommitment),
            "::",
            stringify!(has_commitment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).commitment) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_EventCommitment),
            "::",
            stringify!(commitment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).position) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_EventCommitment),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_source) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_EventCommitment),
            "::",
            stringify!(has_source)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).source) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_EventCommitment),
            "::",
            stringify!(source)
        )
    );
}
pub type penumbra_core_component_sct_v1_EventCommitment =
    _penumbra_core_component_sct_v1_EventCommitment;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_sct_v1_EventAnchor {
    pub has_anchor: bool,
    pub anchor: penumbra_crypto_tct_v1_MerkleRoot,
    pub height: u64,
    pub has_timestamp: bool,
    pub timestamp: google_protobuf_Timestamp,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_sct_v1_EventAnchor() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_component_sct_v1_EventAnchor> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_sct_v1_EventAnchor>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_sct_v1_EventAnchor)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_sct_v1_EventAnchor>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_sct_v1_EventAnchor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_anchor) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_EventAnchor),
            "::",
            stringify!(has_anchor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).anchor) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_EventAnchor),
            "::",
            stringify!(anchor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_EventAnchor),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_timestamp) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_EventAnchor),
            "::",
            stringify!(has_timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_EventAnchor),
            "::",
            stringify!(timestamp)
        )
    );
}
pub type penumbra_core_component_sct_v1_EventAnchor = _penumbra_core_component_sct_v1_EventAnchor;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_sct_v1_EventEpochRoot {
    pub has_root: bool,
    pub root: penumbra_crypto_tct_v1_MerkleRoot,
    pub index: u64,
    pub has_timestamp: bool,
    pub timestamp: google_protobuf_Timestamp,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_sct_v1_EventEpochRoot() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_component_sct_v1_EventEpochRoot> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_sct_v1_EventEpochRoot>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_sct_v1_EventEpochRoot)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_sct_v1_EventEpochRoot>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_sct_v1_EventEpochRoot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_root) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_EventEpochRoot),
            "::",
            stringify!(has_root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).root) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_EventEpochRoot),
            "::",
            stringify!(root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_EventEpochRoot),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_timestamp) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_EventEpochRoot),
            "::",
            stringify!(has_timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_EventEpochRoot),
            "::",
            stringify!(timestamp)
        )
    );
}
pub type penumbra_core_component_sct_v1_EventEpochRoot =
    _penumbra_core_component_sct_v1_EventEpochRoot;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_sct_v1_EventBlockRoot {
    pub has_root: bool,
    pub root: penumbra_crypto_tct_v1_MerkleRoot,
    pub height: u64,
    pub has_timestamp: bool,
    pub timestamp: google_protobuf_Timestamp,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_sct_v1_EventBlockRoot() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_component_sct_v1_EventBlockRoot> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_sct_v1_EventBlockRoot>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_sct_v1_EventBlockRoot)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_sct_v1_EventBlockRoot>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_sct_v1_EventBlockRoot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_root) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_EventBlockRoot),
            "::",
            stringify!(has_root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).root) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_EventBlockRoot),
            "::",
            stringify!(root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_EventBlockRoot),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_timestamp) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_EventBlockRoot),
            "::",
            stringify!(has_timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_EventBlockRoot),
            "::",
            stringify!(timestamp)
        )
    );
}
pub type penumbra_core_component_sct_v1_EventBlockRoot =
    _penumbra_core_component_sct_v1_EventBlockRoot;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _penumbra_core_component_sct_v1_EpochByHeightRequest {
    pub height: u64,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_sct_v1_EpochByHeightRequest() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_component_sct_v1_EpochByHeightRequest> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_sct_v1_EpochByHeightRequest>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_sct_v1_EpochByHeightRequest)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_sct_v1_EpochByHeightRequest>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_sct_v1_EpochByHeightRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_EpochByHeightRequest),
            "::",
            stringify!(height)
        )
    );
}
pub type penumbra_core_component_sct_v1_EpochByHeightRequest =
    _penumbra_core_component_sct_v1_EpochByHeightRequest;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _penumbra_core_component_sct_v1_EpochByHeightResponse {
    pub has_epoch: bool,
    pub epoch: penumbra_core_component_sct_v1_Epoch,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_sct_v1_EpochByHeightResponse() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_component_sct_v1_EpochByHeightResponse> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_sct_v1_EpochByHeightResponse>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_sct_v1_EpochByHeightResponse)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_sct_v1_EpochByHeightResponse>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_sct_v1_EpochByHeightResponse)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_epoch) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_EpochByHeightResponse),
            "::",
            stringify!(has_epoch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).epoch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_EpochByHeightResponse),
            "::",
            stringify!(epoch)
        )
    );
}
pub type penumbra_core_component_sct_v1_EpochByHeightResponse =
    _penumbra_core_component_sct_v1_EpochByHeightResponse;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _penumbra_core_component_sct_v1_AnchorByHeightRequest {
    pub height: u64,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_sct_v1_AnchorByHeightRequest() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_component_sct_v1_AnchorByHeightRequest> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_sct_v1_AnchorByHeightRequest>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_sct_v1_AnchorByHeightRequest)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_sct_v1_AnchorByHeightRequest>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_sct_v1_AnchorByHeightRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_AnchorByHeightRequest),
            "::",
            stringify!(height)
        )
    );
}
pub type penumbra_core_component_sct_v1_AnchorByHeightRequest =
    _penumbra_core_component_sct_v1_AnchorByHeightRequest;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_sct_v1_AnchorByHeightResponse {
    pub has_anchor: bool,
    pub anchor: penumbra_crypto_tct_v1_MerkleRoot,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_sct_v1_AnchorByHeightResponse() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_component_sct_v1_AnchorByHeightResponse> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_sct_v1_AnchorByHeightResponse>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_sct_v1_AnchorByHeightResponse)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_sct_v1_AnchorByHeightResponse>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_sct_v1_AnchorByHeightResponse)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_anchor) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_AnchorByHeightResponse),
            "::",
            stringify!(has_anchor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).anchor) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_AnchorByHeightResponse),
            "::",
            stringify!(anchor)
        )
    );
}
pub type penumbra_core_component_sct_v1_AnchorByHeightResponse =
    _penumbra_core_component_sct_v1_AnchorByHeightResponse;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _penumbra_core_component_sct_v1_TimestampByHeightRequest {
    pub height: u64,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_sct_v1_TimestampByHeightRequest() {
    const UNINIT: ::std::mem::MaybeUninit<
        _penumbra_core_component_sct_v1_TimestampByHeightRequest,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_sct_v1_TimestampByHeightRequest>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_sct_v1_TimestampByHeightRequest)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_sct_v1_TimestampByHeightRequest>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_sct_v1_TimestampByHeightRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_TimestampByHeightRequest),
            "::",
            stringify!(height)
        )
    );
}
pub type penumbra_core_component_sct_v1_TimestampByHeightRequest =
    _penumbra_core_component_sct_v1_TimestampByHeightRequest;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _penumbra_core_component_sct_v1_TimestampByHeightResponse {
    pub has_timestamp: bool,
    pub timestamp: google_protobuf_Timestamp,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_sct_v1_TimestampByHeightResponse() {
    const UNINIT: ::std::mem::MaybeUninit<
        _penumbra_core_component_sct_v1_TimestampByHeightResponse,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_sct_v1_TimestampByHeightResponse>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_sct_v1_TimestampByHeightResponse)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_sct_v1_TimestampByHeightResponse>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_sct_v1_TimestampByHeightResponse)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_timestamp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_TimestampByHeightResponse),
            "::",
            stringify!(has_timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_sct_v1_TimestampByHeightResponse),
            "::",
            stringify!(timestamp)
        )
    );
}
pub type penumbra_core_component_sct_v1_TimestampByHeightResponse =
    _penumbra_core_component_sct_v1_TimestampByHeightResponse;
extern "C" {
    pub static penumbra_core_component_sct_v1_SctParameters_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_sct_v1_GenesisContent_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_sct_v1_Epoch_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_sct_v1_CommitmentSource_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_sct_v1_CommitmentSource_Genesis_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_sct_v1_CommitmentSource_Transaction_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_sct_v1_CommitmentSource_FundingStreamReward_msg:
        pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_sct_v1_CommitmentSource_CommunityPoolOutput_msg:
        pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_sct_v1_CommitmentSource_Ics20Transfer_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_sct_v1_Nullifier_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_sct_v1_NullificationInfo_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_sct_v1_EventCommitment_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_sct_v1_EventAnchor_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_sct_v1_EventEpochRoot_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_sct_v1_EventBlockRoot_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_sct_v1_EpochByHeightRequest_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_sct_v1_EpochByHeightResponse_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_sct_v1_AnchorByHeightRequest_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_sct_v1_AnchorByHeightResponse_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_sct_v1_TimestampByHeightRequest_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_sct_v1_TimestampByHeightResponse_msg: pb_msgdesc_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_keys_v1_Address {
    pub inner: pb_callback_t,
    pub alt_bech32m: pb_callback_t,
}
#[test]
fn bindgen_test_layout__penumbra_core_keys_v1_Address() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_keys_v1_Address> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_keys_v1_Address>(),
        32usize,
        concat!("Size of: ", stringify!(_penumbra_core_keys_v1_Address))
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_keys_v1_Address>(),
        8usize,
        concat!("Alignment of ", stringify!(_penumbra_core_keys_v1_Address))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inner) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_keys_v1_Address),
            "::",
            stringify!(inner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt_bech32m) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_keys_v1_Address),
            "::",
            stringify!(alt_bech32m)
        )
    );
}
pub type penumbra_core_keys_v1_Address = _penumbra_core_keys_v1_Address;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_keys_v1_AddressView_Opaque {
    pub has_address: bool,
    pub address: penumbra_core_keys_v1_Address,
}
#[test]
fn bindgen_test_layout__penumbra_core_keys_v1_AddressView_Opaque() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_keys_v1_AddressView_Opaque> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_keys_v1_AddressView_Opaque>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_keys_v1_AddressView_Opaque)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_keys_v1_AddressView_Opaque>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_keys_v1_AddressView_Opaque)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_keys_v1_AddressView_Opaque),
            "::",
            stringify!(has_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_keys_v1_AddressView_Opaque),
            "::",
            stringify!(address)
        )
    );
}
pub type penumbra_core_keys_v1_AddressView_Opaque = _penumbra_core_keys_v1_AddressView_Opaque;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_keys_v1_PayloadKey {
    pub inner: pb_callback_t,
}
#[test]
fn bindgen_test_layout__penumbra_core_keys_v1_PayloadKey() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_keys_v1_PayloadKey> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_keys_v1_PayloadKey>(),
        16usize,
        concat!("Size of: ", stringify!(_penumbra_core_keys_v1_PayloadKey))
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_keys_v1_PayloadKey>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_keys_v1_PayloadKey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inner) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_keys_v1_PayloadKey),
            "::",
            stringify!(inner)
        )
    );
}
pub type penumbra_core_keys_v1_PayloadKey = _penumbra_core_keys_v1_PayloadKey;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_keys_v1_SpendKey {
    pub inner: pb_callback_t,
}
#[test]
fn bindgen_test_layout__penumbra_core_keys_v1_SpendKey() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_keys_v1_SpendKey> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_keys_v1_SpendKey>(),
        16usize,
        concat!("Size of: ", stringify!(_penumbra_core_keys_v1_SpendKey))
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_keys_v1_SpendKey>(),
        8usize,
        concat!("Alignment of ", stringify!(_penumbra_core_keys_v1_SpendKey))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inner) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_keys_v1_SpendKey),
            "::",
            stringify!(inner)
        )
    );
}
pub type penumbra_core_keys_v1_SpendKey = _penumbra_core_keys_v1_SpendKey;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_keys_v1_FullViewingKey {
    pub inner: pb_callback_t,
}
#[test]
fn bindgen_test_layout__penumbra_core_keys_v1_FullViewingKey() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_keys_v1_FullViewingKey> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_keys_v1_FullViewingKey>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_keys_v1_FullViewingKey)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_keys_v1_FullViewingKey>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_keys_v1_FullViewingKey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inner) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_keys_v1_FullViewingKey),
            "::",
            stringify!(inner)
        )
    );
}
pub type penumbra_core_keys_v1_FullViewingKey = _penumbra_core_keys_v1_FullViewingKey;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_keys_v1_WalletId {
    pub inner: pb_callback_t,
}
#[test]
fn bindgen_test_layout__penumbra_core_keys_v1_WalletId() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_keys_v1_WalletId> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_keys_v1_WalletId>(),
        16usize,
        concat!("Size of: ", stringify!(_penumbra_core_keys_v1_WalletId))
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_keys_v1_WalletId>(),
        8usize,
        concat!("Alignment of ", stringify!(_penumbra_core_keys_v1_WalletId))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inner) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_keys_v1_WalletId),
            "::",
            stringify!(inner)
        )
    );
}
pub type penumbra_core_keys_v1_WalletId = _penumbra_core_keys_v1_WalletId;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_keys_v1_Diversifier {
    pub inner: pb_callback_t,
}
#[test]
fn bindgen_test_layout__penumbra_core_keys_v1_Diversifier() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_keys_v1_Diversifier> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_keys_v1_Diversifier>(),
        16usize,
        concat!("Size of: ", stringify!(_penumbra_core_keys_v1_Diversifier))
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_keys_v1_Diversifier>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_keys_v1_Diversifier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inner) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_keys_v1_Diversifier),
            "::",
            stringify!(inner)
        )
    );
}
pub type penumbra_core_keys_v1_Diversifier = _penumbra_core_keys_v1_Diversifier;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_keys_v1_AddressIndex {
    pub account: u32,
    pub randomizer: pb_callback_t,
}
#[test]
fn bindgen_test_layout__penumbra_core_keys_v1_AddressIndex() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_keys_v1_AddressIndex> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_keys_v1_AddressIndex>(),
        24usize,
        concat!("Size of: ", stringify!(_penumbra_core_keys_v1_AddressIndex))
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_keys_v1_AddressIndex>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_keys_v1_AddressIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).account) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_keys_v1_AddressIndex),
            "::",
            stringify!(account)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).randomizer) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_keys_v1_AddressIndex),
            "::",
            stringify!(randomizer)
        )
    );
}
pub type penumbra_core_keys_v1_AddressIndex = _penumbra_core_keys_v1_AddressIndex;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_keys_v1_AddressView_Decoded {
    pub has_address: bool,
    pub address: penumbra_core_keys_v1_Address,
    pub has_index: bool,
    pub index: penumbra_core_keys_v1_AddressIndex,
    pub has_wallet_id: bool,
    pub wallet_id: penumbra_core_keys_v1_WalletId,
}
#[test]
fn bindgen_test_layout__penumbra_core_keys_v1_AddressView_Decoded() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_keys_v1_AddressView_Decoded> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_keys_v1_AddressView_Decoded>(),
        96usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_keys_v1_AddressView_Decoded)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_keys_v1_AddressView_Decoded>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_keys_v1_AddressView_Decoded)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_keys_v1_AddressView_Decoded),
            "::",
            stringify!(has_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_keys_v1_AddressView_Decoded),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_index) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_keys_v1_AddressView_Decoded),
            "::",
            stringify!(has_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_keys_v1_AddressView_Decoded),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_wallet_id) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_keys_v1_AddressView_Decoded),
            "::",
            stringify!(has_wallet_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wallet_id) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_keys_v1_AddressView_Decoded),
            "::",
            stringify!(wallet_id)
        )
    );
}
pub type penumbra_core_keys_v1_AddressView_Decoded = _penumbra_core_keys_v1_AddressView_Decoded;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_keys_v1_AddressView {
    pub which_address_view: pb_size_t,
    pub address_view: _penumbra_core_keys_v1_AddressView__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _penumbra_core_keys_v1_AddressView__bindgen_ty_1 {
    pub decoded: penumbra_core_keys_v1_AddressView_Decoded,
    pub opaque: penumbra_core_keys_v1_AddressView_Opaque,
}
#[test]
fn bindgen_test_layout__penumbra_core_keys_v1_AddressView__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_keys_v1_AddressView__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_keys_v1_AddressView__bindgen_ty_1>(),
        96usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_keys_v1_AddressView__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_keys_v1_AddressView__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_keys_v1_AddressView__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decoded) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_keys_v1_AddressView__bindgen_ty_1),
            "::",
            stringify!(decoded)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opaque) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_keys_v1_AddressView__bindgen_ty_1),
            "::",
            stringify!(opaque)
        )
    );
}
#[test]
fn bindgen_test_layout__penumbra_core_keys_v1_AddressView() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_keys_v1_AddressView> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_keys_v1_AddressView>(),
        104usize,
        concat!("Size of: ", stringify!(_penumbra_core_keys_v1_AddressView))
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_keys_v1_AddressView>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_keys_v1_AddressView)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).which_address_view) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_keys_v1_AddressView),
            "::",
            stringify!(which_address_view)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address_view) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_keys_v1_AddressView),
            "::",
            stringify!(address_view)
        )
    );
}
pub type penumbra_core_keys_v1_AddressView = _penumbra_core_keys_v1_AddressView;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_keys_v1_IdentityKey {
    pub ik: pb_callback_t,
}
#[test]
fn bindgen_test_layout__penumbra_core_keys_v1_IdentityKey() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_keys_v1_IdentityKey> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_keys_v1_IdentityKey>(),
        16usize,
        concat!("Size of: ", stringify!(_penumbra_core_keys_v1_IdentityKey))
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_keys_v1_IdentityKey>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_keys_v1_IdentityKey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ik) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_keys_v1_IdentityKey),
            "::",
            stringify!(ik)
        )
    );
}
pub type penumbra_core_keys_v1_IdentityKey = _penumbra_core_keys_v1_IdentityKey;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_keys_v1_GovernanceKey {
    pub gk: pb_callback_t,
}
#[test]
fn bindgen_test_layout__penumbra_core_keys_v1_GovernanceKey() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_keys_v1_GovernanceKey> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_keys_v1_GovernanceKey>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_keys_v1_GovernanceKey)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_keys_v1_GovernanceKey>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_keys_v1_GovernanceKey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gk) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_keys_v1_GovernanceKey),
            "::",
            stringify!(gk)
        )
    );
}
pub type penumbra_core_keys_v1_GovernanceKey = _penumbra_core_keys_v1_GovernanceKey;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_keys_v1_ConsensusKey {
    pub inner: pb_callback_t,
}
#[test]
fn bindgen_test_layout__penumbra_core_keys_v1_ConsensusKey() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_keys_v1_ConsensusKey> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_keys_v1_ConsensusKey>(),
        16usize,
        concat!("Size of: ", stringify!(_penumbra_core_keys_v1_ConsensusKey))
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_keys_v1_ConsensusKey>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_keys_v1_ConsensusKey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inner) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_keys_v1_ConsensusKey),
            "::",
            stringify!(inner)
        )
    );
}
pub type penumbra_core_keys_v1_ConsensusKey = _penumbra_core_keys_v1_ConsensusKey;
extern "C" {
    pub static penumbra_core_keys_v1_Address_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_keys_v1_AddressView_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_keys_v1_AddressView_Decoded_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_keys_v1_AddressView_Opaque_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_keys_v1_PayloadKey_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_keys_v1_SpendKey_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_keys_v1_FullViewingKey_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_keys_v1_WalletId_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_keys_v1_Diversifier_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_keys_v1_AddressIndex_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_keys_v1_IdentityKey_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_keys_v1_GovernanceKey_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_keys_v1_ConsensusKey_msg: pb_msgdesc_t;
}
pub const _penumbra_core_component_stake_v1_BondingState_BondingStateEnum_penumbra_core_component_stake_v1_BondingState_BondingStateEnum_BONDING_STATE_ENUM_UNSPECIFIED : _penumbra_core_component_stake_v1_BondingState_BondingStateEnum = 0 ;
pub const _penumbra_core_component_stake_v1_BondingState_BondingStateEnum_penumbra_core_component_stake_v1_BondingState_BondingStateEnum_BONDING_STATE_ENUM_BONDED : _penumbra_core_component_stake_v1_BondingState_BondingStateEnum = 1 ;
pub const _penumbra_core_component_stake_v1_BondingState_BondingStateEnum_penumbra_core_component_stake_v1_BondingState_BondingStateEnum_BONDING_STATE_ENUM_UNBONDING : _penumbra_core_component_stake_v1_BondingState_BondingStateEnum = 2 ;
pub const _penumbra_core_component_stake_v1_BondingState_BondingStateEnum_penumbra_core_component_stake_v1_BondingState_BondingStateEnum_BONDING_STATE_ENUM_UNBONDED : _penumbra_core_component_stake_v1_BondingState_BondingStateEnum = 3 ;
pub type _penumbra_core_component_stake_v1_BondingState_BondingStateEnum = ::std::os::raw::c_uint;
pub use self::_penumbra_core_component_stake_v1_BondingState_BondingStateEnum as penumbra_core_component_stake_v1_BondingState_BondingStateEnum;
pub const _penumbra_core_component_stake_v1_ValidatorState_ValidatorStateEnum_penumbra_core_component_stake_v1_ValidatorState_ValidatorStateEnum_VALIDATOR_STATE_ENUM_UNSPECIFIED : _penumbra_core_component_stake_v1_ValidatorState_ValidatorStateEnum = 0 ;
pub const _penumbra_core_component_stake_v1_ValidatorState_ValidatorStateEnum_penumbra_core_component_stake_v1_ValidatorState_ValidatorStateEnum_VALIDATOR_STATE_ENUM_DEFINED : _penumbra_core_component_stake_v1_ValidatorState_ValidatorStateEnum = 1 ;
pub const _penumbra_core_component_stake_v1_ValidatorState_ValidatorStateEnum_penumbra_core_component_stake_v1_ValidatorState_ValidatorStateEnum_VALIDATOR_STATE_ENUM_INACTIVE : _penumbra_core_component_stake_v1_ValidatorState_ValidatorStateEnum = 2 ;
pub const _penumbra_core_component_stake_v1_ValidatorState_ValidatorStateEnum_penumbra_core_component_stake_v1_ValidatorState_ValidatorStateEnum_VALIDATOR_STATE_ENUM_ACTIVE : _penumbra_core_component_stake_v1_ValidatorState_ValidatorStateEnum = 3 ;
pub const _penumbra_core_component_stake_v1_ValidatorState_ValidatorStateEnum_penumbra_core_component_stake_v1_ValidatorState_ValidatorStateEnum_VALIDATOR_STATE_ENUM_JAILED : _penumbra_core_component_stake_v1_ValidatorState_ValidatorStateEnum = 4 ;
pub const _penumbra_core_component_stake_v1_ValidatorState_ValidatorStateEnum_penumbra_core_component_stake_v1_ValidatorState_ValidatorStateEnum_VALIDATOR_STATE_ENUM_TOMBSTONED : _penumbra_core_component_stake_v1_ValidatorState_ValidatorStateEnum = 5 ;
pub const _penumbra_core_component_stake_v1_ValidatorState_ValidatorStateEnum_penumbra_core_component_stake_v1_ValidatorState_ValidatorStateEnum_VALIDATOR_STATE_ENUM_DISABLED : _penumbra_core_component_stake_v1_ValidatorState_ValidatorStateEnum = 6 ;
pub type _penumbra_core_component_stake_v1_ValidatorState_ValidatorStateEnum =
    ::std::os::raw::c_uint;
pub use self::_penumbra_core_component_stake_v1_ValidatorState_ValidatorStateEnum as penumbra_core_component_stake_v1_ValidatorState_ValidatorStateEnum;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_stake_v1_ZKUndelegateClaimProof {
    pub inner: pb_callback_t,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_stake_v1_ZKUndelegateClaimProof() {
    const UNINIT: ::std::mem::MaybeUninit<
        _penumbra_core_component_stake_v1_ZKUndelegateClaimProof,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_stake_v1_ZKUndelegateClaimProof>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_stake_v1_ZKUndelegateClaimProof)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_stake_v1_ZKUndelegateClaimProof>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_stake_v1_ZKUndelegateClaimProof)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inner) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_ZKUndelegateClaimProof),
            "::",
            stringify!(inner)
        )
    );
}
pub type penumbra_core_component_stake_v1_ZKUndelegateClaimProof =
    _penumbra_core_component_stake_v1_ZKUndelegateClaimProof;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_stake_v1_Validator {
    pub has_identity_key: bool,
    pub identity_key: penumbra_core_keys_v1_IdentityKey,
    pub consensus_key: pb_callback_t,
    pub name: pb_callback_t,
    pub website: pb_callback_t,
    pub description: pb_callback_t,
    pub funding_streams: pb_callback_t,
    pub sequence_number: u32,
    pub enabled: bool,
    pub has_governance_key: bool,
    pub governance_key: penumbra_core_keys_v1_GovernanceKey,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_stake_v1_Validator() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_component_stake_v1_Validator> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_stake_v1_Validator>(),
        128usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_stake_v1_Validator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_stake_v1_Validator>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_stake_v1_Validator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_identity_key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_Validator),
            "::",
            stringify!(has_identity_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identity_key) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_Validator),
            "::",
            stringify!(identity_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).consensus_key) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_Validator),
            "::",
            stringify!(consensus_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_Validator),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).website) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_Validator),
            "::",
            stringify!(website)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).description) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_Validator),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).funding_streams) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_Validator),
            "::",
            stringify!(funding_streams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sequence_number) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_Validator),
            "::",
            stringify!(sequence_number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enabled) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_Validator),
            "::",
            stringify!(enabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_governance_key) as usize - ptr as usize },
        109usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_Validator),
            "::",
            stringify!(has_governance_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).governance_key) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_Validator),
            "::",
            stringify!(governance_key)
        )
    );
}
pub type penumbra_core_component_stake_v1_Validator = _penumbra_core_component_stake_v1_Validator;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_stake_v1_ValidatorList {
    pub validator_keys: pb_callback_t,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_stake_v1_ValidatorList() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_component_stake_v1_ValidatorList> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_stake_v1_ValidatorList>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorList)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_stake_v1_ValidatorList>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).validator_keys) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorList),
            "::",
            stringify!(validator_keys)
        )
    );
}
pub type penumbra_core_component_stake_v1_ValidatorList =
    _penumbra_core_component_stake_v1_ValidatorList;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_stake_v1_FundingStream_ToAddress {
    pub address: pb_callback_t,
    pub rate_bps: u32,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_stake_v1_FundingStream_ToAddress() {
    const UNINIT: ::std::mem::MaybeUninit<
        _penumbra_core_component_stake_v1_FundingStream_ToAddress,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_stake_v1_FundingStream_ToAddress>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_stake_v1_FundingStream_ToAddress)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_stake_v1_FundingStream_ToAddress>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_stake_v1_FundingStream_ToAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_FundingStream_ToAddress),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rate_bps) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_FundingStream_ToAddress),
            "::",
            stringify!(rate_bps)
        )
    );
}
pub type penumbra_core_component_stake_v1_FundingStream_ToAddress =
    _penumbra_core_component_stake_v1_FundingStream_ToAddress;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _penumbra_core_component_stake_v1_FundingStream_ToCommunityPool {
    pub rate_bps: u32,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_stake_v1_FundingStream_ToCommunityPool() {
    const UNINIT: ::std::mem::MaybeUninit<
        _penumbra_core_component_stake_v1_FundingStream_ToCommunityPool,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_stake_v1_FundingStream_ToCommunityPool>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_stake_v1_FundingStream_ToCommunityPool)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_stake_v1_FundingStream_ToCommunityPool>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_stake_v1_FundingStream_ToCommunityPool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rate_bps) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_FundingStream_ToCommunityPool),
            "::",
            stringify!(rate_bps)
        )
    );
}
pub type penumbra_core_component_stake_v1_FundingStream_ToCommunityPool =
    _penumbra_core_component_stake_v1_FundingStream_ToCommunityPool;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_stake_v1_FundingStream {
    pub which_recipient: pb_size_t,
    pub recipient: _penumbra_core_component_stake_v1_FundingStream__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _penumbra_core_component_stake_v1_FundingStream__bindgen_ty_1 {
    pub to_address: penumbra_core_component_stake_v1_FundingStream_ToAddress,
    pub to_community_pool: penumbra_core_component_stake_v1_FundingStream_ToCommunityPool,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_stake_v1_FundingStream__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        _penumbra_core_component_stake_v1_FundingStream__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_stake_v1_FundingStream__bindgen_ty_1>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_stake_v1_FundingStream__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_stake_v1_FundingStream__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_stake_v1_FundingStream__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).to_address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_FundingStream__bindgen_ty_1),
            "::",
            stringify!(to_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).to_community_pool) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_FundingStream__bindgen_ty_1),
            "::",
            stringify!(to_community_pool)
        )
    );
}
#[test]
fn bindgen_test_layout__penumbra_core_component_stake_v1_FundingStream() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_component_stake_v1_FundingStream> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_stake_v1_FundingStream>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_stake_v1_FundingStream)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_stake_v1_FundingStream>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_stake_v1_FundingStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).which_recipient) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_FundingStream),
            "::",
            stringify!(which_recipient)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).recipient) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_FundingStream),
            "::",
            stringify!(recipient)
        )
    );
}
pub type penumbra_core_component_stake_v1_FundingStream =
    _penumbra_core_component_stake_v1_FundingStream;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_stake_v1_RateData {
    pub has_identity_key: bool,
    pub identity_key: penumbra_core_keys_v1_IdentityKey,
    pub epoch_index: u64,
    pub has_validator_reward_rate: bool,
    pub validator_reward_rate: penumbra_core_num_v1_Amount,
    pub has_validator_exchange_rate: bool,
    pub validator_exchange_rate: penumbra_core_num_v1_Amount,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_stake_v1_RateData() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_component_stake_v1_RateData> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_stake_v1_RateData>(),
        80usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_stake_v1_RateData)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_stake_v1_RateData>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_stake_v1_RateData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_identity_key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_RateData),
            "::",
            stringify!(has_identity_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identity_key) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_RateData),
            "::",
            stringify!(identity_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).epoch_index) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_RateData),
            "::",
            stringify!(epoch_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_validator_reward_rate) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_RateData),
            "::",
            stringify!(has_validator_reward_rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).validator_reward_rate) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_RateData),
            "::",
            stringify!(validator_reward_rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_validator_exchange_rate) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_RateData),
            "::",
            stringify!(has_validator_exchange_rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).validator_exchange_rate) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_RateData),
            "::",
            stringify!(validator_exchange_rate)
        )
    );
}
pub type penumbra_core_component_stake_v1_RateData = _penumbra_core_component_stake_v1_RateData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _penumbra_core_component_stake_v1_BaseRateData {
    pub epoch_index: u64,
    pub has_base_reward_rate: bool,
    pub base_reward_rate: penumbra_core_num_v1_Amount,
    pub has_base_exchange_rate: bool,
    pub base_exchange_rate: penumbra_core_num_v1_Amount,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_stake_v1_BaseRateData() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_component_stake_v1_BaseRateData> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_stake_v1_BaseRateData>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_stake_v1_BaseRateData)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_stake_v1_BaseRateData>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_stake_v1_BaseRateData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).epoch_index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_BaseRateData),
            "::",
            stringify!(epoch_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_base_reward_rate) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_BaseRateData),
            "::",
            stringify!(has_base_reward_rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_reward_rate) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_BaseRateData),
            "::",
            stringify!(base_reward_rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_base_exchange_rate) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_BaseRateData),
            "::",
            stringify!(has_base_exchange_rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_exchange_rate) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_BaseRateData),
            "::",
            stringify!(base_exchange_rate)
        )
    );
}
pub type penumbra_core_component_stake_v1_BaseRateData =
    _penumbra_core_component_stake_v1_BaseRateData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _penumbra_core_component_stake_v1_BondingState {
    pub state: penumbra_core_component_stake_v1_BondingState_BondingStateEnum,
    pub unbonds_at_epoch: u64,
    pub unbonds_at_height: u64,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_stake_v1_BondingState() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_component_stake_v1_BondingState> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_stake_v1_BondingState>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_stake_v1_BondingState)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_stake_v1_BondingState>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_stake_v1_BondingState)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_BondingState),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unbonds_at_epoch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_BondingState),
            "::",
            stringify!(unbonds_at_epoch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unbonds_at_height) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_BondingState),
            "::",
            stringify!(unbonds_at_height)
        )
    );
}
pub type penumbra_core_component_stake_v1_BondingState =
    _penumbra_core_component_stake_v1_BondingState;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _penumbra_core_component_stake_v1_ValidatorState {
    pub state: penumbra_core_component_stake_v1_ValidatorState_ValidatorStateEnum,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_stake_v1_ValidatorState() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_component_stake_v1_ValidatorState> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_stake_v1_ValidatorState>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorState)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_stake_v1_ValidatorState>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorState)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorState),
            "::",
            stringify!(state)
        )
    );
}
pub type penumbra_core_component_stake_v1_ValidatorState =
    _penumbra_core_component_stake_v1_ValidatorState;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_stake_v1_ValidatorStatus {
    pub has_identity_key: bool,
    pub identity_key: penumbra_core_keys_v1_IdentityKey,
    pub has_state: bool,
    pub state: penumbra_core_component_stake_v1_ValidatorState,
    pub has_voting_power: bool,
    pub voting_power: penumbra_core_num_v1_Amount,
    pub has_bonding_state: bool,
    pub bonding_state: penumbra_core_component_stake_v1_BondingState,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_stake_v1_ValidatorStatus() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_component_stake_v1_ValidatorStatus> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_stake_v1_ValidatorStatus>(),
        88usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorStatus)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_stake_v1_ValidatorStatus>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorStatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_identity_key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorStatus),
            "::",
            stringify!(has_identity_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identity_key) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorStatus),
            "::",
            stringify!(identity_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_state) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorStatus),
            "::",
            stringify!(has_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorStatus),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_voting_power) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorStatus),
            "::",
            stringify!(has_voting_power)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).voting_power) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorStatus),
            "::",
            stringify!(voting_power)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_bonding_state) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorStatus),
            "::",
            stringify!(has_bonding_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bonding_state) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorStatus),
            "::",
            stringify!(bonding_state)
        )
    );
}
pub type penumbra_core_component_stake_v1_ValidatorStatus =
    _penumbra_core_component_stake_v1_ValidatorStatus;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_stake_v1_ValidatorInfo {
    pub has_validator: bool,
    pub validator: penumbra_core_component_stake_v1_Validator,
    pub has_status: bool,
    pub status: penumbra_core_component_stake_v1_ValidatorStatus,
    pub has_rate_data: bool,
    pub rate_data: penumbra_core_component_stake_v1_RateData,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_stake_v1_ValidatorInfo() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_component_stake_v1_ValidatorInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_stake_v1_ValidatorInfo>(),
        320usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_stake_v1_ValidatorInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_validator) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorInfo),
            "::",
            stringify!(has_validator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).validator) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorInfo),
            "::",
            stringify!(validator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_status) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorInfo),
            "::",
            stringify!(has_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorInfo),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_rate_data) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorInfo),
            "::",
            stringify!(has_rate_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rate_data) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorInfo),
            "::",
            stringify!(rate_data)
        )
    );
}
pub type penumbra_core_component_stake_v1_ValidatorInfo =
    _penumbra_core_component_stake_v1_ValidatorInfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_stake_v1_ValidatorDefinition {
    pub has_validator: bool,
    pub validator: penumbra_core_component_stake_v1_Validator,
    pub auth_sig: pb_callback_t,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_stake_v1_ValidatorDefinition() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_component_stake_v1_ValidatorDefinition> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_stake_v1_ValidatorDefinition>(),
        152usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorDefinition)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_stake_v1_ValidatorDefinition>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorDefinition)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_validator) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorDefinition),
            "::",
            stringify!(has_validator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).validator) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorDefinition),
            "::",
            stringify!(validator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).auth_sig) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorDefinition),
            "::",
            stringify!(auth_sig)
        )
    );
}
pub type penumbra_core_component_stake_v1_ValidatorDefinition =
    _penumbra_core_component_stake_v1_ValidatorDefinition;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_stake_v1_Delegate {
    pub has_validator_identity: bool,
    pub validator_identity: penumbra_core_keys_v1_IdentityKey,
    pub epoch_index: u64,
    pub has_unbonded_amount: bool,
    pub unbonded_amount: penumbra_core_num_v1_Amount,
    pub has_delegation_amount: bool,
    pub delegation_amount: penumbra_core_num_v1_Amount,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_stake_v1_Delegate() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_component_stake_v1_Delegate> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_stake_v1_Delegate>(),
        80usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_stake_v1_Delegate)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_stake_v1_Delegate>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_stake_v1_Delegate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_validator_identity) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_Delegate),
            "::",
            stringify!(has_validator_identity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).validator_identity) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_Delegate),
            "::",
            stringify!(validator_identity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).epoch_index) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_Delegate),
            "::",
            stringify!(epoch_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_unbonded_amount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_Delegate),
            "::",
            stringify!(has_unbonded_amount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unbonded_amount) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_Delegate),
            "::",
            stringify!(unbonded_amount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_delegation_amount) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_Delegate),
            "::",
            stringify!(has_delegation_amount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delegation_amount) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_Delegate),
            "::",
            stringify!(delegation_amount)
        )
    );
}
pub type penumbra_core_component_stake_v1_Delegate = _penumbra_core_component_stake_v1_Delegate;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_stake_v1_Undelegate {
    pub has_validator_identity: bool,
    pub validator_identity: penumbra_core_keys_v1_IdentityKey,
    pub start_epoch_index: u64,
    pub has_unbonded_amount: bool,
    pub unbonded_amount: penumbra_core_num_v1_Amount,
    pub has_delegation_amount: bool,
    pub delegation_amount: penumbra_core_num_v1_Amount,
    pub has_from_epoch: bool,
    pub from_epoch: penumbra_core_component_sct_v1_Epoch,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_stake_v1_Undelegate() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_component_stake_v1_Undelegate> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_stake_v1_Undelegate>(),
        104usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_stake_v1_Undelegate)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_stake_v1_Undelegate>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_stake_v1_Undelegate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_validator_identity) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_Undelegate),
            "::",
            stringify!(has_validator_identity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).validator_identity) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_Undelegate),
            "::",
            stringify!(validator_identity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_epoch_index) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_Undelegate),
            "::",
            stringify!(start_epoch_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_unbonded_amount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_Undelegate),
            "::",
            stringify!(has_unbonded_amount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unbonded_amount) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_Undelegate),
            "::",
            stringify!(unbonded_amount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_delegation_amount) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_Undelegate),
            "::",
            stringify!(has_delegation_amount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delegation_amount) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_Undelegate),
            "::",
            stringify!(delegation_amount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_from_epoch) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_Undelegate),
            "::",
            stringify!(has_from_epoch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).from_epoch) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_Undelegate),
            "::",
            stringify!(from_epoch)
        )
    );
}
pub type penumbra_core_component_stake_v1_Undelegate = _penumbra_core_component_stake_v1_Undelegate;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_stake_v1_DelegationChanges {
    pub delegations: pb_callback_t,
    pub undelegations: pb_callback_t,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_stake_v1_DelegationChanges() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_component_stake_v1_DelegationChanges> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_stake_v1_DelegationChanges>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_stake_v1_DelegationChanges)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_stake_v1_DelegationChanges>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_stake_v1_DelegationChanges)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delegations) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_DelegationChanges),
            "::",
            stringify!(delegations)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).undelegations) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_DelegationChanges),
            "::",
            stringify!(undelegations)
        )
    );
}
pub type penumbra_core_component_stake_v1_DelegationChanges =
    _penumbra_core_component_stake_v1_DelegationChanges;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_stake_v1_Uptime {
    pub as_of_block_height: u64,
    pub window_len: u32,
    pub bitvec: pb_callback_t,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_stake_v1_Uptime() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_component_stake_v1_Uptime> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_stake_v1_Uptime>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_stake_v1_Uptime)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_stake_v1_Uptime>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_stake_v1_Uptime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).as_of_block_height) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_Uptime),
            "::",
            stringify!(as_of_block_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).window_len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_Uptime),
            "::",
            stringify!(window_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bitvec) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_Uptime),
            "::",
            stringify!(bitvec)
        )
    );
}
pub type penumbra_core_component_stake_v1_Uptime = _penumbra_core_component_stake_v1_Uptime;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_stake_v1_CurrentConsensusKeys {
    pub consensus_keys: pb_callback_t,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_stake_v1_CurrentConsensusKeys() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_component_stake_v1_CurrentConsensusKeys> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_stake_v1_CurrentConsensusKeys>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_stake_v1_CurrentConsensusKeys)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_stake_v1_CurrentConsensusKeys>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_stake_v1_CurrentConsensusKeys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).consensus_keys) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_CurrentConsensusKeys),
            "::",
            stringify!(consensus_keys)
        )
    );
}
pub type penumbra_core_component_stake_v1_CurrentConsensusKeys =
    _penumbra_core_component_stake_v1_CurrentConsensusKeys;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_stake_v1_Penalty {
    pub inner: pb_callback_t,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_stake_v1_Penalty() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_component_stake_v1_Penalty> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_stake_v1_Penalty>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_stake_v1_Penalty)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_stake_v1_Penalty>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_stake_v1_Penalty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inner) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_Penalty),
            "::",
            stringify!(inner)
        )
    );
}
pub type penumbra_core_component_stake_v1_Penalty = _penumbra_core_component_stake_v1_Penalty;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_stake_v1_UndelegateClaimBody {
    pub has_validator_identity: bool,
    pub validator_identity: penumbra_core_keys_v1_IdentityKey,
    pub start_epoch_index: u64,
    pub has_penalty: bool,
    pub penalty: penumbra_core_component_stake_v1_Penalty,
    pub has_balance_commitment: bool,
    pub balance_commitment: penumbra_core_asset_v1_BalanceCommitment,
    pub unbonding_start_height: u64,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_stake_v1_UndelegateClaimBody() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_component_stake_v1_UndelegateClaimBody> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_stake_v1_UndelegateClaimBody>(),
        88usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_stake_v1_UndelegateClaimBody)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_stake_v1_UndelegateClaimBody>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_stake_v1_UndelegateClaimBody)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_validator_identity) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_UndelegateClaimBody),
            "::",
            stringify!(has_validator_identity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).validator_identity) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_UndelegateClaimBody),
            "::",
            stringify!(validator_identity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_epoch_index) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_UndelegateClaimBody),
            "::",
            stringify!(start_epoch_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_penalty) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_UndelegateClaimBody),
            "::",
            stringify!(has_penalty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).penalty) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_UndelegateClaimBody),
            "::",
            stringify!(penalty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_balance_commitment) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_UndelegateClaimBody),
            "::",
            stringify!(has_balance_commitment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).balance_commitment) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_UndelegateClaimBody),
            "::",
            stringify!(balance_commitment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unbonding_start_height) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_UndelegateClaimBody),
            "::",
            stringify!(unbonding_start_height)
        )
    );
}
pub type penumbra_core_component_stake_v1_UndelegateClaimBody =
    _penumbra_core_component_stake_v1_UndelegateClaimBody;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_stake_v1_UndelegateClaim {
    pub has_body: bool,
    pub body: penumbra_core_component_stake_v1_UndelegateClaimBody,
    pub proof: pb_callback_t,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_stake_v1_UndelegateClaim() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_component_stake_v1_UndelegateClaim> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_stake_v1_UndelegateClaim>(),
        112usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_stake_v1_UndelegateClaim)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_stake_v1_UndelegateClaim>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_stake_v1_UndelegateClaim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_body) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_UndelegateClaim),
            "::",
            stringify!(has_body)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).body) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_UndelegateClaim),
            "::",
            stringify!(body)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).proof) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_UndelegateClaim),
            "::",
            stringify!(proof)
        )
    );
}
pub type penumbra_core_component_stake_v1_UndelegateClaim =
    _penumbra_core_component_stake_v1_UndelegateClaim;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_stake_v1_UndelegateClaimPlan {
    pub has_validator_identity: bool,
    pub validator_identity: penumbra_core_keys_v1_IdentityKey,
    pub start_epoch_index: u64,
    pub has_penalty: bool,
    pub penalty: penumbra_core_component_stake_v1_Penalty,
    pub has_unbonding_amount: bool,
    pub unbonding_amount: penumbra_core_num_v1_Amount,
    pub balance_blinding: pb_callback_t,
    pub proof_blinding_r: pb_callback_t,
    pub proof_blinding_s: pb_callback_t,
    pub unbonding_start_height: u64,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_stake_v1_UndelegateClaimPlan() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_component_stake_v1_UndelegateClaimPlan> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_stake_v1_UndelegateClaimPlan>(),
        136usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_stake_v1_UndelegateClaimPlan)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_stake_v1_UndelegateClaimPlan>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_stake_v1_UndelegateClaimPlan)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_validator_identity) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_UndelegateClaimPlan),
            "::",
            stringify!(has_validator_identity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).validator_identity) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_UndelegateClaimPlan),
            "::",
            stringify!(validator_identity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_epoch_index) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_UndelegateClaimPlan),
            "::",
            stringify!(start_epoch_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_penalty) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_UndelegateClaimPlan),
            "::",
            stringify!(has_penalty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).penalty) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_UndelegateClaimPlan),
            "::",
            stringify!(penalty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_unbonding_amount) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_UndelegateClaimPlan),
            "::",
            stringify!(has_unbonding_amount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unbonding_amount) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_UndelegateClaimPlan),
            "::",
            stringify!(unbonding_amount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).balance_blinding) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_UndelegateClaimPlan),
            "::",
            stringify!(balance_blinding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).proof_blinding_r) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_UndelegateClaimPlan),
            "::",
            stringify!(proof_blinding_r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).proof_blinding_s) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_UndelegateClaimPlan),
            "::",
            stringify!(proof_blinding_s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unbonding_start_height) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_UndelegateClaimPlan),
            "::",
            stringify!(unbonding_start_height)
        )
    );
}
pub type penumbra_core_component_stake_v1_UndelegateClaimPlan =
    _penumbra_core_component_stake_v1_UndelegateClaimPlan;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_stake_v1_GetValidatorInfoRequest {
    pub has_identity_key: bool,
    pub identity_key: penumbra_core_keys_v1_IdentityKey,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_stake_v1_GetValidatorInfoRequest() {
    const UNINIT: ::std::mem::MaybeUninit<
        _penumbra_core_component_stake_v1_GetValidatorInfoRequest,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_stake_v1_GetValidatorInfoRequest>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_stake_v1_GetValidatorInfoRequest)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_stake_v1_GetValidatorInfoRequest>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_stake_v1_GetValidatorInfoRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_identity_key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_GetValidatorInfoRequest),
            "::",
            stringify!(has_identity_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identity_key) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_GetValidatorInfoRequest),
            "::",
            stringify!(identity_key)
        )
    );
}
pub type penumbra_core_component_stake_v1_GetValidatorInfoRequest =
    _penumbra_core_component_stake_v1_GetValidatorInfoRequest;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_stake_v1_GetValidatorInfoResponse {
    pub has_validator_info: bool,
    pub validator_info: penumbra_core_component_stake_v1_ValidatorInfo,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_stake_v1_GetValidatorInfoResponse() {
    const UNINIT: ::std::mem::MaybeUninit<
        _penumbra_core_component_stake_v1_GetValidatorInfoResponse,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_stake_v1_GetValidatorInfoResponse>(),
        328usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_stake_v1_GetValidatorInfoResponse)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_stake_v1_GetValidatorInfoResponse>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_stake_v1_GetValidatorInfoResponse)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_validator_info) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_GetValidatorInfoResponse),
            "::",
            stringify!(has_validator_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).validator_info) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_GetValidatorInfoResponse),
            "::",
            stringify!(validator_info)
        )
    );
}
pub type penumbra_core_component_stake_v1_GetValidatorInfoResponse =
    _penumbra_core_component_stake_v1_GetValidatorInfoResponse;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _penumbra_core_component_stake_v1_ValidatorInfoRequest {
    pub show_inactive: bool,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_stake_v1_ValidatorInfoRequest() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_component_stake_v1_ValidatorInfoRequest> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_stake_v1_ValidatorInfoRequest>(),
        1usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorInfoRequest)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_stake_v1_ValidatorInfoRequest>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorInfoRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).show_inactive) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorInfoRequest),
            "::",
            stringify!(show_inactive)
        )
    );
}
pub type penumbra_core_component_stake_v1_ValidatorInfoRequest =
    _penumbra_core_component_stake_v1_ValidatorInfoRequest;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_stake_v1_ValidatorInfoResponse {
    pub has_validator_info: bool,
    pub validator_info: penumbra_core_component_stake_v1_ValidatorInfo,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_stake_v1_ValidatorInfoResponse() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_component_stake_v1_ValidatorInfoResponse> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_stake_v1_ValidatorInfoResponse>(),
        328usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorInfoResponse)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_stake_v1_ValidatorInfoResponse>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorInfoResponse)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_validator_info) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorInfoResponse),
            "::",
            stringify!(has_validator_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).validator_info) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorInfoResponse),
            "::",
            stringify!(validator_info)
        )
    );
}
pub type penumbra_core_component_stake_v1_ValidatorInfoResponse =
    _penumbra_core_component_stake_v1_ValidatorInfoResponse;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_stake_v1_ValidatorStatusRequest {
    pub has_identity_key: bool,
    pub identity_key: penumbra_core_keys_v1_IdentityKey,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_stake_v1_ValidatorStatusRequest() {
    const UNINIT: ::std::mem::MaybeUninit<
        _penumbra_core_component_stake_v1_ValidatorStatusRequest,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_stake_v1_ValidatorStatusRequest>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorStatusRequest)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_stake_v1_ValidatorStatusRequest>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorStatusRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_identity_key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorStatusRequest),
            "::",
            stringify!(has_identity_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identity_key) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorStatusRequest),
            "::",
            stringify!(identity_key)
        )
    );
}
pub type penumbra_core_component_stake_v1_ValidatorStatusRequest =
    _penumbra_core_component_stake_v1_ValidatorStatusRequest;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_stake_v1_ValidatorStatusResponse {
    pub has_status: bool,
    pub status: penumbra_core_component_stake_v1_ValidatorStatus,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_stake_v1_ValidatorStatusResponse() {
    const UNINIT: ::std::mem::MaybeUninit<
        _penumbra_core_component_stake_v1_ValidatorStatusResponse,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_stake_v1_ValidatorStatusResponse>(),
        96usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorStatusResponse)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_stake_v1_ValidatorStatusResponse>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorStatusResponse)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_status) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorStatusResponse),
            "::",
            stringify!(has_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorStatusResponse),
            "::",
            stringify!(status)
        )
    );
}
pub type penumbra_core_component_stake_v1_ValidatorStatusResponse =
    _penumbra_core_component_stake_v1_ValidatorStatusResponse;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_stake_v1_ValidatorPenaltyRequest {
    pub has_identity_key: bool,
    pub identity_key: penumbra_core_keys_v1_IdentityKey,
    pub start_epoch_index: u64,
    pub end_epoch_index: u64,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_stake_v1_ValidatorPenaltyRequest() {
    const UNINIT: ::std::mem::MaybeUninit<
        _penumbra_core_component_stake_v1_ValidatorPenaltyRequest,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_stake_v1_ValidatorPenaltyRequest>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorPenaltyRequest)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_stake_v1_ValidatorPenaltyRequest>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorPenaltyRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_identity_key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorPenaltyRequest),
            "::",
            stringify!(has_identity_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identity_key) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorPenaltyRequest),
            "::",
            stringify!(identity_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_epoch_index) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorPenaltyRequest),
            "::",
            stringify!(start_epoch_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_epoch_index) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorPenaltyRequest),
            "::",
            stringify!(end_epoch_index)
        )
    );
}
pub type penumbra_core_component_stake_v1_ValidatorPenaltyRequest =
    _penumbra_core_component_stake_v1_ValidatorPenaltyRequest;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_stake_v1_ValidatorPenaltyResponse {
    pub has_penalty: bool,
    pub penalty: penumbra_core_component_stake_v1_Penalty,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_stake_v1_ValidatorPenaltyResponse() {
    const UNINIT: ::std::mem::MaybeUninit<
        _penumbra_core_component_stake_v1_ValidatorPenaltyResponse,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_stake_v1_ValidatorPenaltyResponse>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorPenaltyResponse)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_stake_v1_ValidatorPenaltyResponse>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorPenaltyResponse)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_penalty) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorPenaltyResponse),
            "::",
            stringify!(has_penalty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).penalty) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorPenaltyResponse),
            "::",
            stringify!(penalty)
        )
    );
}
pub type penumbra_core_component_stake_v1_ValidatorPenaltyResponse =
    _penumbra_core_component_stake_v1_ValidatorPenaltyResponse;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_stake_v1_CurrentValidatorRateRequest {
    pub has_identity_key: bool,
    pub identity_key: penumbra_core_keys_v1_IdentityKey,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_stake_v1_CurrentValidatorRateRequest() {
    const UNINIT: ::std::mem::MaybeUninit<
        _penumbra_core_component_stake_v1_CurrentValidatorRateRequest,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_stake_v1_CurrentValidatorRateRequest>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_stake_v1_CurrentValidatorRateRequest)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_stake_v1_CurrentValidatorRateRequest>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_stake_v1_CurrentValidatorRateRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_identity_key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_CurrentValidatorRateRequest),
            "::",
            stringify!(has_identity_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identity_key) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_CurrentValidatorRateRequest),
            "::",
            stringify!(identity_key)
        )
    );
}
pub type penumbra_core_component_stake_v1_CurrentValidatorRateRequest =
    _penumbra_core_component_stake_v1_CurrentValidatorRateRequest;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_stake_v1_CurrentValidatorRateResponse {
    pub has_data: bool,
    pub data: penumbra_core_component_stake_v1_RateData,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_stake_v1_CurrentValidatorRateResponse() {
    const UNINIT: ::std::mem::MaybeUninit<
        _penumbra_core_component_stake_v1_CurrentValidatorRateResponse,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_stake_v1_CurrentValidatorRateResponse>(),
        88usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_stake_v1_CurrentValidatorRateResponse)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_stake_v1_CurrentValidatorRateResponse>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_stake_v1_CurrentValidatorRateResponse)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_CurrentValidatorRateResponse),
            "::",
            stringify!(has_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_CurrentValidatorRateResponse),
            "::",
            stringify!(data)
        )
    );
}
pub type penumbra_core_component_stake_v1_CurrentValidatorRateResponse =
    _penumbra_core_component_stake_v1_CurrentValidatorRateResponse;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_stake_v1_ValidatorUptimeRequest {
    pub has_identity_key: bool,
    pub identity_key: penumbra_core_keys_v1_IdentityKey,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_stake_v1_ValidatorUptimeRequest() {
    const UNINIT: ::std::mem::MaybeUninit<
        _penumbra_core_component_stake_v1_ValidatorUptimeRequest,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_stake_v1_ValidatorUptimeRequest>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorUptimeRequest)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_stake_v1_ValidatorUptimeRequest>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorUptimeRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_identity_key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorUptimeRequest),
            "::",
            stringify!(has_identity_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identity_key) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorUptimeRequest),
            "::",
            stringify!(identity_key)
        )
    );
}
pub type penumbra_core_component_stake_v1_ValidatorUptimeRequest =
    _penumbra_core_component_stake_v1_ValidatorUptimeRequest;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_stake_v1_ValidatorUptimeResponse {
    pub has_uptime: bool,
    pub uptime: penumbra_core_component_stake_v1_Uptime,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_stake_v1_ValidatorUptimeResponse() {
    const UNINIT: ::std::mem::MaybeUninit<
        _penumbra_core_component_stake_v1_ValidatorUptimeResponse,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_stake_v1_ValidatorUptimeResponse>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorUptimeResponse)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_stake_v1_ValidatorUptimeResponse>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorUptimeResponse)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_uptime) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorUptimeResponse),
            "::",
            stringify!(has_uptime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uptime) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_ValidatorUptimeResponse),
            "::",
            stringify!(uptime)
        )
    );
}
pub type penumbra_core_component_stake_v1_ValidatorUptimeResponse =
    _penumbra_core_component_stake_v1_ValidatorUptimeResponse;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _penumbra_core_component_stake_v1_StakeParameters {
    pub unbonding_epochs: u64,
    pub active_validator_limit: u64,
    pub base_reward_rate: u64,
    pub slashing_penalty_misbehavior: u64,
    pub slashing_penalty_downtime: u64,
    pub signed_blocks_window_len: u64,
    pub missed_blocks_maximum: u64,
    pub has_min_validator_stake: bool,
    pub min_validator_stake: penumbra_core_num_v1_Amount,
    pub unbonding_delay: u64,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_stake_v1_StakeParameters() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_component_stake_v1_StakeParameters> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_stake_v1_StakeParameters>(),
        88usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_stake_v1_StakeParameters)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_stake_v1_StakeParameters>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_stake_v1_StakeParameters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unbonding_epochs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_StakeParameters),
            "::",
            stringify!(unbonding_epochs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).active_validator_limit) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_StakeParameters),
            "::",
            stringify!(active_validator_limit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_reward_rate) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_StakeParameters),
            "::",
            stringify!(base_reward_rate)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).slashing_penalty_misbehavior) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_StakeParameters),
            "::",
            stringify!(slashing_penalty_misbehavior)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slashing_penalty_downtime) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_StakeParameters),
            "::",
            stringify!(slashing_penalty_downtime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signed_blocks_window_len) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_StakeParameters),
            "::",
            stringify!(signed_blocks_window_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).missed_blocks_maximum) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_StakeParameters),
            "::",
            stringify!(missed_blocks_maximum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_min_validator_stake) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_StakeParameters),
            "::",
            stringify!(has_min_validator_stake)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_validator_stake) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_StakeParameters),
            "::",
            stringify!(min_validator_stake)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unbonding_delay) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_StakeParameters),
            "::",
            stringify!(unbonding_delay)
        )
    );
}
pub type penumbra_core_component_stake_v1_StakeParameters =
    _penumbra_core_component_stake_v1_StakeParameters;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_stake_v1_GenesisContent {
    pub has_stake_params: bool,
    pub stake_params: penumbra_core_component_stake_v1_StakeParameters,
    pub validators: pb_callback_t,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_stake_v1_GenesisContent() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_component_stake_v1_GenesisContent> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_stake_v1_GenesisContent>(),
        112usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_stake_v1_GenesisContent)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_stake_v1_GenesisContent>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_stake_v1_GenesisContent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_stake_params) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_GenesisContent),
            "::",
            stringify!(has_stake_params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stake_params) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_GenesisContent),
            "::",
            stringify!(stake_params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).validators) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_GenesisContent),
            "::",
            stringify!(validators)
        )
    );
}
pub type penumbra_core_component_stake_v1_GenesisContent =
    _penumbra_core_component_stake_v1_GenesisContent;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_stake_v1_EventTombstoneValidator {
    pub evidence_height: u64,
    pub current_height: u64,
    pub has_identity_key: bool,
    pub identity_key: penumbra_core_keys_v1_IdentityKey,
    pub address: pb_callback_t,
    pub voting_power: u64,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_stake_v1_EventTombstoneValidator() {
    const UNINIT: ::std::mem::MaybeUninit<
        _penumbra_core_component_stake_v1_EventTombstoneValidator,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_stake_v1_EventTombstoneValidator>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_stake_v1_EventTombstoneValidator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_stake_v1_EventTombstoneValidator>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_stake_v1_EventTombstoneValidator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evidence_height) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_EventTombstoneValidator),
            "::",
            stringify!(evidence_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current_height) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_EventTombstoneValidator),
            "::",
            stringify!(current_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_identity_key) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_EventTombstoneValidator),
            "::",
            stringify!(has_identity_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identity_key) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_EventTombstoneValidator),
            "::",
            stringify!(identity_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_EventTombstoneValidator),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).voting_power) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_EventTombstoneValidator),
            "::",
            stringify!(voting_power)
        )
    );
}
pub type penumbra_core_component_stake_v1_EventTombstoneValidator =
    _penumbra_core_component_stake_v1_EventTombstoneValidator;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_stake_v1_EventValidatorStateChange {
    pub has_identity_key: bool,
    pub identity_key: penumbra_core_keys_v1_IdentityKey,
    pub has_state: bool,
    pub state: penumbra_core_component_stake_v1_ValidatorState,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_stake_v1_EventValidatorStateChange() {
    const UNINIT: ::std::mem::MaybeUninit<
        _penumbra_core_component_stake_v1_EventValidatorStateChange,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_stake_v1_EventValidatorStateChange>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_stake_v1_EventValidatorStateChange)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_stake_v1_EventValidatorStateChange>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_stake_v1_EventValidatorStateChange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_identity_key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_EventValidatorStateChange),
            "::",
            stringify!(has_identity_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identity_key) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_EventValidatorStateChange),
            "::",
            stringify!(identity_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_state) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_EventValidatorStateChange),
            "::",
            stringify!(has_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_EventValidatorStateChange),
            "::",
            stringify!(state)
        )
    );
}
pub type penumbra_core_component_stake_v1_EventValidatorStateChange =
    _penumbra_core_component_stake_v1_EventValidatorStateChange;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_stake_v1_EventValidatorVotingPowerChange {
    pub has_identity_key: bool,
    pub identity_key: penumbra_core_keys_v1_IdentityKey,
    pub has_voting_power: bool,
    pub voting_power: penumbra_core_num_v1_Amount,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_stake_v1_EventValidatorVotingPowerChange() {
    const UNINIT: ::std::mem::MaybeUninit<
        _penumbra_core_component_stake_v1_EventValidatorVotingPowerChange,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_stake_v1_EventValidatorVotingPowerChange>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_stake_v1_EventValidatorVotingPowerChange)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_stake_v1_EventValidatorVotingPowerChange>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_stake_v1_EventValidatorVotingPowerChange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_identity_key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_EventValidatorVotingPowerChange),
            "::",
            stringify!(has_identity_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identity_key) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_EventValidatorVotingPowerChange),
            "::",
            stringify!(identity_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_voting_power) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_EventValidatorVotingPowerChange),
            "::",
            stringify!(has_voting_power)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).voting_power) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_EventValidatorVotingPowerChange),
            "::",
            stringify!(voting_power)
        )
    );
}
pub type penumbra_core_component_stake_v1_EventValidatorVotingPowerChange =
    _penumbra_core_component_stake_v1_EventValidatorVotingPowerChange;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_stake_v1_EventValidatorBondingStateChange {
    pub has_identity_key: bool,
    pub identity_key: penumbra_core_keys_v1_IdentityKey,
    pub has_bonding_state: bool,
    pub bonding_state: penumbra_core_component_stake_v1_BondingState,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_stake_v1_EventValidatorBondingStateChange() {
    const UNINIT: ::std::mem::MaybeUninit<
        _penumbra_core_component_stake_v1_EventValidatorBondingStateChange,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_stake_v1_EventValidatorBondingStateChange>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_stake_v1_EventValidatorBondingStateChange)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_stake_v1_EventValidatorBondingStateChange>(
        ),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_stake_v1_EventValidatorBondingStateChange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_identity_key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_EventValidatorBondingStateChange),
            "::",
            stringify!(has_identity_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identity_key) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_EventValidatorBondingStateChange),
            "::",
            stringify!(identity_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_bonding_state) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_EventValidatorBondingStateChange),
            "::",
            stringify!(has_bonding_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bonding_state) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_EventValidatorBondingStateChange),
            "::",
            stringify!(bonding_state)
        )
    );
}
pub type penumbra_core_component_stake_v1_EventValidatorBondingStateChange =
    _penumbra_core_component_stake_v1_EventValidatorBondingStateChange;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_stake_v1_EventRateDataChange {
    pub has_identity_key: bool,
    pub identity_key: penumbra_core_keys_v1_IdentityKey,
    pub has_rate_data: bool,
    pub rate_data: penumbra_core_component_stake_v1_RateData,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_stake_v1_EventRateDataChange() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_component_stake_v1_EventRateDataChange> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_stake_v1_EventRateDataChange>(),
        112usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_stake_v1_EventRateDataChange)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_stake_v1_EventRateDataChange>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_stake_v1_EventRateDataChange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_identity_key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_EventRateDataChange),
            "::",
            stringify!(has_identity_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identity_key) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_EventRateDataChange),
            "::",
            stringify!(identity_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_rate_data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_EventRateDataChange),
            "::",
            stringify!(has_rate_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rate_data) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_EventRateDataChange),
            "::",
            stringify!(rate_data)
        )
    );
}
pub type penumbra_core_component_stake_v1_EventRateDataChange =
    _penumbra_core_component_stake_v1_EventRateDataChange;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_stake_v1_EventValidatorDefinitionUpload {
    pub has_validator: bool,
    pub validator: penumbra_core_component_stake_v1_Validator,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_stake_v1_EventValidatorDefinitionUpload() {
    const UNINIT: ::std::mem::MaybeUninit<
        _penumbra_core_component_stake_v1_EventValidatorDefinitionUpload,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_stake_v1_EventValidatorDefinitionUpload>(),
        136usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_stake_v1_EventValidatorDefinitionUpload)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_stake_v1_EventValidatorDefinitionUpload>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_stake_v1_EventValidatorDefinitionUpload)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_validator) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_EventValidatorDefinitionUpload),
            "::",
            stringify!(has_validator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).validator) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_EventValidatorDefinitionUpload),
            "::",
            stringify!(validator)
        )
    );
}
pub type penumbra_core_component_stake_v1_EventValidatorDefinitionUpload =
    _penumbra_core_component_stake_v1_EventValidatorDefinitionUpload;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_stake_v1_EventValidatorMissedBlock {
    pub has_identity_key: bool,
    pub identity_key: penumbra_core_keys_v1_IdentityKey,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_stake_v1_EventValidatorMissedBlock() {
    const UNINIT: ::std::mem::MaybeUninit<
        _penumbra_core_component_stake_v1_EventValidatorMissedBlock,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_stake_v1_EventValidatorMissedBlock>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_stake_v1_EventValidatorMissedBlock)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_stake_v1_EventValidatorMissedBlock>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_stake_v1_EventValidatorMissedBlock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_identity_key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_EventValidatorMissedBlock),
            "::",
            stringify!(has_identity_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identity_key) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_EventValidatorMissedBlock),
            "::",
            stringify!(identity_key)
        )
    );
}
pub type penumbra_core_component_stake_v1_EventValidatorMissedBlock =
    _penumbra_core_component_stake_v1_EventValidatorMissedBlock;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_stake_v1_EventDelegate {
    pub has_identity_key: bool,
    pub identity_key: penumbra_core_keys_v1_IdentityKey,
    pub has_amount: bool,
    pub amount: penumbra_core_num_v1_Amount,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_stake_v1_EventDelegate() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_component_stake_v1_EventDelegate> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_stake_v1_EventDelegate>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_stake_v1_EventDelegate)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_stake_v1_EventDelegate>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_stake_v1_EventDelegate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_identity_key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_EventDelegate),
            "::",
            stringify!(has_identity_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identity_key) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_EventDelegate),
            "::",
            stringify!(identity_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_amount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_EventDelegate),
            "::",
            stringify!(has_amount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_EventDelegate),
            "::",
            stringify!(amount)
        )
    );
}
pub type penumbra_core_component_stake_v1_EventDelegate =
    _penumbra_core_component_stake_v1_EventDelegate;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_stake_v1_EventUndelegate {
    pub has_identity_key: bool,
    pub identity_key: penumbra_core_keys_v1_IdentityKey,
    pub has_amount: bool,
    pub amount: penumbra_core_num_v1_Amount,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_stake_v1_EventUndelegate() {
    const UNINIT: ::std::mem::MaybeUninit<_penumbra_core_component_stake_v1_EventUndelegate> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_stake_v1_EventUndelegate>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_stake_v1_EventUndelegate)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_stake_v1_EventUndelegate>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_stake_v1_EventUndelegate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_identity_key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_EventUndelegate),
            "::",
            stringify!(has_identity_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identity_key) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_EventUndelegate),
            "::",
            stringify!(identity_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_amount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_EventUndelegate),
            "::",
            stringify!(has_amount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_EventUndelegate),
            "::",
            stringify!(amount)
        )
    );
}
pub type penumbra_core_component_stake_v1_EventUndelegate =
    _penumbra_core_component_stake_v1_EventUndelegate;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _penumbra_core_component_stake_v1_EventSlashingPenaltyApplied {
    pub has_identity_key: bool,
    pub identity_key: penumbra_core_keys_v1_IdentityKey,
    pub epoch_index: u64,
    pub has_new_penalty: bool,
    pub new_penalty: penumbra_core_component_stake_v1_Penalty,
}
#[test]
fn bindgen_test_layout__penumbra_core_component_stake_v1_EventSlashingPenaltyApplied() {
    const UNINIT: ::std::mem::MaybeUninit<
        _penumbra_core_component_stake_v1_EventSlashingPenaltyApplied,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_penumbra_core_component_stake_v1_EventSlashingPenaltyApplied>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(_penumbra_core_component_stake_v1_EventSlashingPenaltyApplied)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_penumbra_core_component_stake_v1_EventSlashingPenaltyApplied>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_penumbra_core_component_stake_v1_EventSlashingPenaltyApplied)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_identity_key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_EventSlashingPenaltyApplied),
            "::",
            stringify!(has_identity_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identity_key) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_EventSlashingPenaltyApplied),
            "::",
            stringify!(identity_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).epoch_index) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_EventSlashingPenaltyApplied),
            "::",
            stringify!(epoch_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_new_penalty) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_EventSlashingPenaltyApplied),
            "::",
            stringify!(has_new_penalty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).new_penalty) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_penumbra_core_component_stake_v1_EventSlashingPenaltyApplied),
            "::",
            stringify!(new_penalty)
        )
    );
}
pub type penumbra_core_component_stake_v1_EventSlashingPenaltyApplied =
    _penumbra_core_component_stake_v1_EventSlashingPenaltyApplied;
extern "C" {
    pub static penumbra_core_component_stake_v1_ZKUndelegateClaimProof_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_stake_v1_Validator_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_stake_v1_ValidatorList_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_stake_v1_FundingStream_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_stake_v1_FundingStream_ToAddress_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_stake_v1_FundingStream_ToCommunityPool_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_stake_v1_RateData_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_stake_v1_BaseRateData_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_stake_v1_ValidatorStatus_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_stake_v1_BondingState_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_stake_v1_ValidatorState_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_stake_v1_ValidatorInfo_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_stake_v1_ValidatorDefinition_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_stake_v1_Delegate_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_stake_v1_Undelegate_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_stake_v1_UndelegateClaim_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_stake_v1_UndelegateClaimBody_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_stake_v1_UndelegateClaimPlan_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_stake_v1_DelegationChanges_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_stake_v1_Uptime_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_stake_v1_CurrentConsensusKeys_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_stake_v1_Penalty_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_stake_v1_GetValidatorInfoRequest_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_stake_v1_GetValidatorInfoResponse_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_stake_v1_ValidatorInfoRequest_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_stake_v1_ValidatorInfoResponse_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_stake_v1_ValidatorStatusRequest_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_stake_v1_ValidatorStatusResponse_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_stake_v1_ValidatorPenaltyRequest_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_stake_v1_ValidatorPenaltyResponse_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_stake_v1_CurrentValidatorRateRequest_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_stake_v1_CurrentValidatorRateResponse_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_stake_v1_ValidatorUptimeRequest_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_stake_v1_ValidatorUptimeResponse_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_stake_v1_StakeParameters_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_stake_v1_GenesisContent_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_stake_v1_EventTombstoneValidator_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_stake_v1_EventValidatorStateChange_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_stake_v1_EventValidatorVotingPowerChange_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_stake_v1_EventValidatorBondingStateChange_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_stake_v1_EventRateDataChange_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_stake_v1_EventValidatorDefinitionUpload_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_stake_v1_EventValidatorMissedBlock_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_stake_v1_EventDelegate_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_stake_v1_EventUndelegate_msg: pb_msgdesc_t;
}
extern "C" {
    pub static penumbra_core_component_stake_v1_EventSlashingPenaltyApplied_msg: pb_msgdesc_t;
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
