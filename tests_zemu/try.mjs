import TransportNodeHid from '@ledgerhq/hw-transport-node-hid'
import { PenumbraApp } from '@zondax/ledger-penumbra'

const PEN_PATH = "m/44'/6532'/0'"
const ACCOUNT_ID = 1
const RANDOMIZER = '770187941264c925f8ba8776'
const SPEND_PLAN =
  '0abe020abb020aa8010a300a0a08f4979edff8bbd1990712220a2029ea9c2f3371f6a487e7e95c247041f4a356f983eb064e5d2b3bcf322ca96a10122014b6628b360cca59dad6c87bc2b082b694ce0db47bcda0cfaf6d49ca187ed80e1a520a50890bc98e3698aa4578e419b028da5672e627c280d8b06166f4c42d5366bccf1fcf3b296cd61e8d744a21f75f2fb697183e18595d8a79008539d8fb138b405db09db65cc42d54c0e772e5d42d5f20b52f10f4f9b09cfad4251a20acbb274bf255bbd32da0f5c380299b3bfa97a533cc2ca46e99e913a6b7c28a0422204cc69a01753e22bfa0b4fb75902843396ab34e30d542abe32a022c00d65708042a2082b07699836e60da166a1d61247e22182059a0aefa9c6237796a0080ad6c05123220c87020807fef96d1be9611d5b667a4440149c88570402e69953ed3cc1b5b2b010abe020abb020aa8010a300a0a08fc859aaaa08b91a20212220a2029ea9c2f3371f6a487e7e95c247041f4a356f983eb064e5d2b3bcf322ca96a1012206dfb50a0cf56ab7031b3033585625b5258bab62322c95628210c221d190c2db91a520a50890bc98e3698aa4578e419b028da5672e627c280d8b06166f4c42d5366bccf1fcf3b296cd61e8d744a21f75f2fb697183e18595d8a79008539d8fb138b405db09db65cc42d54c0e772e5d42d5f20b52f1099baa080b4f9241a204749c0e0361387ba82a4c19bc67e0b5c06c8c1774cec1c40704410f555a07c01222007199b871976c500d0fd9c7d84080928b08d1cada04c8d1dcc0312ff9c8c09022a20347b2de85bb5b0e239698c25d3d48c518948329fb68b5191ae001557094063033220b80b022226dfe8cc2147b9c84611b3e176be6ed96923be009e3b55cb926a9c10121e0885d61c120a70656e756d6272612d311a0c0a0a08b0f1a2f1f4a7a6c3042a9a030af5020a520a50e3e26ee0d15a394b72006b8225947579987352a906d2c40e3dff8cc09d6073f1c16c201752ce1af319be3e8cd42f87e1566e0f02a7dea4dae9ca561a792b9c669f5d2f73baf62ecc5d3e90951d333292129e0252387a663820753635756c384320564849797561207361376c615335393630206f695931207920303020643220306e6253203548206c5831417270326d20206f7220304951642071384e724b204557564d59483574746b376d20202058365a6e7762344a3332204e674f58387a4f6920774c33684d4e7a6820416e6e204537206e6e576d437120332020204b343834653455624a3254394655516459324d662053652053202043206d30787a204641324d205875206c68454d5a68314348456b206c33376d4c4b6f56586820326b35577a504932204537207241647120554b3620393520335820473320386536524c734a20206b5731322033204d3656334a537034205036205573635456624539573230207931347971207a6633764378122023f300f488b9ece996037c9e2b1ede7fe3cf1260bd3a02820a36c4e6bda74af2'

const ICS20_PLAN =
  '0aa802c20ca4020a0a089ac1a69ed6899eb20a12170a156555696136517031326662333046327071304e67411a8f0170656e756d62726131357a376c717a30667578716c3363746168717a6a687365726d6b74756c327a376e716b3074673364787876656b793076327574706130373474377174766e6a3036796d33756c6771766a6c356b6a7271686c32636464736866306a337a79666e30746c733974397736677975616e363263376e61613239747a3238353430323970716563776d22520a507d1ae84746eeca2356ab7d18a7597b3b0e3a91fdb701b3003df15e90d2f6b2775d41893e37ccd1afd4d8cd170838f2f3ff69a99baa1384cca876c0ed7ff7771956f46197af3fc6f9b10aa671ff53e46e2a0c08f6baf1db0310fe97bafb013a096368616e6e656c2d30123808e188091224796469667779697573666f6b737777627166656e6b2d33323234363639343633383737331a0c0a0a08fae384879bc48c890a2a91030aec020a520a50738391f16c9d87ecf88aaa28f6dc7cc4eb413594adfb83ae85fb2fd5dd6c9709c3899b3a15f6a5a4dd8fdd5c10d0ea84dccaa02f20bb5476e1646b18fd54f657a8b1906f67995f40834f9c44440f22e01295025820452032386a31547520204868303147652033554c52375a532020383575782079492072202063597165202020206168346631583079306e6c3255453737313020544774506b5a514766766e4f4678314f2020346920393768207056204f203120544c6f697659706e794630774a506b3733556f3573336e205a76652078623774613136642064207738734d436a2053207730314a6b37204962452078616d2020654a392042205455203066566a634e204437554d684e4b4d71717a2036656d492046376c457431546e376578674f4f71546667387050386c204e203352333139764774706b4820455520344320754b30306f4170332020204d6f35204634353820383774356f58396562204f4520644f5553201220dd9b6fc0592cbdc2d6680301d529a5448f72b0ba63451979351d7d2ada963950'

async function showAddress(app) {
  let resp = await app.deviceInfo()
  console.log('Device Info', resp)
  resp = await app.getVersion()
  console.log('Version', resp)

  resp = await app.showAddress(PEN_PATH, ACCOUNT_ID, RANDOMIZER)
  console.log(resp)
  const address = resp.address
  console.log('Address: ' + address.toString('hex'))
}

async function signIcs20Withdrawal(app) {}

async function signAction(app, action) {
  const messageToSign = Buffer.from(action, 'hex')
  try {
    const signatureRequest = app.sign(PEN_PATH, messageToSign)
    const signatureResponse = await signatureRequest
    console.log('Effect hash:', signatureResponse.effectHash.toString('hex'))

    if (signatureResponse.spendAuthSignatures.length > 0) {
      signatureResponse.spendAuthSignatures.forEach((signature, index) => {
        console.log(`Spend Auth Signature ${index + 1}: ${signature.toString('hex')}`)
      })
    } else {
      console.log('No spend auth signatures available.')
    }

    if (signatureResponse.delegatorVoteSignatures.length > 0) {
      signatureResponse.delegatorVoteSignatures.forEach((signature, index) => {
        console.log(`Delegator Vote Signature ${index + 1}: ${signature.toString('hex')}`)
      })
    } else {
      console.log('No delegator vote signatures available.')
    }
  } catch (e) {
    console.log(e)
  }
}

async function main() {
  const transport = await TransportNodeHid.default.open()

  const app = new PenumbraApp(transport)

  // Enable/disable(uncommenting) to try this features on a real device
  // await showAddress(app)
  await signAction(app, SPEND_PLAN)
  // await signAction(app, ICS20_PLAN)
}

;(async () => {
  await main()
})()
